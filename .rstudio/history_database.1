1610557193454:knitr::opts_chunk$set(echo = TRUE)
1610557193623:coffee %>%
1610557193652:ggplot(aes(x=aroma)) +
1610557193700:theme_classic() +
1610557193724:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1610557193745:labs(title="Coffee Aroma Score",
1610557193765:x = "Aroma Score",
1610557193784:y = "Density" )
1610557196663:knitr::opts_chunk$set(echo = TRUE)
1610557199332:library(tidyverse)
1610557201278:coffee <- read_csv("coffee_ratings.csv")
1610557206405:glimpse(coffee)
1610557210432:head(coffee)
1610557214752:coffee %>%
1610557214774:ggplot(aes(x=aroma)) +
1610557214796:theme_classic() +
1610557214816:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1610557214839:labs(title="Coffee Aroma Score",
1610557214872:x = "Aroma Score",
1610557214894:y = "Density" )
1610557227656:# Quantiles
1610557227679:quantile(coffee$aroma, probs=0.7)
1610659679535:knitr::opts_chunk$set(echo = TRUE)
1610659679761:# Kernel density estimation in R
1610659679784:dens <- density(coffee$aroma)
1610659685453:knitr::opts_chunk$set(echo = TRUE)
1610659685524:library(tidyverse)
1610659687630:coffee <- read_csv("coffee_ratings.csv")
1610659688001:glimpse(coffee)
1610659688148:head(coffee)
1610659688277:coffee %>%
1610659688303:ggplot(aes(x=aroma)) +
1610659688324:theme_classic() +
1610659688348:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1610659688372:labs(title="Coffee Aroma Score",
1610659688391:x = "Aroma Score",
1610659688414:y = "Density" )
1610659688811:# Kernel density estimation in R
1610659688839:dens <- density(coffee$aroma)
1610659688937:dens
1610659689180:plot(dens)
1610659689306:tibble(x = dens$x,y = dens$y) %>%
1610659689336:ggplot(aes(x = x,y = y)) +
1610659689360:theme_classic() +
1610659689382:geom_line() +
1610659689406:labs(title = "Kernel density estimate, Old Faithful data",
1610659689427:subtitle = "Manually-calculated values",
1610659689454:x = "Eruption time",
1610659689474:y = "Density")
1610659689746:# Can also do automatically:
1610659689770:coffee %>%
1610659689792:ggplot(aes(x = aroma)) +
1610659689812:theme_classic() +
1610659689834:geom_density() +
1610659689853:labs(title = "Kernel density estimate, Old Faithful data",
1610659689877:subtitle = "Automatically-calculated values",
1610659689900:x = "Eruption time",
1610659689921:y = "Density")
1610659690210:coffee_ecdf <- ecdf(coffee$aroma)
1610659690258:plot(coffee_ecdf)
1610659690383:tibble(x = c(1,10)) %>% # Tell ggplot we want to plot the ecdf from 1 to 10
1610659690404:ggplot(aes(x = x)) +
1610659690427:theme_classic() +
1610659690448:stat_function(fun = coffee_ecdf) +
1610659690472:labs(title = "Empirical CDF for Coffee Aroma Scores",
1610659690495:x = "Aroma Scores",
1610659690517:y = "Empirical probability that a score is less than x")
1610659690798:boxplot(coffee$aroma)
1610659690900:# ggplot
1610659690927:coffee %>%
1610659690949:ggplot(aes(y = aroma)) +
1610659690971:theme_classic() +
1610659690993:geom_boxplot(width = .1) +
1610659691016:labs(title = "Boxplot of Coffee Aroma Scores",
1610659691037:y = "Aroma Scores") +
1610659691058:# Have to play around with the x axis to get it to look nice *shrug*
1610659691078:coord_cartesian(xlim = c(-.2,.2)) +
1610659691099:theme(axis.text.x = element_blank())
1610659691347:plot(total_cup_points ~ aroma, data=coffee)
1610659691488:coffee %>%
1610659691515:ggplot(aes(x = aroma, y = total_cup_points)) +
1610659691536:theme_classic() +
1610659691557:geom_point(pch = 21) # pch=21 is the magic command to give you hollow points
1610659691716:# Note, we can use labs() to update the title, x-axis and y-axis labels.
1610659691739:# Same way as a histogram.
1610659691922:# Quantiles
1610659691948:quantile(coffee$aroma, probs=0.7)
1610660367017:# Quantiles
1610660367040:quantile(coffee$aroma, probs=0.7)
1610660367094:IQR(coffee$aroma)
1611261097291:install.packages("patchwork")
1611261343806:knitr::opts_chunk$set(echo = TRUE)
1611261343982:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261344007:size = 10,
1611261344033:replace = TRUE,
1611261344054:prob = c(0.8, 0.15, 0.05))
1611261344101:eat_brocolli
1611261389126:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261389148:size = 10,
1611261389173:replace = TRUE,
1611261389195:prob = c(0.8, 0.15, 0.05))
1611261389286:eat_brocolli
1611261421607:set.seed(1006001899)
1611261421636:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261421663:size = 10,
1611261421684:replace = TRUE,
1611261421706:prob = c(0.8, 0.15, 0.05))
1611261421748:eat_brocolli
1611261425903:set.seed(1006001899)
1611261425927:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261425951:size = 10,
1611261425974:replace = TRUE,
1611261425996:prob = c(0.8, 0.15, 0.05))
1611261426037:eat_brocolli
1611261599625:set.seed(1006001899)
1611261599649:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261599668:size = 10,
1611261599688:replace = TRUE,
1611261599709:prob = c(0.8, 0.15, 0.05))
1611261599753:eat_brocolli
1611261599848:hair_loss <- runif(n=10, min=0, max=10)
1611261599873:hair_loss
1611261788240:knitr::opts_chunk$set(echo = TRUE)
1611261788283:library(tidyverse)
1611261790541:set.seed(1006001899)
1611261790565:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261790599:size = 10,
1611261790623:replace = TRUE,
1611261790643:prob = c(0.8, 0.15, 0.05))
1611261790692:eat_brocolli
1611261790787:hair_loss <- runif(n=10, min=0, max=10)
1611261790827:age <- rpois(n = 10, lambda = 35)
1611261790867:my_data <- tibble(age, eat_brocolli, hair_loss)
1611261793345:set.seed(1006001899)
1611261793368:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261793392:size = 10,
1611261793420:replace = TRUE,
1611261793444:prob = c(0.8, 0.15, 0.05))
1611261793486:eat_brocolli
1611261793575:hair_loss <- runif(n=10, min=0, max=10)
1611261793622:age <- rpois(n = 10, lambda = 35)
1611261793666:my_data <- tibble(age, eat_brocolli, hair_loss)
1611261802277:set.seed(1006001899)
1611261802299:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611261802321:size = 10,
1611261802340:replace = TRUE,
1611261802361:prob = c(0.8, 0.15, 0.05))
1611261802407:eat_brocolli
1611261802493:hair_loss <- runif(n=10, min=0, max=10)
1611261802533:age <- rpois(n = 10, lambda = 35)
1611261802570:my_data <- tibble(age, eat_brocolli, hair_loss)
1611261802599:my_data
1611263482033:# Simulate from a exponential
1611263482078:#beta = 0.5
1611263482098:#rate parameter
1611263482133:rexp(n=5, rate = 0.5)
1611263505384:# Simulate from a exponential
1611263505419:#beta = 0.5
1611263505438:#rate parameter
1611263505459:set.seed(1006001899)
1611263505492:rexp(n=5, rate = 0.5)
1611263694022:# Define a function to compute the density
1611263694061:#### UNCOMMENT BELOW
1611263694084:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263694105:}
1611263694176:# Let's plot this:
1611263694213:# plot(xbar, fxbar)
1611263699992:# Define a function to compute the density
1611263700046:#### UNCOMMENT BELOW
1611263700067:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263700088:}
1611263700174:# Let's plot this:
1611263700212:plot(xbar, fxbar)
1611263742616:# Define a function to compute the density
1611263742656:#### UNCOMMENT BELOW
1611263742678:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263742696:}
1611263742751:xbar <- seq(0, 4, 0.01)
1611263742791:# Let's plot this:
1611263742829:plot(xbar, fxbar)
1611263851908:# Define a function to compute the density
1611263851943:#### UNCOMMENT BELOW
1611263851962:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263851984:}
1611263852035:xbar <- seq(0, 4, 0.01)
1611263852063:fxbar <- exp_samplemean_density(xbar, n = 5, rate= 0.5)
1611263852101:# Let's plot this:
1611263852138:plot(xbar, fxbar)
1611263921887:# Define a function to compute the density
1611263921932:#### UNCOMMENT BELOW
1611263921955:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263921977:}
1611263922027:xbar <- seq(0, 4, 0.01)
1611263922051:fxbar <- exp_samplemean_density(xbar, n = 50, rate= 0.5)
1611263922085:# Let's plot this:
1611263922119:plot(xbar, fxbar)
1611263997212:# Define a function to compute the density
1611263997278:#### UNCOMMENT BELOW
1611263997307:exp_samplemean_density <- function(x ,n, rate = 0.5) {
1611263997328:dgamma(x, n, n*rate)
1611263997347:}
1611263997411:xbar <- seq(0, 4, 0.01)
1611263997437:fxbar <- exp_samplemean_density(xbar, n = 50, rate= 0.5)
1611263997479:# Let's plot this:
1611263997514:plot(xbar, fxbar)
1611264145867:set.seed(20210119)
1611264145901:n <- 100
1611264145927:beta <- 0.5
1611264145949:exponential_experiment <- rexp(n = n,rate = beta)
1611264145986:# Compute the running average- a vector where the nth component is the average
1611264146005:# of the first n terms in exponential_experiment
1611264146026:runningaverage <- cumsum(exponential_experiment) / 1:length(exponential_experiment)
1611264146065:# Plot, remembering that the true mean is 2
1611264146085:tibble(x = 1:length(runningaverage),
1611264146107:y = runningaverage) %>%
1611264146126:ggplot(aes(x = x,y = y)) +
1611264146144:theme_classic() +
1611264146177:geom_point(pch = ".") +
1611264146195:geom_hline(yintercept = 1/beta,colour = "red",size = .5,linetype = "dotted")
1611264297525:set.seed(20210119)
1611264297568:n <- 100
1611264297593:beta <- 0.5
1611264297620:exponential_experiment <- rexp(n = n,rate = beta)
1611264297658:# Compute the running average- a vector where the nth component is the average
1611264297680:# of the first n terms in exponential_experiment
1611264297706:runningaverage <- cumsum(exponential_experiment) / 1:length(exponential_experiment)
1611264297762:# Plot, remembering that the true mean is 2
1611264297783:tibble(x = 1:length(runningaverage),
1611264297809:y = runningaverage) %>%
1611264297831:ggplot(aes(x = x,y = y)) +
1611264297853:theme_classic() +
1611264297881:geom_point(pch = ".") +
1611264297904:geom_hline(yintercept = 1/beta,colour = "red",size = .5,linetype = "dotted")
1611264321008:set.seed(20210119)
1611264321045:n <- 1000
1611264321067:beta <- 0.5
1611264321090:exponential_experiment <- rexp(n = n,rate = beta)
1611264321131:# Compute the running average- a vector where the nth component is the average
1611264321154:# of the first n terms in exponential_experiment
1611264321173:runningaverage <- cumsum(exponential_experiment) / 1:length(exponential_experiment)
1611264321215:# Plot, remembering that the true mean is 2
1611264321247:tibble(x = 1:length(runningaverage),
1611264321269:y = runningaverage) %>%
1611264321290:ggplot(aes(x = x,y = y)) +
1611264321311:theme_classic() +
1611264321332:geom_point(pch = ".") +
1611264321354:geom_hline(yintercept = 1/beta,colour = "red",size = .5,linetype = "dotted")
1611500393849:install.packages("patchwork")
1611501517211:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611501517232:library(openintro)
1611501517842:install.packages("opendatatoronto")
1611501590050:library(opendatatoronto)
1611501590180:packages <- list_packages(limit = 10)
1611501591037:packages
1611501607590:View(packages)
1611501853349:library(opendatatoronto)
1611501853377:packages <- list_packages(limit = 10)
1611501853622:packages
1611501853816:ttc_packages <- search_packages("ttc")
1611501854231:ttc_packages
1611501969890:library(opendatatoronto)
1611501969911:packages <- list_packages(limit = 10)
1611501970232:packages
1611501970308:ttc_packages <- search_packages("street")
1611501970621:ttc_packages
1611501982165:View(packages)
1611503959478:library(opendatatoronto)
1611503959511:packages <- list_packages(limit = 10)
1611503959887:packages
1611503959979:ttc_packages <- search_packages("safety zone")
1611503960369:ttc_packages
1611503960436:show_package("996cfe8d-fb35-40ce-b569-698d51fc683b")
1611503975196:library(opendatatoronto)
1611503975223:packages <- list_packages(limit = 10)
1611503975292:packages
1611503975365:ttc_packages <- search_packages("safety zone")
1611503975460:ttc_packages
1611503975526:show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504075940:library(opendatatoronto)
1611504075965:packages <- list_packages(limit = 10)
1611504076175:packages
1611504076244:ttc_packages <- search_packages("safety zone")
1611504076358:ttc_packages
1611504076432:show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504081484:library(opendatatoronto)
1611504081507:packages <- list_packages(limit = 10)
1611504081575:packages
1611504081645:show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504141605:library(opendatatoronto)
1611504141630:library(dplyr)
1611504141694:# get package
1611504141716:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504141828:package
1611504141900:# get all resources for this package
1611504141924:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504142007:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611504142028:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611504142095:# load the first datastore resource as a sample
1611504142118:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611504144429:data
1611504467202:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611504467226:library(openintro)
1611504467297:## It is recommended that you interlace your answer in
1611504467328:## Part 1b with some r code.
1611504467370:## You may need more R chunks and you may want to include plots.
1611504467433:library(opendatatoronto)
1611504467465:library(dplyr)
1611504467517:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611504467563:# get package
1611504467588:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504467869:package
1611504467941:# get all resources for this package
1611504467965:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504468062:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611504468091:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611504468139:# load the first datastore resource as a sample
1611504468164:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611504470470:data
1611504470772:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611504470821:# You may need additional chunks, in case you want to include some of the cleaning output.
1611504470903:# Use this to calculate some summary measures.
1611504470996:# Use this to create some plots.
1611504609245:View(ttc_packages)
1611504633077:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611504633100:library(openintro)
1611504633158:## It is recommended that you interlace your answer in
1611504633186:## Part 1b with some r code.
1611504633230:## You may need more R chunks and you may want to include plots.
1611504633294:library(opendatatoronto)
1611504633327:library(dplyr)
1611504633366:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611504633406:# get package
1611504633432:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504633584:package
1611504633655:# get all resources for this package
1611504633686:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611504633761:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611504633785:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611504633837:# load the first datastore resource as a sample
1611504633862:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611504635774:data
1611504636070:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611504636114:# You may need additional chunks, in case you want to include some of the cleaning output.
1611504636197:# Use this to calculate some summary measures.
1611504636286:# Use this to create some plots.
1611505261889:View(data)
1611507318311:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507318351:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507318409:data
1611507321959:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507321997:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507322053:data
1611507329467:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507329509:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507329575:data
1611507346221:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507346265:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507346333:package
1611507354116:library(opendatatoronto)
1611507354141:library(dplyr)
1611507354183:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611507354228:# get package
1611507354254:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507354585:package
1611507354660:# get all resources for this package
1611507354687:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507354756:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507354780:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507354843:# load the first datastore resource as a sample
1611507354872:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507357054:data
1611507390039:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507390075:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507390112:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507390211:package
1611507390283:# get all resources for this package
1611507390312:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507390397:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507390418:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507390461:# load the first datastore resource as a sample
1611507390481:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507392513:data
1611507402252:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507402298:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507402337:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507402406:package
1611507402476:# get all resources for this package
1611507402501:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507402580:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507402604:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507402654:# load the first datastore resource as a sample
1611507402681:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507404394:data
1611507463114:library(opendatatoronto)
1611507463137:library(dplyr)
1611507463174:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611507463212:# get package
1611507463235:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507463308:package
1611507463386:# get all resources for this package
1611507463413:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507463499:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507463522:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507463575:# load the first datastore resource as a sample
1611507463598:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507473332:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507473380:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507473445:data
1611507493661:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611507493708:# You may need additional chunks, in case you want to include some of the cleaning output.
1611507493784:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507495888:data
1611507510900:library(opendatatoronto)
1611507510933:library(dplyr)
1611507510976:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611507511020:# get package
1611507511044:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507511105:package
1611507511182:# get all resources for this package
1611507511206:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507511283:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507511312:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507511369:# load the first datastore resource as a sample
1611507511391:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507513187:data
1611507862739:library(opendatatoronto)
1611507862765:library(dplyr)
1611507862806:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611507862845:# get package
1611507862866:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507863134:package
1611507863207:# get all resources for this package
1611507863231:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611507863312:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611507863336:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611507863384:# load the first datastore resource as a sample
1611507863406:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611507865598:data
1611507865869:data %>%
1611507865890:filter(month == "2020-09-01")
1611508197645:library(opendatatoronto)
1611508197666:library(dplyr)
1611508197707:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611508197745:# get package
1611508197767:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611508198042:package
1611508198128:# get all resources for this package
1611508198156:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611508198237:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611508198261:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611508198308:# load the first datastore resource as a sample
1611508198328:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611508200146:data
1611508200424:Sept2020data <- college_recent_grads %>%
1611508200443:filter(month == "2020-09-01")
1611508215657:library(opendatatoronto)
1611508215682:library(dplyr)
1611508215724:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611508215763:# get package
1611508215786:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611508215856:package
1611508215923:# get all resources for this package
1611508215945:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611508216032:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611508216056:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611508216113:# load the first datastore resource as a sample
1611508216139:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611508217799:data
1611508218083:Sept2020data <- data %>%
1611508218108:filter(month == "2020-09-01")
1611508218139:Sept2020data
1611508235493:View(Sept2020data)
1611532553462:install.packages("patchwork")
1611593774058:install.packages("opendatatoronto")
1611593783104:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611593783131:library(openintro)
1611593784019:## It is recommended that you interlace your answer in
1611593784047:## Part 1b with some r code.
1611593784084:## You may need more R chunks and you may want to include plots.
1611593784197:library(opendatatoronto)
1611593784346:library(dplyr)
1611593784406:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611593784444:# get package
1611593784466:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611593785366:package
1611593785424:# get all resources for this package
1611593785540:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611593785685:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611593785719:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611593785770:# load the first datastore resource as a sample
1611593785791:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611593788002:data
1611593788303:Sept2020data <- data %>%
1611593788325:filter(month == "2020-09-01")
1611593788358:Sept2020data
1611593788552:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611593788599:# You may need additional chunks, in case you want to include some of the cleaning output.
1611593788681:# Use this to calculate some summary measures.
1611593788797:# Use this to create some plots.
1611596968128:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611596968151:library(openintro)
1611596968218:## It is recommended that you interlace your answer in
1611596968246:## Part 1b with some r code.
1611596968289:## You may need more R chunks and you may want to include plots.
1611596968390:library(opendatatoronto)
1611596968420:library(dplyr)
1611596968457:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611596968492:# get package
1611596968512:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611596968917:package
1611596969013:# get all resources for this package
1611596969036:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611596969113:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611596969133:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611596969178:# load the first datastore resource as a sample
1611596969200:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611596971577:data
1611596971845:Sept2020data <- data %>%
1611596971867:filter(month == "2020-09-01")
1611596971901:Sept2020data
1611596972112:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611596972155:# You may need additional chunks, in case you want to include some of the cleaning output.
1611596972252:# Use this to calculate some summary measures.
1611596972344:# Use this to create some plots.
1611597199965:# Use this to calculate some summary measures.
1611597200002:mean(Sept2020data)
1611597204455:# Use this to calculate some summary measures.
1611597204491:mean(Sept2020data)
1611597204531:mean
1611597218657:# Use this to calculate some summary measures.
1611597218703:mean(Sept2020data$spd_30)
1611597218743:mean
1611597224654:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611597224681:library(openintro)
1611597224743:## It is recommended that you interlace your answer in
1611597224773:## Part 1b with some r code.
1611597224816:## You may need more R chunks and you may want to include plots.
1611597224882:library(opendatatoronto)
1611597224917:library(dplyr)
1611597224961:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611597225008:# get package
1611597225030:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597225308:package
1611597225373:# get all resources for this package
1611597225396:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597225490:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611597225513:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611597225558:# load the first datastore resource as a sample
1611597225580:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611597227391:data
1611597227668:Sept2020data <- data %>%
1611597227692:filter(month == "2020-09-01")
1611597227720:Sept2020data
1611597227925:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611597227971:# You may need additional chunks, in case you want to include some of the cleaning output.
1611597228052:# Use this to calculate some summary measures.
1611597228095:mean(Sept2020data$spd_30)
1611597228138:mean
1611597228216:# Use this to create some plots.
1611597282315:# Use this to calculate some summary measures.
1611597282352:poo <- median(Sept2020data$spd_30)
1611597282375:poo
1611597288460:# Use this to calculate some summary measures.
1611597288499:poo <- median(Sept2020data$spd_30)
1611597288524:poo
1611597306165:# Use this to calculate some summary measures.
1611597306204:hello <- median(Sept2020data$spd_30)
1611597306228:hello
1611597359330:# Use this to calculate some summary measures.
1611597359371:hello <- median(Sept2020data$spd_30)
1611597359395:hello
1611597359448:quantile(Sept2020data$volume, probs=0.7)
1611597369724:# Use this to calculate some summary measures.
1611597369760:hello <- median(Sept2020data$spd_30)
1611597369784:hello
1611597369843:quantile(Sept2020data$volume, probs=0.5)
1611597373730:# Use this to calculate some summary measures.
1611597373774:hello <- median(Sept2020data$spd_30)
1611597373798:hello
1611597379143:# Use this to calculate some summary measures.
1611597379181:hello <- median(Sept2020data$spd_30)
1611597379231:hello
1611597392711:# Use this to calculate some summary measures.
1611597392750:sum(Sept2020data$spd_30)
1611597400994:# Use this to calculate some summary measures.
1611597401030:summarise(Sept2020data$spd_30)
1611597421165:# Use this to calculate some summary measures.
1611597421208:sd(Sept2020data$spd_30)
1611597423272:# Use this to calculate some summary measures.
1611597423312:sd(Sept2020data$spd_30)
1611597429376:# Use this to calculate some summary measures.
1611597429423:hi <- sd(Sept2020data$spd_30)
1611597429450:hi
1611597464221:# Use this to calculate some summary measures.
1611597464268:mean(data$pct_20)
1611597472583:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611597472606:library(openintro)
1611597472680:## It is recommended that you interlace your answer in
1611597472712:## Part 1b with some r code.
1611597472758:## You may need more R chunks and you may want to include plots.
1611597472844:library(opendatatoronto)
1611597472875:library(dplyr)
1611597472919:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611597472964:# get package
1611597472983:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597473284:package
1611597473358:# get all resources for this package
1611597473385:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597473454:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611597473479:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611597473532:# load the first datastore resource as a sample
1611597473557:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611597475940:data
1611597476224:Sept2020data <- data %>%
1611597476254:filter(month == "2020-09-01")
1611597476288:Sept2020data
1611597476479:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611597476528:# You may need additional chunks, in case you want to include some of the cleaning output.
1611597476616:# Use this to calculate some summary measures.
1611597476677:mean(data$pct_20)
1611597476780:# Use this to create some plots.
1611597714366:knitr::opts_chunk$set(echo = TRUE)
1611597714473:# Quantiles
1611597714538:quantile(coffee$aroma, probs=0.7)
1611597717557:knitr::opts_chunk$set(echo = TRUE)
1611597717631:library(tidyverse)
1611597718482:coffee <- read_csv("coffee_ratings.csv")
1611597718774:glimpse(coffee)
1611597718916:head(coffee)
1611597719039:coffee %>%
1611597719070:ggplot(aes(x=aroma)) +
1611597719094:theme_classic() +
1611597719118:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611597719142:labs(title="Coffee Aroma Score",
1611597719167:x = "Aroma Score",
1611597719190:y = "Density" )
1611597719575:# Kernel density estimation in R
1611597719606:dens <- density(coffee$aroma)
1611597719642:dens
1611597719918:plot(dens)
1611597720054:tibble(x = dens$x,y = dens$y) %>%
1611597720073:ggplot(aes(x = x,y = y)) +
1611597720094:theme_classic() +
1611597720116:geom_line() +
1611597720135:labs(title = "Kernel density estimate, Old Faithful data",
1611597720153:subtitle = "Manually-calculated values",
1611597720173:x = "Eruption time",
1611597720194:y = "Density")
1611597720486:# Can also do automatically:
1611597720514:coffee %>%
1611597720538:ggplot(aes(x = aroma)) +
1611597720567:theme_classic() +
1611597720588:geom_density() +
1611597720613:labs(title = "Kernel density estimate, Old Faithful data",
1611597720636:subtitle = "Automatically-calculated values",
1611597720659:x = "Eruption time",
1611597720684:y = "Density")
1611597721004:coffee_ecdf <- ecdf(coffee$aroma)
1611597721060:plot(coffee_ecdf)
1611597721182:tibble(x = c(1,10)) %>% # Tell ggplot we want to plot the ecdf from 1 to 10
1611597721210:ggplot(aes(x = x)) +
1611597721233:theme_classic() +
1611597721256:stat_function(fun = coffee_ecdf) +
1611597721280:labs(title = "Empirical CDF for Coffee Aroma Scores",
1611597721303:x = "Aroma Scores",
1611597721326:y = "Empirical probability that a score is less than x")
1611597721617:boxplot(coffee$aroma)
1611597721750:# ggplot
1611597721774:coffee %>%
1611597721799:ggplot(aes(y = aroma)) +
1611597721825:theme_classic() +
1611597721847:geom_boxplot(width = .1) +
1611597721867:labs(title = "Boxplot of Coffee Aroma Scores",
1611597721891:y = "Aroma Scores") +
1611597721912:# Have to play around with the x axis to get it to look nice *shrug*
1611597721938:coord_cartesian(xlim = c(-.2,.2)) +
1611597721961:theme(axis.text.x = element_blank())
1611597722210:plot(total_cup_points ~ aroma, data=coffee)
1611597722384:coffee %>%
1611597722407:ggplot(aes(x = aroma, y = total_cup_points)) +
1611597722434:theme_classic() +
1611597722458:geom_point(pch = 21) # pch=21 is the magic command to give you hollow points
1611597722620:# Note, we can use labs() to update the title, x-axis and y-axis labels.
1611597722645:# Same way as a histogram.
1611597724979:# Quantiles
1611597725003:quantile(coffee$aroma, probs=0.7)
1611597725057:IQR(coffee$aroma)
1611597822076:# Use this to calculate some summary measures.
1611597822114:avg = data$pct_20
1611597822139:mean(avg)
1611597829805:# Use this to calculate some summary measures.
1611597829848:avg <- data$pct_20
1611597829878:mean(avg)
1611597840075:# Use this to calculate some summary measures.
1611597840108:avg <- data$pct_20
1611597840134:mean(avg)
1611597840173:avg
1611597854219:library(opendatatoronto)
1611597854244:library(dplyr)
1611597854288:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611597854333:# get package
1611597854357:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597855388:package
1611597855463:# get all resources for this package
1611597855485:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597855557:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611597855586:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611597855634:# load the first datastore resource as a sample
1611597855657:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611597858153:data
1611597858454:Sept2020data <- data %>%
1611597858473:filter(month == "2020-09-01")
1611597858502:Sept2020data
1611597862256:# Use this to calculate some summary measures.
1611597862300:avg <- data$pct_20
1611597862326:mean(avg)
1611597862369:avg
1611597884719:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611597884794:## It is recommended that you interlace your answer in
1611597884826:## Part 1b with some r code.
1611597884868:## You may need more R chunks and you may want to include plots.
1611597884957:library(opendatatoronto)
1611597884987:library(dplyr)
1611597885026:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611597885064:# get package
1611597885090:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597885161:package
1611597885232:# get all resources for this package
1611597885255:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611597885321:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611597885344:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611597885396:# load the first datastore resource as a sample
1611597885418:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611597887346:data
1611597887624:Sept2020data <- data %>%
1611597887648:filter(month == "2020-09-01")
1611597887676:Sept2020data
1611597887872:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611597887921:# You may need additional chunks, in case you want to include some of the cleaning output.
1611597888006:# Use this to calculate some summary measures.
1611597888053:avg <- data$pct_20
1611597888088:mean(avg)
1611597888131:avg
1611597893393:# Use this to create some plots.
1611597909520:# Use this to calculate some summary measures.
1611597909557:hello <- c(1,2,3)
1611597909584:hello
1611597913520:# Use this to calculate some summary measures.
1611597913561:hello <- c(1,2,3)
1611597913587:hello
1611597921224:# Use this to create some plots.
1611597921283:hello <- c(1,2,3)
1611597921307:hello
1611597933883:# Use this to calculate some summary measures.
1611597933930:hello <- c(1,2,3)
1611597933954:hello
1611597941983:# Use this to calculate some summary measures.
1611597942025:hello <- c(1,2,3)
1611597942051:hello
1611598167058:# Use this to calculate some summary measures.
1611598167102:mean(Sept2020data$spd_35)
1611598174369:# Use this to calculate some summary measures.
1611598174412:mean(Sept2020data$spd_50)
1611598183136:# Use this to calculate some summary measures.
1611598183173:mean(data$spd_50)
1611598196108:# Use this to calculate some summary measures.
1611598196148:mean(data$spd_50)
1611598196189:median(data$spd_50)
1611598208332:# Use this to calculate some summary measures.
1611598208378:mean(data$sign_id)
1611598257024:# Use this to calculate some summary measures.
1611598257063:summary(data$sign_id)
1611598272576:# Use this to calculate some summary measures.
1611598272623:summary(data$spd_20)
1611598280703:# Use this to calculate some summary measures.
1611598280748:summary(Sept2020data$spd_20)
1611598302621:# Use this to calculate some summary measures.
1611598302664:mean(Sept2020data$volume)
1611598333725:# Use this to calculate some summary measures.
1611598333765:mean(data$volume, na.rm = TRUE)
1611598335133:# Use this to calculate some summary measures.
1611598335182:mean(data$volume, na.rm = TRUE)
1611598541690:# Use this to calculate some summary measures.
1611598541731:mean(data$as.numeric(volume), na.rm = TRUE)
1611598612454:library(opendatatoronto)
1611598612480:library(dplyr)
1611598612523:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611598612567:# get package
1611598612593:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611598612875:package
1611598612945:# get all resources for this package
1611598612967:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611598613060:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611598613082:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611598613131:# load the first datastore resource as a sample
1611598613154:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611598615119:data
1611598615406:Sept2020data <- data %>%
1611598615428:filter(month == "2020-09-01")
1611598615455:Sept2020data
1611598615672:data[] <- lapply(data, function(x) as.numeric(as.character(x)))
1611598723613:# Use this to calculate some summary measures.
1611598723657:data$spd_20 <- as.numeric(as.character(data$spd_20))
1611598723716:mean(data$as.numeric(volume), na.rm = TRUE)
1611598737556:# Use this to calculate some summary measures.
1611598737598:data$spd_20 <- as.numeric(as.character(data$spd_20))
1611598737658:mean(data$spd_20)
1611598780473:# Use this to calculate some summary measures.
1611598780511:data$spd_20 <- as.numeric(as.character(data$spd_20))
1611598780561:mean(data$spd_20)
1611598780598:mean(data$`_id`)
1611598792256:# Use this to calculate some summary measures.
1611598792294:data$spd_20 <- as.numeric(as.character(data$spd_20))
1611598792347:summary(data$spd_20)
1611598792423:mean(data$`_id`)
1611598805246:# Use this to calculate some summary measures.
1611598805294:data$spd_20 <- as.numeric(as.character(data$spd_20))
1611598805350:summary(data$spd_20)
1611598827900:# Use this to calculate some summary measures.
1611598827950:Sept2020data$spd_20 <- as.numeric(as.character(Sept2020data$spd_20))
1611598827997:summary(Sept2020data$spd_20)
1611598842051:# Use this to calculate some summary measures.
1611598842087:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611598842179:summary(Sept2020data$volume)
1611598861825:# Use this to calculate some summary measures.
1611598861864:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611598861948:summary(Sept2020data$volume)
1611598862059:min(Sept2020data$volume)
1611599325936:library(opendatatoronto)
1611599325964:library(dplyr)
1611599326008:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611599326053:# get package
1611599326078:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611599326443:package
1611599326522:# get all resources for this package
1611599326546:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611599326615:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611599326635:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611599326682:# load the first datastore resource as a sample
1611599326703:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611599328610:data
1611599328904:Sept2020data <- data %>%
1611599328925:filter(month == "2020-09-01")
1611599328952:Sept2020data
1611600515319:# Use this to calculate some summary measures.
1611600515365:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600515388:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600515454:summary(Sept2020data$volume)
1611600515539:sd(Sept2020data$volume)
1611600540329:# Use this to calculate some summary measures.
1611600540374:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600540397:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600540470:summary(Sept2020data$volume)
1611600540558:sd(Sept2020data$volume)
1611600540600:var(Sept2020data$volume)
1611600576707:# Use this to calculate some summary measures.
1611600576750:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600576774:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600576841:summary(Sept2020data$volume)
1611600576943:sd(Sept2020data$volume)
1611600576980:var(Sept2020data$volume)
1611600577020:quantile(Sept2020data$volume, prob = 0.5)
1611600582516:# Use this to calculate some summary measures.
1611600582554:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600582577:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600582638:summary(Sept2020data$volume)
1611600582717:sd(Sept2020data$volume)
1611600582757:var(Sept2020data$volume)
1611600582795:quantile(Sept2020data$volume, prob = 0.1)
1611600586755:# Use this to calculate some summary measures.
1611600586800:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600586824:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600586887:summary(Sept2020data$volume)
1611600586966:sd(Sept2020data$volume)
1611600587007:var(Sept2020data$volume)
1611600587042:quantile(Sept2020data$volume, prob = 0.5)
1611600592093:# Use this to calculate some summary measures.
1611600592134:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600592160:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600592228:summary(Sept2020data$volume)
1611600592325:sd(Sept2020data$volume)
1611600592366:var(Sept2020data$volume)
1611600592402:quantile(Sept2020data$volume, prob = 0.99)
1611600598954:# Use this to calculate some summary measures.
1611600598997:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600599020:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600599100:summary(Sept2020data$volume)
1611600599188:sd(Sept2020data$volume)
1611600599230:var(Sept2020data$volume)
1611600599269:quantile(Sept2020data$volume, prob = 1)
1611600603732:# Use this to calculate some summary measures.
1611600603775:#Numerical Summary for the total number of vehicles observed during Sept. 2020
1611600603797:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611600603861:summary(Sept2020data$volume)
1611600603954:sd(Sept2020data$volume)
1611600603991:var(Sept2020data$volume)
1611600604026:quantile(Sept2020data$volume, prob = 0.5)
1611600788483:# Use this to create some plots.
1611600788520:Sept2020data %>%
1611600788545:ggplot(aes(x=spd_35)) +
1611600788571:theme_classic() +
1611600788594:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611600788619:labs(title="Coffee Aroma Score",
1611600788642:x = "Aroma Score",
1611600788666:y = "Density" )
1611600803998:# Use this to create some plots.
1611600804037:Sept2020data %>%
1611600804059:ggplot(aes(x=as.numeric(spd_35)) +
1611600804081:theme_classic() +
1611600804103:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611600804130:labs(title="Coffee Aroma Score",
1611600804153:x = "Aroma Score",
1611600804178:y = "Density" )
1611600826551:# Use this to create some plots.
1611600826589:speed <- as.numeric(spd_35)
1611600843155:# Use this to create some plots.
1611600843193:speed <- as.numeric(Sept2020data$spd_35)
1611600843237:Sept2020data %>%
1611600843261:ggplot(aes(x=speed) +
1611600843286:theme_classic() +
1611600843309:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611600843332:labs(title="Coffee Aroma Score",
1611600843357:x = "Aroma Score",
1611600843378:y = "Density" )
1611600974821:coffee %>%
1611600974852:ggplot(aes(x=aroma)) +
1611600974876:theme_classic() +
1611600974901:geom_histogram(aes(y=density), bins=30, color="black", fill="light blue", alpha=0.3)+
1611600974926:labs(title="Coffee Aroma Score",
1611600974948:x = "Aroma Score",
1611600974967:y = "Density" )
1611601003496:coffee %>%
1611601003519:ggplot(aes(x=aroma)) +
1611601003542:theme_classic() +
1611601003565:geom_histogram(aes(y=density), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601003587:labs(title="Coffee Aroma Score",
1611601003610:x = "Aroma Score",
1611601003633:y = "Density" )
1611601009589:knitr::opts_chunk$set(echo = TRUE)
1611601009646:library(tidyverse)
1611601009700:coffee <- read_csv("coffee_ratings.csv")
1611601009851:glimpse(coffee)
1611601009966:head(coffee)
1611601014247:coffee %>%
1611601014269:ggplot(aes(x=aroma)) +
1611601014292:theme_classic() +
1611601014314:geom_histogram(aes(y=density), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601014338:labs(title="Coffee Aroma Score",
1611601014366:x = "Aroma Score",
1611601014400:y = "Density" )
1611601019973:coffee %>%
1611601019995:ggplot(aes(x=aroma)) +
1611601020014:theme_classic() +
1611601020031:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601020048:labs(title="Coffee Aroma Score",
1611601020067:x = "Aroma Score",
1611601020089:y = "Density" )
1611601034382:# Use this to create some plots.
1611601034424:speed <- as.numeric(Sept2020data$spd_35)
1611601034469:Sept2020data %>%
1611601034493:ggplot(aes(x=speed) +
1611601034516:theme_classic() +
1611601034546:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601034570:labs(title="Coffee Aroma Score",
1611601034591:x = "Aroma Score",
1611601034611:y = "Density" )
1611601061878:# Use this to create some plots.
1611601061921:speed <- as.numeric(Sept2020data$spd_35)
1611601061962:Sept2020data %>%
1611601061982:ggplot(aes(x=speed)) +
1611601062003:theme_classic() +
1611601062025:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601062047:labs(title="Coffee Aroma Score",
1611601062070:x = "Aroma Score",
1611601062098:y = "Density" )
1611601082668:# Use this to create some plots.
1611601082712:speed <- as.numeric(Sept2020data$spd_50)
1611601082755:Sept2020data %>%
1611601082778:ggplot(aes(x=speed)) +
1611601082800:theme_classic() +
1611601082827:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601082850:labs(title="Coffee Aroma Score",
1611601082876:x = "Aroma Score",
1611601082900:y = "Density" )
1611601089620:# Use this to create some plots.
1611601089663:speed <- as.numeric(Sept2020data$spd_95)
1611601089715:Sept2020data %>%
1611601089737:ggplot(aes(x=speed)) +
1611601089768:theme_classic() +
1611601089791:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601089816:labs(title="Coffee Aroma Score",
1611601089840:x = "Aroma Score",
1611601089863:y = "Density" )
1611601101561:# Use this to create some plots.
1611601101606:speed <- as.numeric(Sept2020data$spd_05)
1611601101648:Sept2020data %>%
1611601101673:ggplot(aes(x=speed)) +
1611601101696:theme_classic() +
1611601101721:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601101749:labs(title="Coffee Aroma Score",
1611601101774:x = "Aroma Score",
1611601101802:y = "Density" )
1611601162499:# Use this to create some plots.
1611601162544:speed <- as.numeric(Sept2020data$spd_40)
1611601162593:Sept2020data %>%
1611601162615:ggplot(aes(x=speed)) +
1611601162640:theme_classic() +
1611601162664:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601162690:labs(title="Coffee Aroma Score",
1611601162710:x = "Aroma Score",
1611601162731:y = "Density" )
1611601169360:# Use this to create some plots.
1611601169398:speed <- as.numeric(Sept2020data$spd_50)
1611601169459:Sept2020data %>%
1611601169483:ggplot(aes(x=speed)) +
1611601169506:theme_classic() +
1611601169528:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601169548:labs(title="Coffee Aroma Score",
1611601169567:x = "Aroma Score",
1611601169589:y = "Density" )
1611601172425:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611601172488:## It is recommended that you interlace your answer in
1611601172515:## Part 1b with some r code.
1611601172554:## You may need more R chunks and you may want to include plots.
1611601172646:library(opendatatoronto)
1611601172677:library(dplyr)
1611601172717:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611601172756:# get package
1611601172780:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601173151:package
1611601173221:# get all resources for this package
1611601173245:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601173358:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611601173381:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611601173433:# load the first datastore resource as a sample
1611601173454:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611601175790:data
1611601176076:Sept2020data <- data %>%
1611601176101:filter(month == "2020-09-01")
1611601176129:Sept2020data
1611601176353:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611601176401:# You may need additional chunks, in case you want to include some of the cleaning output.
1611601176524:# Use this to calculate some summary measures.
1611601176573:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611601176598:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611601176664:summary(Sept2020data$volume)
1611601176747:sd(Sept2020data$volume)
1611601176783:var(Sept2020data$volume)
1611601176822:quantile(Sept2020data$volume, prob = 0.5)
1611601179116:# Use this to create some plots.
1611601179154:speed <- as.numeric(Sept2020data$spd_50)
1611601179197:Sept2020data %>%
1611601179219:ggplot(aes(x=speed)) +
1611601179240:theme_classic() +
1611601179263:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601179288:labs(title="Coffee Aroma Score",
1611601179310:x = "Aroma Score",
1611601179334:y = "Density" )
1611601184155:# Use this to create some plots.
1611601184197:speed <- as.numeric(Sept2020data$spd_35)
1611601184240:Sept2020data %>%
1611601184265:ggplot(aes(x=speed)) +
1611601184288:theme_classic() +
1611601184312:geom_histogram(aes(y=..density..), bins=30, color="black", fill="light blue", alpha=0.3)+
1611601184333:labs(title="Coffee Aroma Score",
1611601184355:x = "Aroma Score",
1611601184378:y = "Density" )
1611601199551:# Use this to create some plots.
1611601199592:speed <- as.numeric(Sept2020data$spd_35)
1611601199633:Sept2020data %>%
1611601199655:ggplot(aes(x=speed)) +
1611601199686:theme_classic() +
1611601199707:geom_histogram(aes(y=..density..), bins=10, color="black", fill="light blue", alpha=0.3)+
1611601199740:labs(title="Coffee Aroma Score",
1611601199769:x = "Aroma Score",
1611601199790:y = "Density" )
1611601206972:# Use this to create some plots.
1611601207016:speed <- as.numeric(Sept2020data$spd_35)
1611601207064:Sept2020data %>%
1611601207088:ggplot(aes(x=speed)) +
1611601207110:theme_classic() +
1611601207134:geom_histogram(aes(y=..density..), bins=10, color="black", fill="light blue", alpha=0.1)+
1611601207158:labs(title="Coffee Aroma Score",
1611601207181:x = "Aroma Score",
1611601207207:y = "Density" )
1611601215345:# Use this to create some plots.
1611601215389:speed <- as.numeric(Sept2020data$spd_35)
1611601215431:Sept2020data %>%
1611601215451:ggplot(aes(x=speed)) +
1611601215472:theme_classic() +
1611601215494:geom_histogram(aes(y=..density..), bins=10, color="black", fill="light blue", alpha=0.6)+
1611601215518:labs(title="Coffee Aroma Score",
1611601215542:x = "Aroma Score",
1611601215566:y = "Density" )
1611601224094:# Use this to create some plots.
1611601224133:speed <- as.numeric(Sept2020data$spd_35)
1611601224177:Sept2020data %>%
1611601224199:ggplot(aes(x=speed)) +
1611601224221:theme_classic() +
1611601224243:geom_histogram(aes(y=..density..), bins=100, color="black", fill="light blue", alpha=0.6)+
1611601224264:labs(title="Coffee Aroma Score",
1611601224287:x = "Aroma Score",
1611601224309:y = "Density" )
1611601232683:# Use this to create some plots.
1611601232730:speed <- as.numeric(Sept2020data$spd_35)
1611601232776:Sept2020data %>%
1611601232800:ggplot(aes(x=speed)) +
1611601232826:theme_classic() +
1611601232852:geom_histogram(aes(y=..density..), bins=1000, color="black", fill="light blue", alpha=0.6)+
1611601232876:labs(title="Coffee Aroma Score",
1611601232897:x = "Aroma Score",
1611601232921:y = "Density" )
1611601237216:# Use this to create some plots.
1611601237264:speed <- as.numeric(Sept2020data$spd_35)
1611601237311:Sept2020data %>%
1611601237336:ggplot(aes(x=speed)) +
1611601237360:theme_classic() +
1611601237381:geom_histogram(aes(y=..density..), bins=100, color="black", fill="light blue", alpha=0.6)+
1611601237406:labs(title="Coffee Aroma Score",
1611601237432:x = "Aroma Score",
1611601237454:y = "Density" )
1611601370113:# Use this to create some plots.
1611601370158:speed <- as.numeric(Sept2020data$spd_35)
1611601370203:Sept2020data %>% ggplot(aes(x = speed)) +
1611601370227:geom_histogram(binwidth = 0.1, colour = "black", fill = "grey") +
1611601370251:xlab("Proportion of heads in 10 coin flips")
1611601406904:# Use this to create some plots.
1611601406945:speed <- as.numeric(Sept2020data$spd_35)
1611601406987:Sept2020data %>% ggplot(aes(x = speed)) +
1611601407011:geom_histogram(binwidth = 0.1, colour = "black", fill = "grey") +
1611601407037:xlab("Proportion of heads in 10 coin flips")
1611601445410:# Use this to create some plots.
1611601445445:speed <- as.numeric(Sept2020data$spd_35)
1611601445484:Sept2020data %>% ggplot(aes(x = speed)) +
1611601445507:geom_histogram(binwidth = 0.5, colour = "black", fill = "grey") +
1611601445532:xlab("Proportion of heads in 10 coin flips")
1611601459193:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611601459268:## It is recommended that you interlace your answer in
1611601459302:## Part 1b with some r code.
1611601459342:## You may need more R chunks and you may want to include plots.
1611601459438:library(opendatatoronto)
1611601459470:library(dplyr)
1611601459512:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611601459552:# get package
1611601459576:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601459832:package
1611601459897:# get all resources for this package
1611601459917:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601459985:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611601460012:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611601460061:# load the first datastore resource as a sample
1611601460085:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611601461999:data
1611601462273:Sept2020data <- data %>%
1611601462296:filter(month == "2020-09-01")
1611601462327:Sept2020data
1611601462566:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611601462612:# You may need additional chunks, in case you want to include some of the cleaning output.
1611601462734:# Use this to calculate some summary measures.
1611601462782:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611601462803:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611601462869:summary(Sept2020data$volume)
1611601462958:sd(Sept2020data$volume)
1611601462995:var(Sept2020data$volume)
1611601463033:quantile(Sept2020data$volume, prob = 0.5)
1611601463188:# Use this to create some plots.
1611601463235:speed <- as.numeric(Sept2020data$spd_35)
1611601463278:Sept2020data %>% ggplot(aes(x = speed)) +
1611601463304:geom_histogram(binwidth = 0.5, colour = "black", fill = "grey") +
1611601463332:xlab("Proportion of heads in 10 coin flips")
1611601528862:# Use this to create some plots.
1611601528899:speed <- as.numeric(Sept2020data$spd_35)
1611601528937:Sept2020data %>% ggplot(aes(x = speed)) +
1611601528959:geom_histogram(binwidth = 0.5, colour = "black", fill = "grey") +
1611601528979:xlab("hi")
1611601555240:# Use this to create some plots.
1611601555281:speed <- as.numeric(Sept2020data$spd_35)
1611601555321:ggplot(data = Sept2020data,
1611601555344:aes(x = speed)) +
1611601555365:geom_histogram(bins=30,colour="black",
1611601555385:fill = "grey")
1611601596953:# Use this to create some plots.
1611601597000:speed <- as.numeric(Sept2020data$spd_35)
1611601597043:ggplot(data = Sept2020data,
1611601597068:aes(x = speed)) +
1611601597095:geom_histogram(bins=30,colour="black",
1611601597118:fill = "grey")
1611601601708:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611601601789:## It is recommended that you interlace your answer in
1611601601820:## Part 1b with some r code.
1611601601863:## You may need more R chunks and you may want to include plots.
1611601601957:library(opendatatoronto)
1611601601988:library(dplyr)
1611601602033:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611601602080:# get package
1611601602109:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601602438:package
1611601602516:# get all resources for this package
1611601602539:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601602621:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611601602645:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611601602695:# load the first datastore resource as a sample
1611601602722:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611601604718:data
1611601605021:Sept2020data <- data %>%
1611601605043:filter(month == "2020-09-01")
1611601605071:Sept2020data
1611601605281:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611601605328:# You may need additional chunks, in case you want to include some of the cleaning output.
1611601605445:# Use this to calculate some summary measures.
1611601605490:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611601605511:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611601605576:summary(Sept2020data$volume)
1611601605669:sd(Sept2020data$volume)
1611601605706:var(Sept2020data$volume)
1611601605744:quantile(Sept2020data$volume, prob = 0.5)
1611601605901:# Use this to create some plots.
1611601605948:speed <- as.numeric(Sept2020data$spd_35)
1611601605993:ggplot(data = Sept2020data,
1611601606016:aes(x = speed)) +
1611601606036:geom_histogram(bins=30,colour="black",
1611601606064:fill = "grey")
1611601670387:# Use this to create some plots.
1611601670426:speed <- as.numeric(Sept2020data$spd_35)
1611601670469:ggplot(data = Sept2020data,
1611601670490:aes(x = speed)) +
1611601670511:geom_histogram(bins=40,colour="black",
1611601670532:fill = "grey")
1611601855261:# Use this to create some plots.
1611601855304:speed <- as.numeric(Sept2020data$spd_35)
1611601855344:ggplot(data = Sept2020data,
1611601855365:aes(x = speed)) +
1611601855385:geom_histogram(bins=40,colour="blue",
1611601855403:fill = "light blue")
1611601881611:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611601881683:## It is recommended that you interlace your answer in
1611601881712:## Part 1b with some r code.
1611601881756:## You may need more R chunks and you may want to include plots.
1611601881847:library(opendatatoronto)
1611601881877:library(dplyr)
1611601881917:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611601881958:# get package
1611601881981:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601882205:package
1611601882277:# get all resources for this package
1611601882309:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611601882400:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611601882420:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611601882470:# load the first datastore resource as a sample
1611601882495:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611601884325:data
1611601884633:Sept2020data <- data %>%
1611601884657:filter(month == "2020-09-01")
1611601884684:Sept2020data
1611601884893:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1611601884935:# You may need additional chunks, in case you want to include some of the cleaning output.
1611601885053:# Use this to calculate some summary measures.
1611601885097:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611601885115:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611601885178:summary(Sept2020data$volume)
1611601885256:sd(Sept2020data$volume)
1611601885288:var(Sept2020data$volume)
1611601885321:quantile(Sept2020data$volume, prob = 0.5)
1611601885455:# Use this to create some plots.
1611601885497:speed <- as.numeric(Sept2020data$spd_35)
1611601885534:ggplot(data = Sept2020data,
1611601885558:aes(x = speed)) +
1611601885579:geom_histogram(bins=40,colour="blue",
1611601885601:fill = "light blue")
1611602159405:# Use this to create some plots.
1611602159444:speed <- as.numeric(Sept2020data$spd_35)
1611602159485:ggplot(data = Sept2020data,
1611602159529:aes(x = speed)) +
1611602159552:geom_histogram(bins=40,colour="blue",
1611602159573:fill = "light blue", xbar = "wow")
1611602272091:# Use this to create some plots.
1611602272130:speed <- as.numeric(Sept2020data$spd_35)
1611602272167:ggplot(data = Sept2020data,
1611602272186:aes(x = speed)) +
1611602272207:geom_histogram(bins=40,colour="blue",
1611602272227:fill = "light blue")+
1611602272248:xlab("wow")
1611602914411:# Use this to create some plots.
1611602914450:speed <- as.numeric(Sept2020data$volume)
1611602914486:ggplot(data = Sept2020data,
1611602914508:aes(x = speed)) +
1611602914530:geom_histogram(bins=40,colour="blue",
1611602914551:fill = "light blue")+
1611602914572:xlab("Number of Cars")
1611602928159:# Use this to create some plots.
1611602928198:speed <- (Sept2020data$volume)
1611602928239:ggplot(data = Sept2020data,
1611602928258:aes(x = speed)) +
1611602928276:geom_histogram(bins=40,colour="blue",
1611602928295:fill = "light blue")+
1611602928314:xlab("Number of Cars")
1611603494211:# Use this to create some plots.
1611603494255:speed <- (Sept2020data$volume)
1611603494297:ggplot(data = Sept2020data,
1611603494318:aes(x = speed)) +
1611603494341:geom_histogram(bins=40,colour="blue",
1611603494365:fill = "light blue")+
1611603494385:xlab("Number of Cars")
1611603494529:boxplot(Sept2020data$volume)
1611603750029:# Use this to create some plots.
1611603750064:speed <- (Sept2020data$volume)
1611603750097:ggplot(data = Sept2020data,
1611603750116:aes(x = speed)) +
1611603750135:geom_histogram(bins=40,colour="blue",
1611603750155:fill = "light blue")+
1611603750175:xlab("Number of Cars")
1611603750315:boxplot(Sept2020data$volume)
1611603771195:# Use this to create some plots.
1611603771232:speed <- (Sept2020data$volume)
1611603771267:ggplot(data = Sept2020data,
1611603771286:aes(x = speed)) +
1611603771310:geom_histogram(bins=10,colour="blue",
1611603771331:fill = "light blue")+
1611603771352:xlab("Number of Cars")
1611603771540:boxplot(Sept2020data$volume)
1611603780681:# Use this to create some plots.
1611603780718:speed <- (Sept2020data$volume)
1611603780758:ggplot(data = Sept2020data,
1611603780781:aes(x = speed)) +
1611603780802:geom_histogram(bins=2,colour="blue",
1611603780824:fill = "light blue")+
1611603780845:xlab("Number of Cars")
1611603780963:boxplot(Sept2020data$volume)
1611603793096:# Use this to create some plots.
1611603793134:speed <- (Sept2020data$volume)
1611603793172:ggplot(data = Sept2020data,
1611603793194:aes(x = speed)) +
1611603793217:geom_histogram(bins=6,colour="blue",
1611603793242:fill = "light blue")+
1611603793264:xlab("Number of Cars")
1611603793395:boxplot(Sept2020data$volume)
1611603802857:# Use this to create some plots.
1611603802901:speed <- (Sept2020data$volume)
1611603802941:ggplot(data = Sept2020data,
1611603802963:aes(x = speed)) +
1611603802987:geom_histogram(bins=50,colour="blue",
1611603803008:fill = "light blue")+
1611603803029:xlab("Number of Cars")
1611603803189:boxplot(Sept2020data$volume)
1611603812482:# Use this to create some plots.
1611603812522:speed <- (Sept2020data$volume)
1611603812563:ggplot(data = Sept2020data,
1611603812586:aes(x = speed)) +
1611603812609:geom_histogram(bins=25,colour="blue",
1611603812635:fill = "light blue")+
1611603812657:xlab("Number of Cars")
1611603812863:boxplot(Sept2020data$volume)
1611603820323:# Use this to create some plots.
1611603820358:speed <- (Sept2020data$volume)
1611603820397:ggplot(data = Sept2020data,
1611603820418:aes(x = speed)) +
1611603820440:geom_histogram(bins=30,colour="blue",
1611603820462:fill = "light blue")+
1611603820484:xlab("Number of Cars")
1611603820621:boxplot(Sept2020data$volume)
1611604412739:# Use this to create some plots.
1611604412775:speed <- (Sept2020data$volume)
1611604412809:ggplot(data = Sept2020data,
1611604412827:aes(x = speed)) +
1611604412850:geom_histogram(bins=30,colour="blue",
1611604412875:fill = "light blue")+
1611604412897:xlab("Quantity of Cars recorded by the radar")
1611604413038:boxplot(Sept2020data$volume)
1611604423231:# Use this to create some plots.
1611604423276:speed <- (Sept2020data$volume)
1611604423320:ggplot(data = Sept2020data,
1611604423344:aes(x = speed)) +
1611604423365:geom_histogram(bins=30,colour="blue",
1611604423389:fill = "light blue")+
1611604423414:xlab("Quantity of Cars Recorded by the Radar")
1611604423607:boxplot(Sept2020data$volume)
1611604440904:# Use this to create some plots.
1611604440938:speed <- (Sept2020data$volume)
1611604440982:ggplot(data = Sept2020data,
1611604441006:aes(x = speed)) +
1611604441024:geom_histogram(bins=30,colour="blue",
1611604441044:fill = "light blue")+
1611604441063:xlab("Quantity of cars recorded by the radar")
1611604441216:boxplot(Sept2020data$volume)
1611604501268:# Use this to create some plots.
1611604501308:vol <- (Sept2020data$volume)
1611604501351:ggplot(data = Sept2020data,
1611604501376:aes(x = vol)) +
1611604501401:geom_histogram(bins=30,colour="blue",
1611604501424:fill = "light blue")+
1611604501447:xlab("Quantity of cars recorded by the radar")+
1611604501473:ylab("Count of ")
1611604501636:boxplot(Sept2020data$volume)
1611604543765:# Use this to create some plots.
1611604543809:vol <- (Sept2020data$volume)
1611604543852:ggplot(data = Sept2020data,
1611604543873:aes(x = vol)) +
1611604543897:geom_histogram(bins=30,colour="blue",
1611604543921:fill = "light blue")+
1611604543945:xlab("Quantity of cars recorded by the radar")+
1611604543968:ylab("Count of occurances in Toronto")
1611604544158:boxplot(Sept2020data$volume)
1611604606356:# Use this to create some plots.
1611604606407:vol <- (Sept2020data$volume)
1611604606448:ggplot(data = Sept2020data,
1611604606473:aes(x = vol)) +
1611604606497:geom_histogram(bins=30,colour="blue",
1611604606521:fill = "light blue")+
1611604606544:xlab("Quantity of cars recorded by the radar")+
1611604606578:ylab("Count of occurences in Toronto")
1611604606726:boxplot(Sept2020data$volume)
1611605050655:# Use this to create some plots.
1611605050700:vol <- (Sept2020data$volume)
1611605050741:ggplot(data = Sept2020data,
1611605050763:aes(x = vol)) +
1611605050786:geom_histogram(bins=30,colour="blue",
1611605050811:fill = "light blue")+
1611605050844:xlab("Quantity of cars recorded by a radar")+
1611605050870:ylab("Count of occurences in Toronto")
1611605051066:boxplot(Sept2020data$volume)
1611605059006:# Use this to create some plots.
1611605059048:vol <- (Sept2020data$volume)
1611605059093:ggplot(data = Sept2020data,
1611605059114:aes(x = vol)) +
1611605059137:geom_histogram(bins=30,colour="blue",
1611605059164:fill = "light blue")+
1611605059192:xlab("Quantity of cars recorded by a radar")+
1611605059218:ylab("Count of occurences in Toronto")
1611605134288:# Use this to create some plots.
1611605134325:vol <- (Sept2020data$volume)
1611605134362:ggplot(data = Sept2020data,
1611605134385:aes(x = vol)) +
1611605134407:geom_histogram(bins=2,colour="blue",
1611605134427:fill = "light blue")+
1611605134450:xlab("Quantity of cars recorded by a radar")+
1611605134473:ylab("Count of occurences in Toronto")
1611605293298:# Use this to create some plots.
1611605293335:vol <- (Sept2020data$volume)
1611605293377:ggplot(data = Sept2020data,
1611605293399:aes(x = vol)) +
1611605293430:geom_histogram(bins=30,colour="blue",
1611605293456:fill = "light blue")+
1611605293478:xlab("Quantity of cars recorded by a radar")+
1611605293499:ylab("Count of occurences in Toronto")
1611605532018:# Use this to create some plots.
1611605532060:vol <- (Sept2020data$volume)
1611605532104:ggplot(data = Sept2020data,
1611605532127:aes(x = vol)) +
1611605532148:geom_histogram(bins=30,colour="blue",
1611605532173:fill = "light blue")+
1611605532194:xlab("Quantity of cars recorded by a radar")+
1611605532216:ylab("Number of signs which recorded a driver's speed")+
1611605532239:ggtitle("hello")
1611605794209:# Use this to create some plots.
1611605794247:vol <- (Sept2020data$volume)
1611605794289:ggplot(data = Sept2020data,
1611605794310:aes(x = vol)) +
1611605794331:geom_histogram(bins=30,colour="blue",
1611605794353:fill = "light blue")+
1611605794375:xlab("Quantity of cars recorded by a radar")+
1611605794400:ylab("Number of signs which recorded a driver's speed")+
1611605794422:ggtitle("Histogram of Volume of cars recorded by a radar sign in Toronto")
1611605800818:# Use this to create some plots.
1611605800856:vol <- (Sept2020data$volume)
1611605800896:ggplot(data = Sept2020data,
1611605800923:aes(x = vol)) +
1611605800945:geom_histogram(bins=30,colour="blue",
1611605800973:fill = "light blue")+
1611605800991:xlab("Quantity of cars recorded by a radar")+
1611605801010:ylab("Number of signs which recorded a driver's speed")+
1611605801029:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto")
1611605947925:# Use this to create some plots.
1611605947965:vol <- (Sept2020data$volume)
1611605948003:ggplot(data = Sept2020data,
1611605948021:aes(x = vol)) +
1611605948040:geom_histogram(bins=30,colour="blue",
1611605948062:fill = "light blue")+
1611605948085:xlab("Number of cars recorded by a radar")+
1611605948104:ylab("Number of signs which recorded a driver's speed")+
1611605948126:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611605970888:# Use this to create some plots.
1611605970932:vol <- (Sept2020data$volume)
1611605970973:ggplot(data = Sept2020data,
1611605970994:aes(x = vol)) +
1611605971016:geom_histogram(bins=30,colour="blue",
1611605971039:fill = "light blue")+
1611605971062:xlab("Number of cars recorded by a radar sign")+
1611605971083:ylab("Number of radar signs which recorded a driver's speed")+
1611605971102:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606437322:# Use this to create some plots.
1611606437367:vol <- (Sept2020data$volume)
1611606437413:ggplot(data = Sept2020data,
1611606437438:aes(x = vol)) +
1611606437464:geom_histogram(bins=30,colour="blue",
1611606437489:fill = "light blue")+
1611606437514:xlab("Number of cars recorded by a radar sign")+
1611606437544:ylab("Number of radar signs which recorded a driver's speed")+
1611606437569:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606437770:Sept2020data %>%
1611606437801:ggplot(aes(y = vol)) +
1611606437835:theme_classic() +
1611606437873:geom_boxplot(width = .1) +
1611606437912:labs(title = "Boxplot of Coffee Aroma Scores",
1611606437940:y = "Aroma Scores") +
1611606437973:# Have to play around with the x axis to get it to look nice *shrug*
1611606438001:coord_cartesian(xlim = c(-.2,.2)) +
1611606438035:theme(axis.text.x = element_blank())
1611606776344:# Use this to create some plots.
1611606776382:vol <- (Sept2020data$volume)
1611606776422:ggplot(data = Sept2020data,
1611606776446:aes(x = vol)) +
1611606776472:geom_histogram(bins=30,colour="blue",
1611606776495:fill = "light blue")+
1611606776515:xlab("Number of cars recorded by a radar sign")+
1611606776534:ylab("Number of radar signs which recorded a driver's speed")+
1611606776553:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606776739:Sept2020data %>%
1611606776764:ggplot(aes(y = vol)) +
1611606776786:theme_classic() +
1611606776810:geom_boxplot(width = .1) +
1611606776830:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611606776854:y = "Volume of Cars") +
1611606776874:# Have to play around with the x axis to get it to look nice *shrug*
1611606776897:coord_cartesian(xlim = c(-.2,.2)) +
1611606776919:theme(axis.text.x = element_blank())
1611606953183:# Use this to create some plots.
1611606953224:vol <- (Sept2020data$volume)
1611606953262:ggplot(data = Sept2020data,
1611606953285:aes(x = vol)) +
1611606953310:geom_histogram(bins=30,colour="blue",
1611606953333:fill = "light blue")+
1611606953354:xlab("Number of cars recorded by a radar sign")+
1611606953375:ylab("Number of radar signs which recorded a driver's speed")+
1611606953396:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606953574:Sept2020data %>%
1611606953601:ggplot(aes(y = vol)) +
1611606953625:theme_classic() +
1611606953648:geom_boxplot(width = .1) +
1611606953670:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611606953689:y = "Volume of Cars") +
1611606953731:coord_cartesian(xlim = c(-.2,.5)) +
1611606953754:theme(axis.text.x = element_blank())
1611606961635:# Use this to create some plots.
1611606961680:vol <- (Sept2020data$volume)
1611606961725:ggplot(data = Sept2020data,
1611606961748:aes(x = vol)) +
1611606961770:geom_histogram(bins=30,colour="blue",
1611606961791:fill = "light blue")+
1611606961813:xlab("Number of cars recorded by a radar sign")+
1611606961838:ylab("Number of radar signs which recorded a driver's speed")+
1611606961862:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606962044:Sept2020data %>%
1611606962066:ggplot(aes(y = vol)) +
1611606962089:theme_classic() +
1611606962110:geom_boxplot(width = .1) +
1611606962130:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611606962151:y = "Volume of Cars") +
1611606962187:coord_cartesian(xlim = c(-.2,.2)) +
1611606962208:theme(axis.text.x = element_blank())
1611606973911:# Use this to create some plots.
1611606973949:vol <- (Sept2020data$volume)
1611606973989:ggplot(data = Sept2020data,
1611606974009:aes(x = vol)) +
1611606974030:geom_histogram(bins=30,colour="blue",
1611606974050:fill = "light blue")+
1611606974071:xlab("Number of cars recorded by a radar sign")+
1611606974093:ylab("Number of radar signs which recorded a driver's speed")+
1611606974115:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606974297:Sept2020data %>%
1611606974319:ggplot(aes(y = vol)) +
1611606974339:theme_classic() +
1611606974361:geom_boxplot(width = .1) +
1611606974381:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611606974401:y = "Volume of Cars") +
1611606974437:coord_cartesian(xlim = c(-.1,.1)) +
1611606974461:theme(axis.text.x = element_blank())
1611606984629:# Use this to create some plots.
1611606984669:vol <- (Sept2020data$volume)
1611606984704:ggplot(data = Sept2020data,
1611606984731:aes(x = vol)) +
1611606984755:geom_histogram(bins=30,colour="blue",
1611606984780:fill = "light blue")+
1611606984804:xlab("Number of cars recorded by a radar sign")+
1611606984828:ylab("Number of radar signs which recorded a driver's speed")+
1611606984855:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611606985084:Sept2020data %>%
1611606985104:ggplot(aes(y = vol)) +
1611606985125:theme_classic() +
1611606985145:geom_boxplot(width = .1) +
1611606985162:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611606985183:y = "Volume of Cars") +
1611606985218:coord_cartesian(xlim = c(-.15,.15)) +
1611606985238:theme(axis.text.x = element_blank())
1611608634212:View(data)
1611608721613:# Use this to calculate some summary measures.
1611608721653:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611608721675:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611608721746:summary(Sept2020data$volume)
1611608721829:sd(Sept2020data$volume)
1611610827047:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611610827131:## It is recommended that you interlace your answer in
1611610827162:## Part 1b with some r code.
1611610827200:## You may need more R chunks and you may want to include plots.
1611610827282:library(opendatatoronto)
1611610827307:library(dplyr)
1611610827343:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611610827379:# get package
1611610827404:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610827489:package
1611610827550:# get all resources for this package
1611610827570:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610827649:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611610827668:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611610827712:# load the first datastore resource as a sample
1611610827732:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611610829431:data
1611610829673:Sept2020data <- data %>%
1611610829693:filter(month == "2020-09-01")
1611610829717:Sept2020data
1611610829915:# Use this to calculate some summary measures.
1611610829957:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611610829977:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611610830038:summary(Sept2020data$volume)
1611610830119:sd(Sept2020data$volume)
1611610830227:# Use this to create some plots.
1611610830267:vol <- (Sept2020data$volume)
1611610830306:ggplot(data = Sept2020data,
1611610830326:aes(x = vol)) +
1611610830346:geom_histogram(bins=30,colour="blue",
1611610830367:fill = "light blue")+
1611610830388:xlab("Number of cars recorded by a radar sign")+
1611610830409:ylab("Number of radar signs which recorded a driver's speed")+
1611610830429:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611610830629:Sept2020data %>%
1611610830650:ggplot(aes(y = vol)) +
1611610830674:theme_classic() +
1611610830697:geom_boxplot(width = .1) +
1611610830718:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611610830740:y = "Volume of Cars") +
1611610830783:coord_cartesian(xlim = c(-.15,.15)) +
1611610830804:theme(axis.text.x = element_blank())
1611610837168:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611610837228:## It is recommended that you interlace your answer in
1611610837254:## Part 1b with some r code.
1611610837290:## You may need more R chunks and you may want to include plots.
1611610837371:library(opendatatoronto)
1611610837404:library(dplyr)
1611610837438:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611610837475:# get package
1611610837497:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610837570:package
1611610837632:# get all resources for this package
1611610837652:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610837719:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611610837740:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611610837785:# load the first datastore resource as a sample
1611610837806:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611610839566:data
1611610839823:Sept2020data <- data %>%
1611610839844:filter(month == "2020-09-01")
1611610839869:Sept2020data
1611610840065:# Use this to calculate some summary measures.
1611610840109:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611610840131:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611610840199:summary(Sept2020data$volume)
1611610840282:sd(Sept2020data$volume)
1611610840390:# Use this to create some plots.
1611610840434:vol <- (Sept2020data$volume)
1611610840473:ggplot(data = Sept2020data,
1611610840493:aes(x = vol)) +
1611610840515:geom_histogram(bins=30,colour="blue",
1611610840534:fill = "light blue")+
1611610840554:xlab("Number of cars recorded by a radar sign")+
1611610840574:ylab("Number of radar signs which recorded a driver's speed")+
1611610840594:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611610840772:Sept2020data %>%
1611610840794:ggplot(aes(y = vol)) +
1611610840814:theme_classic() +
1611610840833:geom_boxplot(width = .1) +
1611610840858:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611610840879:y = "Volume of Cars") +
1611610840918:coord_cartesian(xlim = c(-.15,.15)) +
1611610840940:theme(axis.text.x = element_blank())
1611610914671:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611610914693:library(opendatatoronto)
1611610914730:library(dplyr)
1611610914751:library(tidyverse)
1611610914768:library(ggplot2)
1611610914824:## It is recommended that you interlace your answer in
1611610914850:## Part 1b with some r code.
1611610914885:## You may need more R chunks and you may want to include plots.
1611610914956:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611610915001:# get package
1611610915021:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610915133:package
1611610915200:# get all resources for this package
1611610915221:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611610915281:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611610915302:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611610915343:# load the first datastore resource as a sample
1611610915359:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611610917123:data
1611610917384:Sept2020data <- data %>%
1611610917405:filter(month == "2020-09-01")
1611610917430:Sept2020data
1611610917616:# Use this to calculate some summary measures.
1611610917660:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611610917680:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611610917742:summary(Sept2020data$volume)
1611610917819:sd(Sept2020data$volume)
1611610917897:# Use this to create some plots.
1611610917940:vol <- (Sept2020data$volume)
1611610917984:ggplot(data = Sept2020data,
1611610918003:aes(x = vol)) +
1611610918024:geom_histogram(bins=30,colour="blue",
1611610918045:fill = "light blue")+
1611610918071:xlab("Number of cars recorded by a radar sign")+
1611610918090:ylab("Number of radar signs which recorded a driver's speed")+
1611610918109:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611610918317:Sept2020data %>%
1611610918338:ggplot(aes(y = vol)) +
1611610918357:theme_classic() +
1611610918376:geom_boxplot(width = .1) +
1611610918400:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611610918420:y = "Volume of Cars") +
1611610918456:coord_cartesian(xlim = c(-.15,.15)) +
1611610918477:theme(axis.text.x = element_blank())
1611611011864:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611611011886:library(opendatatoronto)
1611611011909:library(dplyr)
1611611011932:library(tidyverse)
1611611011957:library(ggplot2)
1611611012015:## It is recommended that you interlace your answer in
1611611012047:## Part 1b with some r code.
1611611012086:## You may need more R chunks and you may want to include plots.
1611611012163:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611611012209:# get package
1611611012230:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611611012291:package
1611611012349:# get all resources for this package
1611611012372:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611611012436:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611611012460:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611611012509:# load the first datastore resource as a sample
1611611012532:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611611014327:data
1611611014595:Sept2020data <- data %>%
1611611014623:filter(month == "2020-09-01")
1611611014650:Sept2020data
1611611249973:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611611249996:library(opendatatoronto)
1611611250020:library(dplyr)
1611611250043:library(tidyverse)
1611611250065:library(ggplot2)
1611611250133:## It is recommended that you interlace your answer in
1611611250162:## Part 1b with some r code.
1611611250203:## You may need more R chunks and you may want to include plots.
1611611250297:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611611250347:# get package
1611611250370:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611611250665:package
1611611250729:# get all resources for this package
1611611250754:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611611250834:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611611250856:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611611250907:# load the first datastore resource as a sample
1611611250933:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611611252884:data
1611611253154:Sept2020data <- data %>%
1611611253182:filter(month == "2020-09-01")
1611611253209:Sept2020data
1611611253392:# Use this to calculate some summary measures.
1611611253440:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611611253463:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611611253530:summary(Sept2020data$volume)
1611611253613:sd(Sept2020data$volume)
1611611253704:# Use this to create some plots.
1611611253752:vol <- (Sept2020data$volume)
1611611253789:ggplot(data = Sept2020data,
1611611253810:aes(x = vol)) +
1611611253831:geom_histogram(bins=30,colour="blue",
1611611253863:fill = "light blue")+
1611611253886:xlab("Number of cars recorded by a radar sign")+
1611611253906:ylab("Number of radar signs which recorded a driver's speed")+
1611611253926:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611611254123:Sept2020data %>%
1611611254145:ggplot(aes(y = vol)) +
1611611254166:theme_classic() +
1611611254188:geom_boxplot(width = .1) +
1611611254211:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611611254236:y = "Volume of Cars") +
1611611254277:coord_cartesian(xlim = c(-.15,.15)) +
1611611254301:theme(axis.text.x = element_blank())
1611676665840:install.packages("opendatatoronto")
1611676676829:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611676676855:library(opendatatoronto)
1611676677018:library(dplyr)
1611676677468:library(tidyverse)
1611676679005:library(ggplot2)
1611676679172:## It is recommended that you interlace your answer in
1611676679197:## Part 1b with some r code.
1611676679235:## You may need more R chunks and you may want to include plots.
1611676679333:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611676679381:# get package
1611676679403:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611676679853:package
1611676679925:# get all resources for this package
1611676679962:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611676680124:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611676680146:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611676680209:# load the first datastore resource as a sample
1611676680238:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611676682309:data
1611676682611:Sept2020data <- data %>%
1611676682640:filter(month == "2020-09-01")
1611676682667:Sept2020data
1611676682880:# Use this to calculate some summary measures.
1611676682928:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611676682950:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611676683016:summary(Sept2020data$volume)
1611676683102:sd(Sept2020data$volume)
1611676683225:# Use this to create some plots.
1611676683271:vol <- (Sept2020data$volume)
1611676683318:ggplot(data = Sept2020data,
1611676683341:aes(x = vol)) +
1611676683365:geom_histogram(bins=30,colour="blue",
1611676683389:fill = "light blue")+
1611676683411:xlab("Number of cars recorded by a radar sign")+
1611676683436:ylab("Number of radar signs which recorded a driver's speed")+
1611676683462:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611676683813:Sept2020data %>%
1611676683837:ggplot(aes(y = vol)) +
1611676683858:theme_classic() +
1611676683884:geom_boxplot(width = .1) +
1611676683909:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611676683930:y = "Volume of Cars") +
1611676683972:coord_cartesian(xlim = c(-.15,.15)) +
1611676683996:theme(axis.text.x = element_blank())
1611707777351:library(tidyverse)
1611707779413:library(patchwork) # For arranging plots
1611707788504:install.packages("opendatatoronto")
1611707795011:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611707795043:library(opendatatoronto)
1611707795272:library(dplyr)
1611707795298:library(tidyverse)
1611707795319:library(ggplot2)
1611707795375:## It is recommended that you interlace your answer in
1611707795399:## Part 1b with some r code.
1611707795432:## You may need more R chunks and you may want to include plots.
1611707795531:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611707795576:# get package
1611707795600:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611707796008:package
1611707796075:# get all resources for this package
1611707796110:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611707796228:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611707796248:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611707796298:# load the first datastore resource as a sample
1611707796317:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611707798597:data
1611707798898:Sept2020data <- data %>%
1611707798930:filter(month == "2020-09-01")
1611707798958:Sept2020data
1611707799147:# Use this to calculate some summary measures.
1611707799195:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611707799219:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611707799281:summary(Sept2020data$volume)
1611707799371:sd(Sept2020data$volume)
1611707799479:# Use this to create some plots.
1611707799521:vol <- (Sept2020data$volume)
1611707799563:ggplot(data = Sept2020data,
1611707799584:aes(x = vol)) +
1611707799605:geom_histogram(bins=30,colour="blue",
1611707799630:fill = "light blue")+
1611707799656:xlab("Number of cars recorded by a radar sign")+
1611707799679:ylab("Number of radar signs which recorded a driver's speed")+
1611707799702:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611707800073:Sept2020data %>%
1611707800100:ggplot(aes(y = vol)) +
1611707800121:theme_classic() +
1611707800141:geom_boxplot(width = .1) +
1611707800162:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in September 2020",
1611707800183:y = "Volume of Cars") +
1611707800224:coord_cartesian(xlim = c(-.15,.15)) +
1611707800246:theme(axis.text.x = element_blank())
1611708012949:# Use this to calculate some summary measures.
1611708012991:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611708013012:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611708013087:summary(Sept2020data$volume)
1611708013181:sd(Sept2020data$volume)
1611708013215:IQR(Sept2020data$volume)
1611710090603:# Use this to calculate some summary measures.
1611710090640:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710090661:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710090742:summary(Sept2020data$volume)
1611710090840:sd(Sept2020data$volume)
1611710090880:IQR(Sept2020data$volume)
1611710090950:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710091015:summ <- summary(Sept2020data$volume) # create the summary
1611710091057:summ["Std.Dev."] <- round(sd(vec),2) # add the new value
1611710097925:# Use this to calculate some summary measures.
1611710097963:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710097985:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710098075:summary(Sept2020data$volume)
1611710098153:sd(Sept2020data$volume)
1611710098194:IQR(Sept2020data$volume)
1611710098266:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710098370:summ <- summary(Sept2020data$volume) # create the summary
1611710098412:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710112947:# Use this to calculate some summary measures.
1611710112990:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710113013:#Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710113037:#summary(Sept2020data$volume)
1611710113058:#sd(Sept2020data$volume)
1611710113078:#IQR(Sept2020data$volume)
1611710113136:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710113208:summ <- summary(Sept2020data$volume) # create the summary
1611710113252:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710145712:# Use this to calculate some summary measures.
1611710145756:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710145780:#Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710145805:#summary(Sept2020data$volume)
1611710145828:#sd(Sept2020data$volume)
1611710145849:#IQR(Sept2020data$volume)
1611710145905:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710145974:summ <- summary(Sept2020data$volume) # create the summary
1611710146023:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710146071:summ
1611710223366:# Use this to calculate some summary measures.
1611710223408:Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710230927:# Use this to calculate some summary measures.
1611710230966:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710230989:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710231079:summary(Sept2020data$volume)
1611710231189:sd(Sept2020data$volume)
1611710231248:#Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710231271:#summ <- summary(Sept2020data$volume) # create the summary
1611710231290:#summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710231313:#summ
1611710242758:# Use this to calculate some summary measures.
1611710242807:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710242829:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611710242910:summary(Sept2020data$volume)
1611710243018:sd(Sept2020data$volume)
1611710243088:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710243178:summ <- summary(Sept2020data$volume) # create the summary
1611710243204:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710243230:summ
1611710264259:# Use this to calculate some summary measures.
1611710264308:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611710264331:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume)) # an example vector
1611710264394:summ <- summary(Sept2020data$volume) # create the summary
1611710264418:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2) # add the new value
1611710264444:summ
1611710700096:# Use this to create some plots.
1611710700146:vol <- (Sept2020data$volume)
1611710700191:ggplot(data = Sept2020data,
1611710700213:aes(x = vol)) +
1611710700234:geom_histogram(bins=30,colour="blue",
1611710700257:fill = "light blue")+
1611710700279:xlab("Number of cars recorded by a radar sign")+
1611710700303:ylab("Number of radar signs which recorded a driver's speed")+
1611710700324:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in September 2020")
1611710700661:Sept2020data %>%
1611710700685:ggplot(aes(y = vol)) +
1611710700709:theme_classic() +
1611710700733:geom_boxplot(width = .1) +
1611710700757:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611710700782:y = "Volume of Cars") +
1611710700827:coord_cartesian(xlim = c(-.15,.15)) +
1611710700850:theme(axis.text.x = element_blank())
1611710712461:# Use this to create some plots.
1611710712510:vol <- (Sept2020data$volume)
1611710712562:ggplot(data = Sept2020data,
1611710712590:aes(x = vol)) +
1611710712611:geom_histogram(bins=30,colour="blue",
1611710712632:fill = "light blue")+
1611710712652:xlab("Number of cars recorded by a radar sign")+
1611710712672:ylab("Number of radar signs which recorded a driver's speed")+
1611710712693:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611710712930:Sept2020data %>%
1611710712951:ggplot(aes(y = vol)) +
1611710712974:theme_classic() +
1611710713000:geom_boxplot(width = .1) +
1611710713026:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611710713052:y = "Volume of Cars") +
1611710713093:coord_cartesian(xlim = c(-.15,.15)) +
1611710713117:theme(axis.text.x = element_blank())
1611710737061:# Use this to create some plots.
1611710737105:vol <- (Sept2020data$volume)
1611710737156:ggplot(data = Sept2020data,
1611710737178:aes(x = vol)) +
1611710737200:geom_histogram(bins=30,colour="black",
1611710737222:fill = "light blue")+
1611710737248:xlab("Number of cars recorded by a radar sign")+
1611710737274:ylab("Number of radar signs which recorded a driver's speed")+
1611710737294:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611710737520:Sept2020data %>%
1611710737548:ggplot(aes(y = vol)) +
1611710737575:theme_classic() +
1611710737596:geom_boxplot(width = .1) +
1611710737620:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611710737643:y = "Volume of Cars") +
1611710737685:coord_cartesian(xlim = c(-.15,.15)) +
1611710737709:theme(axis.text.x = element_blank())
1611765217908:install.packages("patchwork")
1611765232041:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611765232061:library(opendatatoronto)
1611765235307:install.packages("opendatatoronto")
1611765264789:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611765264808:library(opendatatoronto)
1611765264960:library(dplyr)
1611765265469:library(tidyverse)
1611765266854:library(ggplot2)
1611765266923:## It is recommended that you interlace your answer in
1611765266953:## Part 1b with some r code.
1611765266988:## You may need more R chunks and you may want to include plots.
1611765267081:#This code was taken from https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611765267123:# get package
1611765267150:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611765267574:package
1611765267641:# get all resources for this package
1611765267664:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611765267739:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1611765267837:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611765267886:# load the first datastore resource as a sample
1611765267907:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611765270266:data
1611765270537:Sept2020data <- data %>%
1611765270568:filter(month == "2020-09-01")
1611765270596:Sept2020data
1611765270798:# Use this to calculate some summary measures.
1611765270852:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611765270878:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611765270937:summ <- summary(Sept2020data$volume)
1611765270963:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2)
1611765270988:summ
1611765271162:# Use this to create some plots.
1611765271207:vol <- (Sept2020data$volume)
1611765271246:ggplot(data = Sept2020data,
1611765271278:aes(x = vol)) +
1611765271301:geom_histogram(bins=30,colour="black",
1611765271325:fill = "light blue")+
1611765271349:xlab("Number of cars recorded by a radar sign")+
1611765271371:ylab("Number of radar signs which recorded a driver's speed")+
1611765271395:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611765271750:Sept2020data %>%
1611765271775:ggplot(aes(y = vol)) +
1611765271802:theme_classic() +
1611765271823:geom_boxplot(width = .1) +
1611765271844:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611765271870:y = "Volume of Cars") +
1611765271911:coord_cartesian(xlim = c(-.15,.15)) +
1611765271940:theme(axis.text.x = element_blank())
1611766336642:Sept2020data %>%
1611766336666:ggplot(aes(y = vol)) +
1611766336689:theme_classic() +
1611766336714:geom_boxplot(width = .1) +
1611766336735:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611766336762:y = "Volume of Cars") +
1611766336804:coord_cartesian(xlim = c(-.15,.15)) +
1611766336824:theme(axis.text.x = element_blank())
1611769127823:vol <- (Sept2020data$volume)
1611769127863:ggplot(data = Sept2020data,
1611769127889:aes(x = vol)) +
1611769127912:geom_histogram(bins=30,colour="black",
1611769127935:fill = "light blue")+
1611769127956:xlab("Number of cars recorded by a radar sign")+
1611769127980:ylab("Number of radar signs which recorded a driver's speed")+
1611769128009:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611769131679:Sept2020data %>%
1611769131704:ggplot(aes(y = vol)) +
1611769131730:theme_classic() +
1611769131755:geom_boxplot(width = .1) +
1611769131779:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769131803:y = "Volume of Cars") +
1611769131839:coord_cartesian(xlim = c(-.15,.15)) +
1611769131866:theme(axis.text.x = element_blank())
1611769713151:Sept2020data %>%
1611769713173:ggplot(aes(y = vol)) +
1611769713197:theme_classic() +
1611769713216:geom_boxplot(width = .1, colour="black") +
1611769713234:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769713253:y = "Volume of Cars") +
1611769713293:coord_cartesian(xlim = c(-.15,.15)) +
1611769713313:theme(axis.text.x = element_blank())
1611769718432:Sept2020data %>%
1611769718457:ggplot(aes(y = vol)) +
1611769718479:theme_classic() +
1611769718501:geom_boxplot(width = .1, colour="blue") +
1611769718526:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769718550:y = "Volume of Cars") +
1611769718588:coord_cartesian(xlim = c(-.15,.15)) +
1611769718613:theme(axis.text.x = element_blank())
1611769730231:Sept2020data %>%
1611769730252:ggplot(aes(y = vol)) +
1611769730274:theme_classic() +
1611769730297:geom_boxplot(width = .1, fill="blue") +
1611769730322:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769730340:y = "Volume of Cars") +
1611769730373:coord_cartesian(xlim = c(-.15,.15)) +
1611769730394:theme(axis.text.x = element_blank())
1611769738098:Sept2020data %>%
1611769738119:ggplot(aes(y = vol)) +
1611769738142:theme_classic() +
1611769738164:geom_boxplot(width = .1, fill="yellow") +
1611769738185:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769738209:y = "Volume of Cars") +
1611769738243:coord_cartesian(xlim = c(-.15,.15)) +
1611769738263:theme(axis.text.x = element_blank())
1611769746013:Sept2020data %>%
1611769746034:ggplot(aes(y = vol)) +
1611769746058:theme_classic() +
1611769746079:geom_boxplot(width = .1, fill="light blue") +
1611769746102:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769746123:y = "Volume of Cars") +
1611769746159:coord_cartesian(xlim = c(-.15,.15)) +
1611769746179:theme(axis.text.x = element_blank())
1611769863400:Sept2020data %>%
1611769863421:ggplot(aes(y = vol)) +
1611769863445:theme_classic() +
1611769863467:geom_boxplot(width = .1, fill="light blue") +
1611769863491:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611769863513:y = "Volume of Cars") +
1611769863556:coord_cartesian(xlim = c(-.15,.15)) +
1611769863577:theme(axis.text.x = element_blank())
1611867601941:knitr::opts_chunk$set(echo = TRUE)
1611867602148:plot(acidity~aroma, data= coffee_ratings)
1611867616700:knitr::opts_chunk$set(echo = TRUE)
1611867618349:library(tidyverse)
1611867620139:coffee_ratings <- read_csv("coffee_ratings.csv")
1611867621931:plot(acidity~aroma, data= coffee_ratings) #y given x
1611867731763:plot(acidity~aroma, data= coffee_ratings, pch = 13, col = "blue", xlab = "Aroma Rating", ylab = "Acidity", main = "scatterplot") #y given x
1611867832906:plot(acidity~aroma, data= coffee_ratings, pch = 13, col = "blue", xlab = "Aroma Rating", ylab = "Acidity", main = "scatterplot") #y given x()
1611867833043:# Tidyverse now
1611867833086:coffee_ratings %>%
1611867833116:ggplot(aes(x = aroma, y=acidity))+
1611867833137:geom_point()
1611867981002:# Code to find slope and y-int estimate
1611867981027:lm(acidity ~ aroma, data = coffee_ratings)
1611868489802:coffee_ratings %>%
1611868489827:ggplot(aes(x = aroma, y=acidity))+
1611868489852:geom_point() +
1611868489876:geom_abline(slope = 0.6129, intercept = 2.9006)
1611868607072:coffee_ratings <- coffee_ratings %>% mutate(aroma_sq = aroma*aroma)
1611868607173:lm(acidity ~ aroma + aroma_sq, data = coffee_ratings)
1611870410671:install.packages("opendatatoronto")
1611883854709:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883854736:x <- seq(-10, 10, by = .1)
1611883854777:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883854799:y <- dnorm(x, mean = 2.5, sd = 0.5)
1611883854841:plot(x,y)
1611883888410:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883888433:x <- seq(-10, 10, by = .1)
1611883888471:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883888494:y <- dnorm(x, mean = 185, sd = 25)
1611883888539:plot(x,y)
1611883905011:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883905032:x <- seq(-10, 10, by = .1)
1611883905076:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883905097:y <- pnorm(x, mean = 185, sd = 25)
1611883905136:plot(x,y)
1611883910066:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883910089:x <- seq(-10, 10, by = .1)
1611883910127:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883910147:y <- rnorm(x, mean = 185, sd = 25)
1611883910188:plot(x,y)
1611883915295:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883915316:x <- seq(-10, 10, by = .1)
1611883915359:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883915379:y <- dnorm(x, mean = 185, sd = 25)
1611883915425:plot(x,y)
1611883927485:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883927507:x <- seq(-10, 10, by = .1)
1611883927562:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883927586:y <- dnorm(x, mean = 190, sd = 25)
1611883927634:plot(x,y)
1611883932109:# Create a sequence of numbers between -10 and 10 incrementing by 0.1.
1611883932130:x <- seq(-10, 10, by = .1)
1611883932169:# Choose the mean as 2.5 and standard deviation as 0.5.
1611883932200:y <- dnorm(x, mean = 1, sd = 25)
1611883932239:plot(x,y)
1611884134123:knitr::opts_chunk$set(echo = TRUE)
1611884134145:library(tidyverse)
1611884134203:set.seed(1006001899)
1611884134225:eat_brocolli <- sample(x=c("Never", "Always", "Sometimes"),
1611884134275:size = 10,
1611884134298:replace = TRUE,
1611884134324:prob = c(0.8, 0.15, 0.05))
1611884134367:eat_brocolli
1611884134467:hair_loss <- runif(n=10, min=0, max=10)
1611884134514:age <- rpois(n = 10, lambda = 35)
1611884134561:my_data <- tibble(age, eat_brocolli, hair_loss)
1611884134615:my_data
1611884259415:#define population mean and standard deviation
1611884259436:population_mean <- 185
1611884259457:population_sd <- 25
1611884259497:#define upper and lower bound
1611884259519:lower_bound <- population_mean - population_sd
1611884259545:upper_bound <- population_mean + population_sd
1611884259581:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884259602:x <- seq(-4, 4, length = 1000) * population_sd + population_mean
1611884259639:#create a vector of values that shows the height of the probability distribution
1611884259661:#for each value in x
1611884259678:y <- dnorm(x, population_mean, population_sd)
1611884259717:#plot normal distribution with customized x-axis labels
1611884259737:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884259769:sd_axis_bounds = 5
1611884259792:axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
1611884259816:sd_axis_bounds * population_sd + population_mean,
1611884259837:by = population_sd)
1611884259864:axis(side = 1, at = axis_bounds, pos = 0)
1611884275614:#define population mean and standard deviation
1611884275637:population_mean <- 185
1611884275663:population_sd <- 25
1611884275707:#define upper and lower bound
1611884275731:lower_bound <- population_mean - population_sd
1611884275757:upper_bound <- population_mean + population_sd
1611884275800:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884275829:x <- seq(-4, 4, length = 1000) * population_sd + population_mean
1611884275873:#create a vector of values that shows the height of the probability distribution
1611884275893:#for each value in x
1611884275915:y <- dnorm(x, population_mean, population_sd)
1611884275959:#plot normal distribution with customized x-axis labels
1611884275980:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884283248:#define population mean and standard deviation
1611884283270:population_mean <- 185
1611884283294:population_sd <- 25
1611884283330:#define upper and lower bound
1611884283351:lower_bound <- population_mean - population_sd
1611884283376:upper_bound <- population_mean + population_sd
1611884283420:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884283441:x <- seq(-4, 4, length = 1000) * population_sd + population_mean
1611884283480:#create a vector of values that shows the height of the probability distribution
1611884283498:#for each value in x
1611884283521:y <- dnorm(x, population_mean, population_sd)
1611884283560:#plot normal distribution with customized x-axis labels
1611884283578:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884283613:sd_axis_bounds = 5
1611884283635:axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
1611884283656:sd_axis_bounds * population_sd + population_mean,
1611884283681:by = population_sd)
1611884283713:axis(side = 1, at = axis_bounds, pos = 0)
1611884341862:#define population mean and standard deviation
1611884341885:population_mean <- 185
1611884341913:population_sd <- 25
1611884341954:#define upper and lower bound
1611884341977:lower_bound <- population_mean - population_sd
1611884341999:upper_bound <- population_mean + population_sd
1611884342040:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884342060:x <- seq(-4, 4, length = 1000) * population_sd + population_mean
1611884342100:#create a vector of values that shows the height of the probability distribution
1611884342124:#for each value in x
1611884342145:y <- dnorm(x, population_mean, population_sd)
1611884342186:#plot normal distribution with customized x-axis labels
1611884342210:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884342250:sd_axis_bounds = 25
1611884342278:axis_bounds <- seq(-sd_axis_bounds * population_sd + population_mean,
1611884342301:sd_axis_bounds * population_sd + population_mean,
1611884342325:by = population_sd)
1611884342350:axis(side = 1, at = axis_bounds, pos = 0)
1611884362117:#define population mean and standard deviation
1611884362141:population_mean <- 185
1611884362164:population_sd <- 25
1611884362204:#define upper and lower bound
1611884362229:lower_bound <- population_mean - population_sd
1611884362250:upper_bound <- population_mean + population_sd
1611884362285:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884362305:x <- seq(-4, 4, length = 1000) * population_sd + population_mean
1611884362343:#create a vector of values that shows the height of the probability distribution
1611884362370:#for each value in x
1611884362394:y <- dnorm(x, population_mean, population_sd)
1611884362436:#plot normal distribution with customized x-axis labels
1611884362460:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884362498:sd_axis_bounds = 25
1611884362539:axis(side = 1, at = axis_bounds, pos = 0)
1611884373528:#define population mean and standard deviation
1611884373549:population_mean <- 185
1611884373571:population_sd <- 25
1611884373609:#define upper and lower bound
1611884373628:lower_bound <- population_mean - population_sd
1611884373650:upper_bound <- population_mean + population_sd
1611884373687:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884373707:x <- seq(-10, 10, length = 1000) * population_sd + population_mean
1611884373747:#create a vector of values that shows the height of the probability distribution
1611884373767:#for each value in x
1611884373788:y <- dnorm(x, population_mean, population_sd)
1611884373828:#plot normal distribution with customized x-axis labels
1611884373855:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884373889:sd_axis_bounds = 25
1611884373914:axis(side = 1, at = axis_bounds, pos = 0)
1611884383621:#define population mean and standard deviation
1611884383644:population_mean <- 185
1611884383668:population_sd <- 25
1611884383714:#define upper and lower bound
1611884383736:lower_bound <- population_mean - population_sd
1611884383757:upper_bound <- population_mean + population_sd
1611884383809:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884383829:x <- seq(-3, 3, length = 1000) * population_sd + population_mean
1611884383869:#create a vector of values that shows the height of the probability distribution
1611884383891:#for each value in x
1611884383916:y <- dnorm(x, population_mean, population_sd)
1611884383961:#plot normal distribution with customized x-axis labels
1611884383987:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884384028:sd_axis_bounds = 25
1611884384051:axis(side = 1, at = axis_bounds, pos = 0)
1611884393058:#define population mean and standard deviation
1611884393081:population_mean <- 185
1611884393107:population_sd <- 25
1611884393147:#define upper and lower bound
1611884393167:lower_bound <- population_mean - population_sd
1611884393191:upper_bound <- population_mean + population_sd
1611884393229:#Create a sequence of 1000 x values based on population mean and standard deviation
1611884393255:x <- seq(-5, 5, length = 1000) * population_sd + population_mean
1611884393300:#create a vector of values that shows the height of the probability distribution
1611884393322:#for each value in x
1611884393344:y <- dnorm(x, population_mean, population_sd)
1611884393386:#plot normal distribution with customized x-axis labels
1611884393409:plot(x,y, type = "l", lwd = 2, axes = FALSE, xlab = "", ylab = "")
1611884393443:sd_axis_bounds = 25
1611884393467:axis(side = 1, at = axis_bounds, pos = 0)
1611884493815:# Children's IQ scores are normally distributed with a
1611884493838:# mean of 100 and a standard deviation of 15. What
1611884493861:# proportion of children are expected to have an IQ between
1611884493881:# 80 and 120?
1611884493919:mean=185; sd=25
1611884493943:lb=190;
1611884493979:x <- seq(-4,4,length=100)*sd + mean
1611884494003:hx <- dnorm(x,mean,sd)
1611884494042:plot(x, hx, type="n", xlab="IQ Values", ylab="",
1611884494061:main="Normal Distribution", axes=FALSE)
1611884494112:i <- x >= lb & x <= ub
1611884507759:# Children's IQ scores are normally distributed with a
1611884507785:# mean of 100 and a standard deviation of 15. What
1611884507809:# proportion of children are expected to have an IQ between
1611884507837:# 80 and 120?
1611884507875:mean=185; sd=25
1611884507900:lb=190;
1611884507943:x <- seq(-4,4,length=100)*sd + mean
1611884507965:hx <- dnorm(x,mean,sd)
1611884508004:plot(x, hx, type="n", xlab="IQ Values", ylab="",
1611884508028:main="Normal Distribution", axes=FALSE)
1611884508074:i <- x >= lb
1611884508097:lines(x, hx)
1611884508127:polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
1611884537861:# Children's IQ scores are normally distributed with a
1611884537883:# mean of 100 and a standard deviation of 15. What
1611884537906:# proportion of children are expected to have an IQ between
1611884537928:# 80 and 120?
1611884537963:mean=185; sd=25
1611884537990:lb=80; ub=100000
1611884538030:x <- seq(-4,4,length=100)*sd + mean
1611884538055:hx <- dnorm(x,mean,sd)
1611884538094:plot(x, hx, type="n", xlab="IQ Values", ylab="",
1611884538113:main="Normal Distribution", axes=FALSE)
1611884538161:i <- x >= lb & x <= ub
1611884538184:lines(x, hx)
1611884538211:polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
1611884538255:area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
1611884538277:result <- paste("P(",lb,"< IQ <",ub,") =",
1611884538300:signif(area, digits=3))
1611884538321:mtext(result,3)
1611884538345:axis(1, at=seq(40, 160, 20), pos=0)
1611884547979:# Children's IQ scores are normally distributed with a
1611884547999:# mean of 100 and a standard deviation of 15. What
1611884548018:# proportion of children are expected to have an IQ between
1611884548040:# 80 and 120?
1611884548074:mean=185; sd=25
1611884548096:lb=190; ub=100000
1611884548130:x <- seq(-4,4,length=100)*sd + mean
1611884548152:hx <- dnorm(x,mean,sd)
1611884548185:plot(x, hx, type="n", xlab="IQ Values", ylab="",
1611884548201:main="Normal Distribution", axes=FALSE)
1611884548242:i <- x >= lb & x <= ub
1611884548265:lines(x, hx)
1611884548286:polygon(c(lb,x[i],ub), c(0,hx[i],0), col="red")
1611884548322:area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
1611884548347:result <- paste("P(",lb,"< IQ <",ub,") =",
1611884548366:signif(area, digits=3))
1611884548386:mtext(result,3)
1611884548412:axis(1, at=seq(40, 160, 20), pos=0)
1611884586493:x <- seq(-4, 4, length=100)
1611884586537:#create a vector of values that shows the height of the probability distribution
1611884586560:#for each value in x
1611884586584:y <- dnorm(x)
1611884586609:plot(x,y)
1611884593356:x <- seq(-4, 4, length=1000)
1611884593396:#create a vector of values that shows the height of the probability distribution
1611884593421:#for each value in x
1611884593445:y <- dnorm(x)
1611884593471:plot(x,y)
1611884653118:x <- seq(-4, 4, length=1000)
1611884653157:#create a vector of values that shows the height of the probability distribution
1611884653180:#for each value in x
1611884653201:y <- dnorm(x)
1611884653224:plot(x,y)
1611884653278:geom_vline(xintercept = 0.645, color = "red")
1611884716179:x <- seq(-4, 4, length=1000)
1611884716224:#create a vector of values that shows the height of the probability distribution
1611884716246:#for each value in x
1611884716272:y <- dnorm(x)
1611884716300:plot(x,y)
1611884716352:abline(x=1.45602, col="blue")
1611884742375:x <- seq(-4, 4, length=1000)
1611884742417:#create a vector of values that shows the height of the probability distribution
1611884742439:#for each value in x
1611884742461:y <- dnorm(x)
1611884742485:plot(x,y)
1611884742536:abline(v=1.45602, col="blue")
1611884799042:x <- seq(-4, 4, length=1000)
1611884799081:#create a vector of values that shows the height of the probability distribution
1611884799106:#for each value in x
1611884799133:y <- dnorm(x)
1611884799163:plot(x,y)
1611884799217:abline(v=1.45602, col="blue")
1611884799257:x2 <- seq(0.05,0.35,0.01)
1611884799290:y2 <-  dbeta(x2, 2, 5)
1611884799321:x2 = c(0.05,x2,0.35)
1611884799344:y2 = c(0,y2,0)
1611884799365:polygon(x2,y2, col="yellow", border=NA)
1611884823201:x <- seq(-4, 4, length=1000)
1611884823239:#create a vector of values that shows the height of the probability distribution
1611884823260:#for each value in x
1611884823281:y <- dnorm(x)
1611884823305:plot(x,y)
1611884823355:abline(v=1.45602, col="blue")
1611884823399:x2 <- seq(5,0.35,0.01)
1611884827070:x <- seq(-4, 4, length=1000)
1611884827110:#create a vector of values that shows the height of the probability distribution
1611884827131:#for each value in x
1611884827152:y <- dnorm(x)
1611884827174:plot(x,y)
1611884827221:abline(v=1.45602, col="blue")
1611884827259:x2 <- seq(1.5,0.35,0.01)
1611884840102:x <- seq(-4, 4, length=1000)
1611884840149:#create a vector of values that shows the height of the probability distribution
1611884840173:#for each value in x
1611884840199:y <- dnorm(x)
1611884840230:plot(x,y)
1611884840286:abline(v=1.45602, col="blue")
1611884840348:x2 <- seq(0.05,0.05,0.01)
1611884840392:y2 <-  dbeta(x2, 2, 5)
1611884840432:x2 = c(0.05,x2,0.35)
1611884840505:y2 = c(0,y2,0)
1611884840553:polygon(x2,y2, col="yellow", border=NA)
1611884845571:x <- seq(-4, 4, length=1000)
1611884845613:#create a vector of values that shows the height of the probability distribution
1611884845634:#for each value in x
1611884845658:y <- dnorm(x)
1611884845682:plot(x,y)
1611884845737:abline(v=1.45602, col="blue")
1611884845786:x2 <- seq(0.05,0.5,0.01)
1611884845813:y2 <-  dbeta(x2, 2, 5)
1611884845840:x2 = c(0.05,x2,0.35)
1611884845868:y2 = c(0,y2,0)
1611884845892:polygon(x2,y2, col="yellow", border=NA)
1611884851055:x <- seq(-4, 4, length=1000)
1611884851095:#create a vector of values that shows the height of the probability distribution
1611884851116:#for each value in x
1611884851135:y <- dnorm(x)
1611884851160:plot(x,y)
1611884851209:abline(v=1.45602, col="blue")
1611884851246:x2 <- seq(0.05,0.5,0.4)
1611884851269:y2 <-  dbeta(x2, 2, 5)
1611884851293:x2 = c(0.05,x2,0.35)
1611884851316:y2 = c(0,y2,0)
1611884851340:polygon(x2,y2, col="yellow", border=NA)
1611885061736:x <- seq(-4, 4, length=1000)
1611885061782:#create a vector of values that shows the height of the probability distribution
1611885061808:#for each value in x
1611885061835:y <- dnorm(x)
1611885061858:plot(x,y)
1611885061907:abline(v=1.45602, col="blue")
1611885061951:x2 <- seq(0.05,0.35,0.01)
1611885061982:y2 <-  dbeta(x2, 2, 0.1)
1611885062044:x2 = c(0.05,x2,0.35)
1611885062070:y2 = c(0,y2,0)
1611885062098:polygon(x2,y2, col="yellow", border=NA)
1611885074001:x <- seq(-4, 4, length=1000)
1611885074042:#create a vector of values that shows the height of the probability distribution
1611885074070:#for each value in x
1611885074091:y <- dnorm(x)
1611885074116:plot(x,y)
1611885074168:abline(v=1.45602, col="blue")
1611885074211:x2 <- seq(0.05,0.35,0.01)
1611885074238:y2 <-  dbeta(x2, 2, 0.1)
1611885074265:x2 = c(0.05,x2,0.35)
1611885074292:y2 = c(0,y2,0)
1611885074318:polygon(x2,y2, col="yellow", border=NA)
1611885085173:x <- seq(-4, 4, length=1000)
1611885085213:#create a vector of values that shows the height of the probability distribution
1611885085239:#for each value in x
1611885085257:y <- dnorm(x)
1611885085278:plot(x,y)
1611885085330:abline(v=1.45602, col="blue")
1611885085381:x2 <- seq(0.05,0.35,0.01)
1611885085407:y2 <-  dbeta(2, 2, 0.1)
1611885085432:x2 = c(0.05,x2,0.35)
1611885085459:y2 = c(0,y2,0)
1611885085483:polygon(x2,y2, col="yellow", border=NA)
1611885089094:x <- seq(-4, 4, length=1000)
1611885089136:#create a vector of values that shows the height of the probability distribution
1611885089166:#for each value in x
1611885089191:y <- dnorm(x)
1611885089217:plot(x,y)
1611885089275:abline(v=1.45602, col="blue")
1611885089327:x2 <- seq(0.05,0.35,0.01)
1611885089352:y2 <-  dbeta(x2, 2, 0.1)
1611885089379:x2 = c(0.05,x2,0.35)
1611885089405:y2 = c(0,y2,0)
1611885089429:polygon(x2,y2, col="yellow", border=NA)
1611885166679:x <- seq(-4, 4, length=1000)
1611885166725:#create a vector of values that shows the height of the probability distribution
1611885166745:#for each value in x
1611885166767:y <- dnorm(x)
1611885166793:plot(x,y)
1611885166843:abline(v=1.45602, col="blue")
1611885217038:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611885217063:library(opendatatoronto)
1611885217103:library(dplyr)
1611885217126:library(tidyverse)
1611885217147:library(ggplot2)
1611885217167:library(amsmath)
1611885349733:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611885349754:library(opendatatoronto)
1611885349775:library(dplyr)
1611885349799:library(tidyverse)
1611885349823:library(ggplot2)
1611885349872:x <- seq(-4, 4, length=1000)
1611885349923:#create a vector of values that shows the height of the probability distribution
1611885349947:#for each value in x
1611885349971:y <- dnorm(x)
1611885349997:plot(x,y)
1611885350046:abline(v=1.45602, col="blue")
1611885350159:## It is recommended that you interlace your answer in
1611885350190:## Part 1b with some r code.
1611885350232:## You may need more R chunks and you may want to include plots.
1611885350309:#This code was taken from
1611885350335:#https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611885350377:# get package
1611885350399:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611885350821:package
1611885350883:# get all resources for this package
1611885350907:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611885350982:# identify datastore resources; by default,
1611885351003:# Toronto Open Data sets datastore resource format to CSV for
1611885351025:#non-geospatial and GeoJSON for geospatial resources
1611885351047:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611885351101:# load the first datastore resource as a sample
1611885351164:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611885353054:data
1611885353353:Sept2020data <- data %>%
1611885353380:filter(month == "2020-09-01")
1611885353403:Sept2020data
1611885353580:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611885353607:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611885353663:summ <- summary(Sept2020data$volume)
1611885353689:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2)
1611885353712:summ
1611885353822:vol <- (Sept2020data$volume)
1611885353867:ggplot(data = Sept2020data,
1611885353886:aes(x = vol)) +
1611885353918:geom_histogram(bins=30,colour="black",
1611885353939:fill = "light blue")+
1611885353963:xlab("Number of cars recorded by a radar sign")+
1611885353983:ylab("Number of radar signs which recorded a driver's speed")+
1611885354003:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611885354294:Sept2020data %>%
1611885354325:ggplot(aes(y = vol)) +
1611885354346:theme_classic() +
1611885354369:geom_boxplot(width = .1, fill="light blue") +
1611885354391:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611885354413:y = "Volume of Cars") +
1611885354453:coord_cartesian(xlim = c(-.15,.15)) +
1611885354471:theme(axis.text.x = element_blank())
1611885577841:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611885577862:library(opendatatoronto)
1611885577881:library(dplyr)
1611885577901:library(tidyverse)
1611885577923:library(ggplot2)
1611885577969:x <- seq(-4, 4, length=1000)
1611885578019:#create a vector of values that shows the height of the probability distribution
1611885578041:#for each value in x
1611885578068:y <- dnorm(x)
1611885578097:plot(x,y)
1611885578153:abline(v=1.45602, col="blue")
1611885578271:## It is recommended that you interlace your answer in
1611885578305:## Part 1b with some r code.
1611885578343:## You may need more R chunks and you may want to include plots.
1611885578427:#This code was taken from
1611885578458:#https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611885578500:# get package
1611885578522:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611885578843:package
1611885578916:# get all resources for this package
1611885578938:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611885579005:# identify datastore resources; by default,
1611885579026:# Toronto Open Data sets datastore resource format to CSV for
1611885579053:#non-geospatial and GeoJSON for geospatial resources
1611885579077:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611885579124:# load the first datastore resource as a sample
1611885579143:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611885581267:data
1611885581539:Sept2020data <- data %>%
1611885581567:filter(month == "2020-09-01")
1611885581591:Sept2020data
1611885581797:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611885581823:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611885581882:summ <- summary(Sept2020data$volume)
1611885581908:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2)
1611885581930:summ
1611885582047:vol <- (Sept2020data$volume)
1611885582099:ggplot(data = Sept2020data,
1611885582127:aes(x = vol)) +
1611885582149:geom_histogram(bins=30,colour="black",
1611885582171:fill = "light blue")+
1611885582194:xlab("Number of cars recorded by a radar sign")+
1611885582215:ylab("Number of radar signs which recorded a driver's speed")+
1611885582237:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611885582559:Sept2020data %>%
1611885582586:ggplot(aes(y = vol)) +
1611885582608:theme_classic() +
1611885582627:geom_boxplot(width = .1, fill="light blue") +
1611885582647:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611885582667:y = "Volume of Cars") +
1611885582703:coord_cartesian(xlim = c(-.15,.15)) +
1611885582727:theme(axis.text.x = element_blank())
1611886180131:x <- seq(-4, 4, length=1000)
1611886180157:y <- dnorm(x)
1611886180187:plot(x,y)
1611886180240:abline(v=1.45602, col="blue")
1611886220381:pnorm(1.45602)
1611886220416:x <- seq(-4, 4, length=1000)
1611886220442:y <- dnorm(x)
1611886220464:plot(x,y)
1611886220517:abline(v=1.45602, col="blue")
1611886263673:prob <- 1- pnorm(1.45602)
1611886263696:prob
1611886263728:x <- seq(-4, 4, length=1000)
1611886263750:y <- dnorm(x)
1611886263774:plot(x,y)
1611886263828:abline(v=1.45602, col="blue")
1611886366207:x <- seq(-4, 4, length=1000)
1611886366235:y <- dnorm(x)
1611886366261:plot(x,y)
1611886366313:abline(v=1.45602, col="blue")
1611886492439:x <- seq(-4, 4, length=1000)
1611886492464:y <- dnorm(x)
1611886492489:plot(x,y, main="Standard normal distribution",
1611886492510:xlab="Z-score", ylab="Probability density",
1611886492540:xlim=c(xmin, xmax), ylim=c(ymin, ymax))
1611886517336:x <- seq(-4, 4, length=1000)
1611886517362:y <- dnorm(x)
1611886517387:plot(x,y, main="Standard normal distribution",
1611886517423:xlab="Z-score", ylab="Probability density")
1611886517475:abline(v=1.45602, col="blue")
1611887079827:probability <- 1 - pnorm(1.45602)
1611887079852:probability
1611935168038:install.packages("opendatatoronto")
1611935283626:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611935283654:library(opendatatoronto)
1611935283826:library(dplyr)
1611935284418:library(tidyverse)
1611935285806:library(ggplot2)
1611935285957:x <- seq(-4, 4, length=1000)
1611935285987:y <- dnorm(x)
1611935286016:plot(x,y, main="Standard normal distribution",
1611935286037:xlab="Z-score", ylab="Probability density")
1611935286181:abline(v=1.45602, col="blue")
1611935286280:probability <- 1 - pnorm(1.45602)
1611935286312:probability
1611935286391:#This code was taken from
1611935286420:#https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611935286459:# get package
1611935286480:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611935286849:package
1611935286910:# get all resources for this package
1611935286933:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611935287018:# identify datastore resources; by default,
1611935287045:# Toronto Open Data sets datastore resource format to CSV for
1611935287070:#non-geospatial and GeoJSON for geospatial resources
1611935287091:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611935287141:# load the first datastore resource as a sample
1611935287162:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611935290219:data
1611935290629:Sept2020data <- data %>%
1611935290657:filter(month == "2020-09-01")
1611935290684:Sept2020data
1611935290876:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611935290901:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611935290963:summ <- summary(Sept2020data$volume)
1611935290993:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2)
1611935291018:summ
1611935291132:vol <- (Sept2020data$volume)
1611935291188:ggplot(data = Sept2020data,
1611935291235:aes(x = vol)) +
1611935291255:geom_histogram(bins=30,colour="black",
1611935291276:fill = "light blue")+
1611935291298:xlab("Number of cars recorded by a radar sign")+
1611935291319:ylab("Number of radar signs which recorded a driver's speed")+
1611935291338:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611935291687:Sept2020data %>%
1611935291713:ggplot(aes(y = vol)) +
1611935291747:theme_classic() +
1611935291774:geom_boxplot(width = .1, fill="light blue") +
1611935291798:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611935291822:y = "Volume of Cars") +
1611935291868:coord_cartesian(xlim = c(-.15,.15)) +
1611935291889:theme(axis.text.x = element_blank())
1611937645986:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1611937646006:library(opendatatoronto)
1611937646030:library(dplyr)
1611937646053:library(tidyverse)
1611937646077:library(ggplot2)
1611937646128:x <- seq(-4, 4, length=1000)
1611937646159:y <- dnorm(x)
1611937646183:plot(x,y, main="Standard normal distribution",
1611937646204:xlab="Z-score", ylab="Probability density")
1611937646262:abline(v=1.45602, col="blue")
1611937646368:probability <- 1 - pnorm(1.45602)
1611937646399:probability
1611937646473:#This code was taken from
1611937646505:#https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1611937646558:# get package
1611937646579:package <- show_package("e0a82533-93d5-4f63-81f5-128f8b665200")
1611937646850:package
1611937646920:# get all resources for this package
1611937646942:resources <- list_package_resources("e0a82533-93d5-4f63-81f5-128f8b665200")
1611937647024:# identify datastore resources; by default,
1611937647046:# Toronto Open Data sets datastore resource format to CSV for
1611937647079:#non-geospatial and GeoJSON for geospatial resources
1611937647108:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1611937647162:# load the first datastore resource as a sample
1611937647183:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1611937649421:data
1611937649692:Sept2020data <- data %>%
1611937649721:filter(month == "2020-09-01")
1611937649747:Sept2020data
1611937649912:#Numerical Summaries for the total number of vehicles observed during Sept. 2020
1611937649941:Sept2020data$volume <- as.numeric(as.character(Sept2020data$volume))
1611937650006:summ <- summary(Sept2020data$volume)
1611937650031:summ["Std.Dev."] <- round(sd(Sept2020data$volume),2)
1611937650053:summ
1611937650155:vol <- (Sept2020data$volume)
1611937650199:ggplot(data = Sept2020data,
1611937650223:aes(x = vol)) +
1611937650247:geom_histogram(bins=30,colour="black",
1611937650266:fill = "light blue")+
1611937650287:xlab("Volume of Cars")+
1611937650306:ylab("Number of radar signs")+
1611937650324:ggtitle("Histogram of volume of cars recorded by a radar sign in Toronto in Sept. 2020")
1611937650623:Sept2020data %>%
1611937650658:ggplot(aes(y = vol)) +
1611937650687:theme_classic() +
1611937650710:geom_boxplot(width = .1, fill="light blue") +
1611937650733:labs(title = "Boxplot of volume of cars recorded by a radar sign in Toronto in Sept. 2020",
1611937650756:y = "Volume of Cars") +
1611937650805:coord_cartesian(xlim = c(-.15,.15)) +
1611937650825:theme(axis.text.x = element_blank())
1612472582334:install.packages("patchwork")
1612472699536:library(patchwork)
1612472874782:# Recreate the plots in Figure 20.1:
1612472874808:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612472874829:ggplot(aes(x = T1)) +
1612472874850:theme_classic() +
1612472874873:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612472874895:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612472874916:coord_cartesian(xlim = c(300,1600))
1612472881362:library(tidyverse)
1612472882579:library(patchwork)
1612472882603:set.seed(432354675)
1612472882627:# Functions to compute the estimators
1612472882649:T1 <- function(x) 2 * mean(x) - 1
1612472882674:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612472882696:T3 <- function(x) {2*x[1] - 1}
1612472882814:N <- 1000
1612472882842:n <- 100
1612472882864:M <- 1000 # One million simulations
1612472882917:thesimulations <- list(
1612472882940:T1 = numeric(M),
1612472882961:T2 = numeric(M),
1612472882982:#T3 = numeric(M)
1612472883007:)
1612472886941:library(tidyverse)
1612472886961:library(patchwork)
1612472886980:set.seed(432354675)
1612472887002:# Functions to compute the estimators
1612472887025:T1 <- function(x) 2 * mean(x) - 1
1612472887049:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612472887074:T3 <- function(x) {2*x[1] - 1}
1612472887141:N <- 1000
1612472887163:n <- 100
1612472887185:M <- 1000 # One million simulations
1612472887239:thesimulations <- list(
1612472887260:T1 = numeric(M),
1612472887280:T2 = numeric(M),
1612472887302:#T3 = numeric(M)
1612472887322:)
1612472893588:library(tidyverse)
1612472893612:library(patchwork)
1612472893636:set.seed(432354675)
1612472893656:# Functions to compute the estimators
1612472893677:T1 <- function(x) 2 * mean(x) - 1
1612472893699:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612472893733:T3 <- function(x) {2*x[1] - 1}
1612472893815:N <- 1000
1612472893839:n <- 100
1612472893862:M <- 1000 # One million simulations
1612472893916:thesimulations <- list(
1612472893940:T1 = numeric(M),
1612472893960:T2 = numeric(M),
1612472893981:T3 = numeric(M)
1612472894004:)
1612472894032:for (i in 1:M) {
1612472894054:# Do the simulation
1612472894080:# Sample from a discrete uniform (?sample.int):
1612472894101:thesample <- sample.int(N,n,replace = FALSE)
1612472894122:# Record the values of the two estimators:
1612472894142:thesimulations$T1[i] <- T1(thesample)
1612472894163:thesimulations$T2[i] <- T2(thesample)
1612472894182:thesimulations$T3[i] <- T3(thesample)
1612472894200:}
1612472898916:# Recreate the plots in Figure 20.1:
1612472898935:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612472898955:ggplot(aes(x = T1)) +
1612472898984:theme_classic() +
1612472899004:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612472899026:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612472899047:coord_cartesian(xlim = c(300,1600))
1612472899355:midplot <- tibble(T2 = thesimulations$T2) %>%
1612472899379:ggplot(aes(x = T2)) +
1612472899400:theme_classic() +
1612472899421:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612472899441:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612472899462:coord_cartesian(xlim = c(300,1600))
1612472899773:rightplot <- tibble(T3 = thesimulations$T3) %>%
1612472899792:ggplot(aes(x = T3)) +
1612472899812:theme_classic() +
1612472899835:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612472899864:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612472899888:coord_cartesian(xlim = c(300,1600))
1612472900190:leftplot | midplot | rightplot
1612472964780:mse <- function(x) var(x) + (mean(x) - N)^2
1612473013894:mse <- function(x) var(x) + (mean(x) - N)^2
1612473046090:mean(thesimulations$T1) - N
1612473068984:mean(thesimulations$T1) - N
1612473069015:mean(thesimulations$T2) - N
1612473069048:mean(thesimulations$T3) - N
1612473100619:var(thesimulations$T1)
1612473109882:var(thesimulations$T1)
1612473109924:var(thesimulations$T2)
1612473109958:var(thesimulations$T3)
1612473247856:mse(thesimulations$T1)
1612473247890:mse(thesimulations$T2)
1612473247928:mse(thesimulations$T3)
1612637230631:install.packages("patchwork")
1612638557648:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612638557687:# You may need additional chunks.
1612638557724:# I would recommend not including any of the Cleaning process output here.
1612638557760:library(opendatatoronto)
1612638560599:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612638560622:library(openintro)
1612638564903:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612638564944:# You may need additional chunks.
1612638564986:# I would recommend not including any of the Cleaning process output here.
1612638565041:library(opendatatoronto)
1612638727003:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612638727050:# You may need additional chunks.
1612638727092:# I would recommend not including any of the Cleaning process output here.
1612638727155:library(opendatatoronto)
1612638735666:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612638735705:# You may need additional chunks.
1612638735744:# I would recommend not including any of the Cleaning process output here.
1612638735784:install.packages("opendatatoronto")
1612638742097:library(opendatatoronto)
1612638742234:library(dplyr)
1612638742292:# get package
1612638742324:package <- show_package("996cfe8d-fb35-40ce-b569-698d51fc683b")
1612638742994:package
1612638749007:View(package)
1612639151948:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612639151995:# You may need additional chunks.
1612639152037:# I would recommend not including any of the Cleaning process output here.
1612639152075:install.packages("opendatatoronto")
1612639152141:library(opendatatoronto)
1612639152163:library(dplyr)
1612639152202:# get package
1612639152227:package <- show_package("996cfe8d-fb35-40ce-b569-698d51fc683b")
1612639152841:package
1612639152941:#This code was taken from
1612639152963:#https://open.toronto.ca/dataset/safety-zone-watch-your-speed-program-monthly-summary/
1612639153019:# get all resources for this package
1612639153040:resources <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b")
1612639153173:# identify datastore resources; by default,
1612639153197:# Toronto Open Data sets datastore resource format to CSV for
1612639153219:#non-geospatial and GeoJSON for geospatial resources
1612639153243:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612639153297:# load the first datastore resource as a sample
1612639153318:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612639184818:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612639184857:# You may need additional chunks.
1612639184902:# I would recommend not including any of the Cleaning process output here.
1612639184939:install.packages("opendatatoronto")
1612639185007:library(opendatatoronto)
1612639185029:library(dplyr)
1612639189619:install.packages("opendatatoronto")
1612639193493:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612639193543:# You may need additional chunks.
1612639193581:# I would recommend not including any of the Cleaning process output here.
1612639193624:install.packages("opendatatoronto")
1612639196708:library(opendatatoronto)
1612639196861:library(dplyr)
1612649151677:install.packages("opendatatoronto")
1612649158760:install.packages("opendatatoronto")
1612649175486:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612649175507:library(openintro)
1612649176431:## Here you can code your simulation and create the 3 plots.
1612649176478:## Here is some starter code for the simulation:
1612649176521:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1612649176573:n = 50 #pre-specify your sample size
1612649176599:sigma_sq = 1
1612649176652:## Simulating from Normal
1612649176674:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612649177191:## Create your plots below. (I recommend using ggplot)
1612649177254:## Remember the patchwork package might be helpful.
1612649177382:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612649177432:# You may need additional chunks.
1612649177473:# I would recommend not including any of the Cleaning process output here.
1612649177513:install.packages("opendatatoronto")
1612649180239:library(opendatatoronto)
1612649180360:library(dplyr)
1612649180465:# Here you can run a linear regression on your two variables of interest.
1612649180513:#lm(y~x, data = your_data)
1612649180614:# Use this to calculate generate a scatterplot of your variables.
1612649180643:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612649222068:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612649222095:library(openintro)
1612649222121:install.packages("opendatatoronto")
1612649222187:library(opendatatoronto)
1612649222210:library(dplyr)
1612649222277:## Here you can code your simulation and create the 3 plots.
1612649222329:## Here is some starter code for the simulation:
1612649222366:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1612649222386:n = 50 #pre-specify your sample size
1612649222409:sigma_sq = 1
1612649222453:## Simulating from Normal
1612649222477:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612649222822:## Create your plots below. (I recommend using ggplot)
1612649222880:## Remember the patchwork package might be helpful.
1612649222979:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612649223023:# You may need additional chunks.
1612649223066:# I would recommend not including any of the Cleaning process output here.
1612649223205:# Here you can run a linear regression on your two variables of interest.
1612649223252:#lm(y~x, data = your_data)
1612649223367:# Use this to calculate generate a scatterplot of your variables.
1612649223395:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612649228334:install.packages("opendatatoronto")
1612649254359:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612649254398:library(openintro)
1612649255037:install.packages("opendatatoronto")
1612649258093:library(opendatatoronto)
1612649258409:library(dplyr)
1612656884985:install.packages("opendatatoronto")
1612667425250:install.packages("opendatatoronto")
1612717963834:install.packages("opendatatoronto")
1612720642413:install.packages("patchwork")
1612720650143:# Recreate the plots in Figure 20.1:
1612720650165:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612720650186:ggplot(aes(x = T1)) +
1612720650212:theme_classic() +
1612720650234:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612720650257:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612720650277:coord_cartesian(xlim = c(300,1600))
1612720653982:library(tidyverse)
1612720655958:library(patchwork)
1612720656018:set.seed(432354675)
1612720656043:# Functions to compute the estimators
1612720656067:T1 <- function(x) 2 * mean(x) - 1
1612720656089:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612720656112:T3 <- function(x) {2*x[1] - 1}
1612720656226:N <- 1000
1612720656258:n <- 100
1612720656289:M <- 1000 # One million simulations
1612720656349:thesimulations <- list(
1612720656373:T1 = numeric(M),
1612720656393:T2 = numeric(M),
1612720656416:T3 = numeric(M)
1612720656439:)
1612720656465:for (i in 1:M) {
1612720656488:# Do the simulation
1612720656511:# Sample from a discrete uniform (?sample.int):
1612720656531:thesample <- sample.int(N,n,replace = FALSE)
1612720656556:# Record the values of the two estimators:
1612720656580:thesimulations$T1[i] <- T1(thesample)
1612720656611:thesimulations$T2[i] <- T2(thesample)
1612720656637:thesimulations$T3[i] <- T3(thesample)
1612720656660:}
1612720656796:# Recreate the plots in Figure 20.1:
1612720656826:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612720656849:ggplot(aes(x = T1)) +
1612720656871:theme_classic() +
1612720656894:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612720656918:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612720656941:coord_cartesian(xlim = c(300,1600))
1612720657273:midplot <- tibble(T2 = thesimulations$T2) %>%
1612720657295:ggplot(aes(x = T2)) +
1612720657318:theme_classic() +
1612720657342:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612720657370:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612720657393:coord_cartesian(xlim = c(300,1600))
1612720657707:rightplot <- tibble(T3 = thesimulations$T3) %>%
1612720657729:ggplot(aes(x = T3)) +
1612720657751:theme_classic() +
1612720657775:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612720657804:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612720657827:coord_cartesian(xlim = c(300,1600))
1612720658157:leftplot | midplot | rightplot
1612720659039:mse <- function(x) var(x) + (mean(x) - N)^2
1612720659155:mean(thesimulations$T1) - N
1612720659191:mean(thesimulations$T2) - N
1612720659232:mean(thesimulations$T3) - N
1612720659350:var(thesimulations$T1)
1612720659392:var(thesimulations$T2)
1612720659431:var(thesimulations$T3)
1612720659539:mse(thesimulations$T1)
1612720659581:mse(thesimulations$T2)
1612720659621:mse(thesimulations$T3)
1612723409203:## Here you can code your simulation and create the 3 plots.
1612723409248:## Here is some starter code for the simulation:
1612723409288:set.seed(899) # Set this seed to be the last 3 digits of your student number.
1612723409313:n = 50 #pre-specify your sample size
1612723409339:sigma_sq = 1
1612723409403:## Simulating from Normal
1612723409425:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723409732:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723409755:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723409811:N <- 1000
1612723409839:n <- 100
1612723409863:M <- 1000 # One million simulations
1612723409923:thesimulations <- list(
1612723409948:T1 = numeric(M),
1612723409973:T2 = numeric(M),
1612723409995:T3 = numeric(M)
1612723410013:)
1612723410039:for (i in 1:M) {
1612723410060:# Do the simulation
1612723410087:# Sample from a discrete uniform (?sample.int):
1612723410106:thesample <- sample.int(N,n,replace = FALSE)
1612723410127:# Record the values of the two estimators:
1612723410147:thesimulations$T1[i] <- T1(thesample)
1612723410168:thesimulations$T2[i] <- T2(thesample)
1612723410188:thesimulations$T3[i] <- T3(thesample)
1612723410229:}
1612723410360:## Create your plots below. (I recommend using ggplot)
1612723410421:## Remember the patchwork package might be helpful.
1612723419243:## Here you can code your simulation and create the 3 plots.
1612723419280:## Here is some starter code for the simulation:
1612723419320:set.seed(899) # Set this seed to be the last 3 digits of your student number.
1612723419341:sigma_sq = 1
1612723419400:## Simulating from Normal
1612723419423:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723420021:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723420041:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723420096:N <- 1000
1612723420121:n <- 100
1612723420147:M <- 1000 # One million simulations
1612723420209:thesimulations <- list(
1612723420240:T1 = numeric(M),
1612723420264:T2 = numeric(M),
1612723420286:T3 = numeric(M)
1612723420316:)
1612723420347:for (i in 1:M) {
1612723420370:# Do the simulation
1612723420393:# Sample from a discrete uniform (?sample.int):
1612723420416:thesample <- sample.int(N,n,replace = FALSE)
1612723420439:# Record the values of the two estimators:
1612723420466:thesimulations$T1[i] <- T1(thesample)
1612723420488:thesimulations$T2[i] <- T2(thesample)
1612723420508:thesimulations$T3[i] <- T3(thesample)
1612723420530:}
1612723420661:## Create your plots below. (I recommend using ggplot)
1612723420724:## Remember the patchwork package might be helpful.
1612723427508:library(tidyverse)
1612723427528:library(patchwork)
1612723427548:set.seed(432354675)
1612723427572:# Functions to compute the estimators
1612723427593:T1 <- function(x) 2 * mean(x) - 1
1612723427617:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612723427641:T3 <- function(x) {2*x[1] - 1}
1612723427721:N <- 1000
1612723427746:n <- 100
1612723427768:M <- 1000 # One million simulations
1612723427840:thesimulations <- list(
1612723427862:T1 = numeric(M),
1612723427893:T2 = numeric(M),
1612723427914:T3 = numeric(M)
1612723427936:)
1612723427963:for (i in 1:M) {
1612723427985:# Do the simulation
1612723428013:# Sample from a discrete uniform (?sample.int):
1612723428036:thesample <- sample.int(N,n,replace = FALSE)
1612723428060:# Record the values of the two estimators:
1612723428084:thesimulations$T1[i] <- T1(thesample)
1612723428112:thesimulations$T2[i] <- T2(thesample)
1612723428134:thesimulations$T3[i] <- T3(thesample)
1612723428159:}
1612723432304:library(tidyverse)
1612723432328:library(patchwork)
1612723432351:set.seed(432354675)
1612723432378:# Functions to compute the estimators
1612723432402:T1 <- function(x) 2 * mean(x) - 1
1612723432425:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612723432452:T3 <- function(x) {2*x[1] - 1}
1612723432528:N <- 1000
1612723432555:n <- 100
1612723432585:M <- 1000 # One million simulations
1612723432645:thesimulations <- list(
1612723432668:T1 = numeric(M),
1612723432693:T2 = numeric(M),
1612723432717:T3 = numeric(M)
1612723432740:)
1612723432768:for (i in 1:M) {
1612723432792:# Do the simulation
1612723432817:# Sample from a discrete uniform (?sample.int):
1612723432841:thesample <- sample.int(N,n,replace = FALSE)
1612723432867:# Record the values of the two estimators:
1612723432891:thesimulations$T1[i] <- T1(thesample)
1612723432912:thesimulations$T2[i] <- T2(thesample)
1612723432936:thesimulations$T3[i] <- T3(thesample)
1612723432958:}
1612723462577:## Here you can code your simulation and create the 3 plots.
1612723462625:## Here is some starter code for the simulation:
1612723462667:set.seed(899)
1612723462689:sigma_sq = 1
1612723462753:## Simulating from Normal
1612723462776:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723463337:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723463359:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723463414:N <- 1000
1612723463438:n <- 100
1612723463460:M <- 1000 # One million simulations
1612723463513:thesimulations <- list(
1612723463537:T1 = numeric(M),
1612723463562:T2 = numeric(M),
1612723463584:T3 = numeric(M)
1612723463609:)
1612723463639:for (i in 1:M) {
1612723463661:# Do the simulation
1612723463682:# Sample from a discrete uniform (?sample.int):
1612723463704:thesample <- sample.int(N,n,replace = FALSE)
1612723463725:# Record the values of the two estimators:
1612723463747:thesimulations$T1[i] <- T1(thesample)
1612723463773:thesimulations$T2[i] <- T2(thesample)
1612723463797:thesimulations$T3[i] <- T3(thesample)
1612723463819:}
1612723463966:## Create your plots below. (I recommend using ggplot)
1612723464030:## Remember the patchwork package might be helpful.
1612723486755:## Here you can code your simulation and create the 3 plots.
1612723486795:## Here is some starter code for the simulation:
1612723486834:set.seed(899)
1612723486856:sigma_sq = 1
1612723486921:## Simulating from Normal
1612723486946:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723487520:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723487544:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723487601:N <- 1000
1612723487626:n <- 100
1612723487653:M <- 1000 # One million simulations
1612723487717:thesimulations <- list(
1612723487740:T1 = numeric(M),
1612723487763:T2 = numeric(M),
1612723487787:T3 = numeric(M)
1612723487809:)
1612723487840:for (i in 1:M) {
1612723487864:# Do the simulation
1612723487885:# Sample from a discrete uniform (?sample.int):
1612723487909:thesample <- sample.int(N,n,replace = FALSE)
1612723487932:# Record the values of the two estimators:
1612723487956:thesimulations$T1[i] <- T1(thesample)
1612723487980:thesimulations$T2[i] <- T2(thesample)
1612723488004:thesimulations$T3[i] <- T3(thesample)
1612723488027:}
1612723488158:## Create your plots below. (I recommend using ggplot)
1612723488199:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612723488222:ggplot(aes(x = T1)) +
1612723488245:theme_classic() +
1612723488272:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612723488295:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612723488318:coord_cartesian(xlim = c(300,1600))
1612723488629:## Remember the patchwork package might be helpful.
1612723497904:## Here you can code your simulation and create the 3 plots.
1612723497943:## Here is some starter code for the simulation:
1612723497982:set.seed(899)
1612723498007:sigma_sq = 1
1612723498070:## Simulating from Normal
1612723498093:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723498709:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723498738:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723498801:N <- 1000
1612723498827:n <- 100
1612723498851:M <- 1000 # One million simulations
1612723498911:thesimulations <- list(
1612723498935:T1 = numeric(M),
1612723498966:T2 = numeric(M),
1612723498989:T3 = numeric(M)
1612723499010:)
1612723499035:for (i in 1:M) {
1612723499054:# Do the simulation
1612723499074:# Sample from a discrete uniform (?sample.int):
1612723499095:thesample <- sample.int(N,n,replace = FALSE)
1612723499122:# Record the values of the two estimators:
1612723499142:thesimulations$T1[i] <- T1(thesample)
1612723499164:thesimulations$T2[i] <- T2(thesample)
1612723499186:thesimulations$T3[i] <- T3(thesample)
1612723499208:}
1612723499328:## Create your plots below. (I recommend using ggplot)
1612723499364:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612723499385:ggplot(aes(x = T1)) +
1612723499406:theme_classic() +
1612723499427:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612723499448:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612723499469:coord_cartesian(xlim = c(300,1600))
1612723499744:leftplot
1612723499920:## Remember the patchwork package might be helpful.
1612723581756:## Here you can code your simulation and create the 3 plots.
1612723581799:## Here is some starter code for the simulation:
1612723581850:set.seed(899)
1612723581874:sigma_sq = 1
1612723581932:## Simulating from Normal
1612723581955:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723582552:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723582577:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723582641:N <- 1000
1612723582673:n <- 100
1612723582699:M <- 1000 # One million simulations
1612723582755:thesimulations <- list(
1612723582776:T1 = numeric(M),
1612723582797:T2 = numeric(M),
1612723582820:T3 = numeric(M)
1612723582843:)
1612723582869:for (i in 1:M) {
1612723582890:# Do the simulation
1612723582911:# Sample from a discrete uniform (?sample.int):
1612723582937:thesample <- sample.int(N,n,replace = FALSE)
1612723582961:# Record the values of the two estimators:
1612723582984:thesimulations$T1[i] <- T1(thesample)
1612723583006:thesimulations$T2[i] <- T2(thesample)
1612723583028:thesimulations$T3[i] <- T3(thesample)
1612723583054:}
1612723583178:## Create your plots below. (I recommend using ggplot)
1612723583219:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612723583241:ggplot(aes(x = T1)) +
1612723583262:theme_classic() +
1612723583285:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612723583309:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612723583333:#coord_cartesian(xlim = c(300,1600))
1612723583389:leftplot
1612723583466:## Remember the patchwork package might be helpful.
1612723597934:## Here you can code your simulation and create the 3 plots.
1612723597979:## Here is some starter code for the simulation:
1612723598020:set.seed(899)
1612723598044:sigma_sq = 1
1612723598109:## Simulating from Normal
1612723598132:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612723598719:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612723598743:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612723598805:N <- 1000
1612723598838:n <- 100
1612723598863:M <- 1000 # One million simulations
1612723598921:thesimulations <- list(
1612723598946:T1 = numeric(M),
1612723598972:T2 = numeric(M),
1612723598993:T3 = numeric(M)
1612723599018:)
1612723599047:for (i in 1:M) {
1612723599069:# Do the simulation
1612723599092:# Sample from a discrete uniform (?sample.int):
1612723599116:thesample <- sample.int(N,n,replace = FALSE)
1612723599140:# Record the values of the two estimators:
1612723599163:thesimulations$T1[i] <- T1(thesample)
1612723599190:thesimulations$T2[i] <- T2(thesample)
1612723599212:thesimulations$T3[i] <- T3(thesample)
1612723599237:}
1612723599390:## Create your plots below. (I recommend using ggplot)
1612723599429:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612723599452:ggplot(aes(x = T1)) +
1612723599474:theme_classic() +
1612723599499:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612723599767:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612723599789:#coord_cartesian(xlim = c(300,1600))
1612723599852:leftplot
1612723599996:## Remember the patchwork package might be helpful.
1612724814835:## Here you can code your simulation and create the 3 plots.
1612724814877:## Here is some starter code for the simulation:
1612724814920:set.seed(899)
1612724814942:sigma_sq = 1
1612724815002:## Simulating from Normal
1612724815028:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612724815601:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612724815627:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612724815693:N <- 1000
1612724815715:n <- 100
1612724815740:M <- 1000 # One million simulations
1612724815802:thesimulations <- list(
1612724815825:T1 = numeric(M),
1612724815849:T2 = numeric(M),
1612724815872:T3 = numeric(M)
1612724815899:)
1612724815926:for (i in 1:M) {
1612724815949:# Do the simulation
1612724815970:# Sample from a discrete uniform (?sample.int):
1612724815994:thesample <- sample.int(N,n,replace = FALSE)
1612724816017:# Record the values of the two estimators:
1612724816039:thesimulations$T1[i] <- T1(thesample)
1612724816061:thesimulations$T2[i] <- T2(thesample)
1612724816089:thesimulations$T3[i] <- T3(thesample)
1612724816114:}
1612724816268:## Create your plots below. (I recommend using ggplot)
1612724816305:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612724816326:ggplot(aes(x = T1)) +
1612724816346:theme_classic() +
1612724816366:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612724816658:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612724816681:#coord_cartesian(xlim = c(300,1600))
1612724816740:leftplot
1612724816944:## Remember the patchwork package might be helpful.
1612724817011:mse <- function(x) var(x) + (mean(x) - N)^2
1612724822368:## Here you can code your simulation and create the 3 plots.
1612724822411:## Here is some starter code for the simulation:
1612724822464:set.seed(899)
1612724822487:sigma_sq = 1
1612724822551:## Simulating from Normal
1612724822579:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612724823188:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612724823213:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612724823271:N <- 1000
1612724823293:n <- 100
1612724823322:M <- 1000 # One million simulations
1612724823395:thesimulations <- list(
1612724823414:T1 = numeric(M),
1612724823437:T2 = numeric(M),
1612724823457:T3 = numeric(M)
1612724823480:)
1612724823508:for (i in 1:M) {
1612724823530:# Do the simulation
1612724823551:# Sample from a discrete uniform (?sample.int):
1612724823574:thesample <- sample.int(N,n,replace = FALSE)
1612724823599:# Record the values of the two estimators:
1612724823624:thesimulations$T1[i] <- T1(thesample)
1612724823649:thesimulations$T2[i] <- T2(thesample)
1612724823674:thesimulations$T3[i] <- T3(thesample)
1612724823700:}
1612724823836:## Create your plots below. (I recommend using ggplot)
1612724823878:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612724823899:ggplot(aes(x = T1)) +
1612724823923:theme_classic() +
1612724823949:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612724824222:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612724824251:#coord_cartesian(xlim = c(300,1600))
1612724824310:leftplot
1612724824455:## Remember the patchwork package might be helpful.
1612724824516:mse <- function(x) var(x) + (mean(x) - N)^2
1612724824546:mse
1612724829862:View(mse)
1612724848873:mse <- function(x) var(x) + (mean(x) - N)^2
1612724930651:## Here you can code your simulation and create the 3 plots.
1612724930690:## Here is some starter code for the simulation:
1612724930733:set.seed(899)
1612724930757:sigma_sq = 1
1612724930814:## Simulating from Normal
1612724930837:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612724931372:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612724931402:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612724931460:N <- 1000
1612724931482:n <- 100
1612724931504:M <- 1000 # One million simulations
1612724931558:thesimulations <- list(
1612724931578:T1 = numeric(M),
1612724931601:T2 = numeric(M),
1612724931623:T3 = numeric(M)
1612724931641:)
1612724931666:for (i in 1:M) {
1612724931687:# Do the simulation
1612724931710:# Sample from a discrete uniform (?sample.int):
1612724931730:thesample <- sample.int(N,n,replace = FALSE)
1612724931751:# Record the values of the two estimators:
1612724931771:thesimulations$T1[i] <- T1(thesample)
1612724931793:thesimulations$T2[i] <- T2(thesample)
1612724931816:thesimulations$T3[i] <- T3(thesample)
1612724931838:}
1612724931988:## Create your plots below. (I recommend using ggplot)
1612724932029:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612724932063:ggplot(aes(x = T1)) +
1612724932088:theme_classic() +
1612724932112:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612724932442:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612724932467:#coord_cartesian(xlim = c(300,1600))
1612724932526:leftplot
1612724932682:## Remember the patchwork package might be helpful.
1612724932747:mse <- function(x) var(x) + (mean(x) - N)^2
1612724932775:mse
1612724932819:#Bias
1612724932846:mean(thesimulations$T1) - N
1612724932888:mean(thesimulations$T2) - N
1612724932941:#Variance
1612724932965:var(thesimulations$T1)
1612724932999:var(thesimulations$T2)
1612724933049:#MSE
1612724933072:mse(thesimulations$T1)
1612724933111:mse(thesimulations$T2)
1612724942808:## Here you can code your simulation and create the 3 plots.
1612724942850:## Here is some starter code for the simulation:
1612724942894:set.seed(899)
1612724942915:sigma_sq = 1
1612724942981:## Simulating from Normal
1612724943006:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612724943577:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612724943602:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612724943666:N <- 1000
1612724943693:n <- 100
1612724943721:M <- 1000 # One million simulations
1612724943785:thesimulations <- list(
1612724943810:T1 = numeric(M),
1612724943834:T2 = numeric(M),
1612724943861:T3 = numeric(M)
1612724943882:)
1612724943908:for (i in 1:M) {
1612724943929:# Do the simulation
1612724943951:# Sample from a discrete uniform (?sample.int):
1612724943980:thesample <- sample.int(N,n,replace = FALSE)
1612724944001:# Record the values of the two estimators:
1612724944023:thesimulations$T1[i] <- T1(thesample)
1612724944045:thesimulations$T2[i] <- T2(thesample)
1612724944075:thesimulations$T3[i] <- T3(thesample)
1612724944102:}
1612724944230:## Create your plots below. (I recommend using ggplot)
1612724944268:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612724944295:ggplot(aes(x = T1)) +
1612724944318:theme_classic() +
1612724944340:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612724944627:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612724944654:#coord_cartesian(xlim = c(300,1600))
1612724944719:#leftplot
1612724944762:## Remember the patchwork package might be helpful.
1612724944828:mse <- function(x) var(x) + (mean(x) - N)^2
1612724944859:mse
1612724944909:#Bias
1612724944934:mean(thesimulations$T1) - N
1612724944978:mean(thesimulations$T2) - N
1612724945031:#Variance
1612724945059:var(thesimulations$T1)
1612724945095:var(thesimulations$T2)
1612724945148:#MSE
1612724945173:mse(thesimulations$T1)
1612724945209:mse(thesimulations$T2)
1612724964065:## Here you can code your simulation and create the 3 plots.
1612724964108:## Here is some starter code for the simulation:
1612724964153:set.seed(899)
1612724964178:sigma_sq = 1
1612724964243:## Simulating from Normal
1612724964265:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612724964888:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612724964916:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612724964977:N <- 1000
1612724965002:n <- 100
1612724965026:M <- 1000 # One million simulations
1612724965099:thesimulations <- list(
1612724965122:T1 = numeric(M),
1612724965145:T2 = numeric(M),
1612724965169:T3 = numeric(M)
1612724965195:)
1612724965224:for (i in 1:M) {
1612724965249:# Do the simulation
1612724965272:# Sample from a discrete uniform (?sample.int):
1612724965297:thesample <- sample.int(N,n,replace = FALSE)
1612724965319:# Record the values of the two estimators:
1612724965344:thesimulations$T1[i] <- T1(thesample)
1612724965365:thesimulations$T2[i] <- T2(thesample)
1612724965387:thesimulations$T3[i] <- T3(thesample)
1612724965415:}
1612724965543:## Create your plots below. (I recommend using ggplot)
1612724965585:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612724965609:ggplot(aes(x = T1)) +
1612724965631:theme_classic() +
1612724965652:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612724965910:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612724965933:#coord_cartesian(xlim = c(300,1600))
1612724966001:#leftplot
1612724966044:## Remember the patchwork package might be helpful.
1612724966114:mse <- function(x) var(x) + (mean(x) - N)^2
1612724966160:#Bias
1612724966182:mean(thesimulations$T1) - N
1612724966223:mean(thesimulations$T2) - N
1612724966277:#Variance
1612724966300:var(thesimulations$T1)
1612724966337:var(thesimulations$T2)
1612724966391:#MSE
1612724966413:mse(thesimulations$T1)
1612724966454:mse(thesimulations$T2)
1612725202703:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612725202742:# You may need additional chunks.
1612725202784:# I would recommend not including any of the Cleaning process output here.
1612725202826:library(opendatatoronto)
1612725202865:library(dplyr)
1612725202903:# get package
1612725202927:package <- show_package("9cd09dd7-4453-43bd-af7a-caf42e565103")
1612725203392:package
1612725203459:# get all resources for this package
1612725203480:resources <- list_package_resources("9cd09dd7-4453-43bd-af7a-caf42e565103")
1612725203561:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612725203583:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612725203648:# load the first datastore resource as a sample
1612725203671:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612725204409:data
1612725207713:View(data)
1612726838095:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612726838139:# You may need additional chunks.
1612726838184:# I would recommend not including any of the Cleaning process output here.
1612726838225:library(opendatatoronto)
1612726838248:library(dplyr)
1612726838291:# get package
1612726838312:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726838676:package
1612726838745:# get all resources for this package
1612726838769:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726838897:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612726838928:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612726838978:# load the first datastore resource as a sample
1612726839002:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612726840891:data
1612726866744:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612726866795:# You may need additional chunks.
1612726866838:# I would recommend not including any of the Cleaning process output here.
1612726866883:# get package
1612726866907:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726866980:package
1612726867043:# get all resources for this package
1612726867064:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726867146:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612726867177:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612726867223:# load the first datastore resource as a sample
1612726867245:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612726868724:glimpse(data)
1612726873402:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612726873448:library(openintro)
1612726873548:library(opendatatoronto)
1612726873576:library(dplyr)
1612726873602:library(patchwork)
1612726873676:## Here you can code your simulation and create the 3 plots.
1612726873725:## Here is some starter code for the simulation:
1612726873771:set.seed(899)
1612726873796:sigma_sq = 1
1612726873864:## Simulating from Normal
1612726873887:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612726874500:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612726874522:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612726874586:N <- 1000
1612726874613:n <- 100
1612726874636:M <- 1000 # One million simulations
1612726874706:thesimulations <- list(
1612726874727:T1 = numeric(M),
1612726874748:T2 = numeric(M),
1612726874769:T3 = numeric(M)
1612726874797:)
1612726874821:for (i in 1:M) {
1612726874844:# Do the simulation
1612726874868:# Sample from a discrete uniform (?sample.int):
1612726874892:thesample <- sample.int(N,n,replace = FALSE)
1612726874914:# Record the values of the two estimators:
1612726874937:thesimulations$T1[i] <- T1(thesample)
1612726874959:thesimulations$T2[i] <- T2(thesample)
1612726874983:thesimulations$T3[i] <- T3(thesample)
1612726875006:}
1612726875163:## Create your plots below. (I recommend using ggplot)
1612726875204:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612726875230:ggplot(aes(x = T1)) +
1612726875256:theme_classic() +
1612726875281:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612726875566:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612726875592:#coord_cartesian(xlim = c(300,1600))
1612726875658:#leftplot
1612726875699:## Remember the patchwork package might be helpful.
1612726875766:mse <- function(x) var(x) + (mean(x) - N)^2
1612726875809:#Bias
1612726875833:mean(thesimulations$T1) - N
1612726875872:mean(thesimulations$T2) - N
1612726875925:#Variance
1612726875950:var(thesimulations$T1)
1612726875988:var(thesimulations$T2)
1612726876040:#MSE
1612726876064:mse(thesimulations$T1)
1612726876100:mse(thesimulations$T2)
1612726876207:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612726876252:# You may need additional chunks.
1612726876291:# I would recommend not including any of the Cleaning process output here.
1612726876332:# get package
1612726876352:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726876417:package
1612726876481:# get all resources for this package
1612726876504:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612726876573:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612726876594:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612726876641:# load the first datastore resource as a sample
1612726876663:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612726878066:glimpse(data)
1612726878318:# Here you can run a linear regression on your two variables of interest.
1612726878367:#lm(y~x, data = your_data)
1612726878478:# Use this to calculate generate a scatterplot of your variables.
1612726878510:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612726884503:View(data)
1612727316731:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612727316770:# You may need additional chunks.
1612727316807:# I would recommend not including any of the Cleaning process output here.
1612727316843:# get package
1612727316863:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612727317232:package
1612727317300:# get all resources for this package
1612727317327:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612727317447:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612727317469:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612727317518:# load the first datastore resource as a sample
1612727317539:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612727319461:glimpse(data)
1612739847766:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612739847809:library(openintro)
1612739847831:library(opendatatoronto)
1612739847852:library(dplyr)
1612739847876:library(patchwork)
1612739847951:## Here you can code your simulation and create the 3 plots.
1612739848002:## Here is some starter code for the simulation:
1612739848049:set.seed(899)
1612739848075:sigma_sq = 1
1612739848137:## Simulating from Normal
1612739848164:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612739848744:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612739848771:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612739848871:N <- 1000
1612739848896:n <- 100
1612739848924:M <- 1000 # One million simulations
1612739848994:thesimulations <- list(
1612739849019:T1 = numeric(M),
1612739849048:T2 = numeric(M),
1612739849072:T3 = numeric(M)
1612739849095:)
1612739849124:for (i in 1:M) {
1612739849145:# Do the simulation
1612739849171:# Sample from a discrete uniform (?sample.int):
1612739849199:thesample <- sample.int(N,n,replace = FALSE)
1612739849221:# Record the values of the two estimators:
1612739849243:thesimulations$T1[i] <- T1(thesample)
1612739849284:thesimulations$T2[i] <- T2(thesample)
1612739849305:thesimulations$T3[i] <- T3(thesample)
1612739849330:}
1612739849704:## Create your plots below. (I recommend using ggplot)
1612739849745:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612739849770:ggplot(aes(x = T1)) +
1612739849808:theme_classic() +
1612739849836:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612739850121:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612739850144:#coord_cartesian(xlim = c(300,1600))
1612739850196:#leftplot
1612739850230:## Remember the patchwork package might be helpful.
1612739850280:mse <- function(x) var(x) + (mean(x) - N)^2
1612739850314:#Bias
1612739850336:mean(thesimulations$T1) - N
1612739850372:mean(thesimulations$T2) - N
1612739850420:#Variance
1612739850440:var(thesimulations$T1)
1612739850476:var(thesimulations$T2)
1612739850519:#MSE
1612739850541:mse(thesimulations$T1)
1612739850576:mse(thesimulations$T2)
1612739850667:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612739850719:# You may need additional chunks.
1612739850758:# I would recommend not including any of the Cleaning process output here.
1612739850799:# get package
1612739850821:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612739851163:package
1612739851227:# get all resources for this package
1612739851252:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612739851341:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612739851367:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612739851415:# load the first datastore resource as a sample
1612739851438:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612739852935:data
1612739853157:# Here you can run a linear regression on your two variables of interest.
1612739853205:#lm(y~x, data = your_data)
1612739853311:# Use this to calculate generate a scatterplot of your variables.
1612739853339:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612739895879:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612739895916:library(openintro)
1612739895941:library(opendatatoronto)
1612739895964:library(dplyr)
1612739895984:library(patchwork)
1612739896004:library(tidyverse)
1612739896068:## Here you can code your simulation and create the 3 plots.
1612739896115:## Here is some starter code for the simulation:
1612739896154:set.seed(899)
1612739896178:sigma_sq = 1
1612739896236:## Simulating from Normal
1612739896258:#rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612739896285:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612739896307:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612739896366:N <- 1000
1612739896396:n <- 100
1612739896421:M <- 1000 # One million simulations
1612739896479:thesimulations <- list(
1612739896503:T1 = numeric(M),
1612739896526:T2 = numeric(M),
1612739896550:T3 = numeric(M)
1612739896572:)
1612739896597:for (i in 1:M) {
1612739896623:# Do the simulation
1612739896643:# Sample from a discrete uniform (?sample.int):
1612739896664:thesample <- sample.int(N,n,replace = FALSE)
1612739896685:# Record the values of the two estimators:
1612739896707:thesimulations$T1[i] <- T1(thesample)
1612739896729:thesimulations$T2[i] <- T2(thesample)
1612739896750:}
1612739896887:## Create your plots below. (I recommend using ggplot)
1612739896923:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612739896948:ggplot(aes(x = T1)) +
1612739896970:theme_classic() +
1612739896991:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612739897285:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612739897309:#coord_cartesian(xlim = c(300,1600))
1612739897364:#leftplot
1612739897406:## Remember the patchwork package might be helpful.
1612739897466:mse <- function(x) var(x) + (mean(x) - N)^2
1612739897509:#Bias
1612739897531:mean(thesimulations$T1) - N
1612739897567:mean(thesimulations$T2) - N
1612739897616:#Variance
1612739897637:var(thesimulations$T1)
1612739897670:var(thesimulations$T2)
1612739897716:#MSE
1612739897741:mse(thesimulations$T1)
1612739897774:mse(thesimulations$T2)
1612739897865:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612739897915:# You may need additional chunks.
1612739897960:# I would recommend not including any of the Cleaning process output here.
1612739898006:# get package
1612739898035:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612739898101:package
1612739898176:# get all resources for this package
1612739898196:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612739898263:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612739898285:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612739898329:# load the first datastore resource as a sample
1612739898349:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612739899633:data
1612739899834:# Here you can run a linear regression on your two variables of interest.
1612739899877:#lm(y~x, data = your_data)
1612739899973:# Use this to calculate generate a scatterplot of your variables.
1612739900013:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612800379291:install.packages(c("opendatatoronto", "patchwork"))
1612800908868:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612800908906:library(openintro)
1612800909593:library(opendatatoronto)
1612800909850:library(dplyr)
1612800909931:library(patchwork)
1612800909987:library(tidyverse)
1612800911227:## Here you can code your simulation and create the 3 plots.
1612800911275:## Here is some starter code for the simulation:
1612800911312:set.seed(899)
1612800911333:sigma_sq = 1
1612800911402:## Simulating from Normal
1612800911426:#rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612800911447:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612800911470:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612800911560:N <- 1000
1612800911590:n <- 100
1612800911616:M <- 1000 # One million simulations
1612800911676:thesimulations <- list(
1612800911705:T1 = numeric(M),
1612800911724:T2 = numeric(M),
1612800911750:T3 = numeric(M)
1612800911773:)
1612800911796:for (i in 1:M) {
1612800911822:# Do the simulation
1612800911843:# Sample from a discrete uniform (?sample.int):
1612800911862:thesample <- sample.int(N,n,replace = FALSE)
1612800911881:# Record the values of the two estimators:
1612800911901:thesimulations$T1[i] <- T1(thesample)
1612800911924:thesimulations$T2[i] <- T2(thesample)
1612800911945:}
1612800912090:## Create your plots below. (I recommend using ggplot)
1612800912131:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612800912153:ggplot(aes(x = T1)) +
1612800912173:theme_classic() +
1612800912192:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612800912493:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612800912515:#coord_cartesian(xlim = c(300,1600))
1612800912571:#leftplot
1612800912616:## Remember the patchwork package might be helpful.
1612800912675:mse <- function(x) var(x) + (mean(x) - N)^2
1612800912714:#Bias
1612800912735:mean(thesimulations$T1) - N
1612800912771:mean(thesimulations$T2) - N
1612800912821:#Variance
1612800912841:var(thesimulations$T1)
1612800912871:var(thesimulations$T2)
1612800912919:#MSE
1612800912939:mse(thesimulations$T1)
1612800912976:mse(thesimulations$T2)
1612800913073:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612800913117:# You may need additional chunks.
1612800913157:# I would recommend not including any of the Cleaning process output here.
1612800913193:# get package
1612800913215:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612800913689:package
1612800913757:# get all resources for this package
1612800913778:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612800913853:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612800913874:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612800913922:# load the first datastore resource as a sample
1612800913941:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612800915486:data
1612800915669:data %>%
1612800915695:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612800915716:geom_point()
1612800916053:# Here you can run a linear regression on your two variables of interest.
1612800916097:#lm(y~x, data = your_data)
1612800916186:# Use this to calculate generate a scatterplot of your variables.
1612800916223:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612801429130:data %>%
1612801429152:ggplot(aes(x = Population, y=Assault_AVG))+
1612801429177:geom_point()
1612801442582:data %>%
1612801442603:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612801442628:geom_point()
1612801455875:data %>%
1612801455899:ggplot(aes(x = Population, y=Assault_AVG))+
1612801455923:geom_point()
1612801513320:data %>%
1612801513341:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612801513361:geom_point()
1612801595613:data %>%
1612801595635:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612801595657:geom_point(col = "blue")
1612801651226:# Here you can run a linear regression on your two variables of interest.
1612801651265:lm(AutoTheft_AVG~Population, data = your_data)
1612801659207:# Here you can run a linear regression on your two variables of interest.
1612801659247:lm(AutoTheft_AVG~Population, data = data)
1612801663795:# Here you can run a linear regression on your two variables of interest.
1612801663833:lm(AutoTheft_AVG~Population, data = data)
1612801663914:lm
1612801691833:# Here you can run a linear regression on your two variables of interest.
1612801691872:lm(AutoTheft_AVG~Population, data = data)
1612801745822:# Here you can run a linear regression on your two variables of interest.
1612801745861:lm(AutoTheft_AVG~population, data = data)
1612801755159:# Here you can run a linear regression on your two variables of interest.
1612801755204:lm(AutoTheft_AVG~Population, data = data)
1612801765775:# Here you can run a linear regression on your two variables of interest.
1612801765814:hello <- lm(AutoTheft_AVG~Population, data = data)
1612801765882:hello
1612801768245:View(hello)
1612801792491:# Here you can run a linear regression on your two variables of interest.
1612801792532:hello <- lm(AutoTheft_AVG ~ Population, data = data)
1612801792613:hello
1612801803307:# Here you can run a linear regression on your two variables of interest.
1612801803347:hello <- lm(AutoTheft_AVG ~ Population, data = dataset)
1612801809095:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612801809137:# You may need additional chunks.
1612801809178:# I would recommend not including any of the Cleaning process output here.
1612801809215:# get package
1612801809237:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801809763:package
1612801809833:# get all resources for this package
1612801809854:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801809931:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612801809953:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612801810002:# load the first datastore resource as a sample
1612801810026:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612801811702:dataset
1612801818289:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612801818336:# You may need additional chunks.
1612801818375:# I would recommend not including any of the Cleaning process output here.
1612801818419:# get package
1612801818442:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801818494:package
1612801818561:# get all resources for this package
1612801818584:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801818658:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612801818686:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612801818736:# load the first datastore resource as a sample
1612801818761:dataset <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612801820041:dataset
1612801832325:# Here you can run a linear regression on your two variables of interest.
1612801832377:hello <- lm(AutoTheft_AVG ~ Population, data = dataset)
1612801832447:hello
1612801857514:# Here you can run a linear regression on your two variables of interest.
1612801857556:model <- lm(AutoTheft_AVG ~ Population, data = data)
1612801857641:summary(model)
1612801861909:# Here you can run a linear regression on your two variables of interest.
1612801861952:model <- lm(AutoTheft_AVG ~ Population, data = data)
1612801862025:summary(model)
1612801877920:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612801877965:library(openintro)
1612801877990:library(opendatatoronto)
1612801878014:library(dplyr)
1612801878041:library(patchwork)
1612801878070:library(tidyverse)
1612801878138:## Here you can code your simulation and create the 3 plots.
1612801878193:## Here is some starter code for the simulation:
1612801878239:set.seed(899)
1612801878263:sigma_sq = 1
1612801878330:## Simulating from Normal
1612801878352:#rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612801878392:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612801878417:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612801878480:N <- 1000
1612801878504:n <- 100
1612801878533:M <- 1000 # One million simulations
1612801878600:thesimulations <- list(
1612801878625:T1 = numeric(M),
1612801878649:T2 = numeric(M),
1612801878673:T3 = numeric(M)
1612801878695:)
1612801878722:for (i in 1:M) {
1612801878744:# Do the simulation
1612801878769:# Sample from a discrete uniform (?sample.int):
1612801878792:thesample <- sample.int(N,n,replace = FALSE)
1612801878817:# Record the values of the two estimators:
1612801878839:thesimulations$T1[i] <- T1(thesample)
1612801878862:thesimulations$T2[i] <- T2(thesample)
1612801878885:}
1612801879012:## Create your plots below. (I recommend using ggplot)
1612801879062:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612801879088:ggplot(aes(x = T1)) +
1612801879112:theme_classic() +
1612801879137:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612801879433:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612801879455:#coord_cartesian(xlim = c(300,1600))
1612801879517:#leftplot
1612801879560:## Remember the patchwork package might be helpful.
1612801879619:mse <- function(x) var(x) + (mean(x) - N)^2
1612801879663:#Bias
1612801879687:mean(thesimulations$T1) - N
1612801879721:mean(thesimulations$T2) - N
1612801879772:#Variance
1612801879796:var(thesimulations$T1)
1612801879831:var(thesimulations$T2)
1612801879881:#MSE
1612801879905:mse(thesimulations$T1)
1612801879946:mse(thesimulations$T2)
1612801880096:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612801880149:# You may need additional chunks.
1612801880193:# I would recommend not including any of the Cleaning process output here.
1612801880239:# get package
1612801880264:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801880330:package
1612801880399:# get all resources for this package
1612801880423:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612801880505:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612801880532:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612801880584:# load the first datastore resource as a sample
1612801880608:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612801882020:data
1612801882220:data %>%
1612801882255:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612801882282:geom_point(col = "blue")
1612801882531:# Here you can run a linear regression on your two variables of interest.
1612801882577:model <- lm(AutoTheft_AVG ~ Population, data = data)
1612801882648:summary(model)
1612801883111:# Use this to calculate generate a scatterplot of your variables.
1612801883141:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802057357:# Here you can run a linear regression on your two variables of interest.
1612802057395:model <- lm(AutoTheft_AVG ~ Population, data = data)
1612802057466:summary(model)
1612802069293:# Here you can run a linear regression on your two variables of interest.
1612802069336:model <- lm(AutoTheft_AVG ~ Population, data = data)
1612802069402:summary(model)
1612802084527:# Here you can run a linear regression on your two variables of interest.
1612802084574:lm(AutoTheft_AVG ~ Population, data = data)
1612802130749:# Here you can run a linear regression on your two variables of interest.
1612802130799:lm(AutoTheft_AVG ~ Population, data = data)
1612802892637:# Use this to calculate generate a scatterplot of your variables.
1612802892657:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802892694:data %>%
1612802892720:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612802892744:geom_point(col = "blue")
1612802892873:geom_abline(slope = 0.001457, intercept = -0.598671)
1612802905280:# Use this to calculate generate a scatterplot of your variables.
1612802905301:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802905339:data %>%
1612802905358:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612802905380:geom_point(col = "blue")
1612802905535:geom_abline(slope = 0.001457, intercept = -0.598671)
1612802932885:# Use this to calculate generate a scatterplot of your variables.
1612802932908:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802932953:data %>%
1612802932977:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612802933005:geom_point(col = "blue")
1612802933132:geom_abline(slope = 0.001457, intercept = -0.598671)
1612802957533:# Use this to calculate generate a scatterplot of your variables.
1612802957557:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802957608:data %>%
1612802957631:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612802957652:geom_point(col = "blue")+
1612802957675:geom_abline(slope = 0.001457, intercept = -0.598671)
1612802968833:# Use this to calculate generate a scatterplot of your variables.
1612802968858:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612802968902:data %>%
1612802968929:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612802968954:geom_point(col = "blue")+
1612802968980:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1612805639376:# Use this to calculate generate a scatterplot of your variables.
1612805639403:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612805639451:data %>%
1612805639475:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612805639502:geom_point(col = "blue")+
1612805639526:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1612808441704:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612808441742:library(openintro)
1612808441764:library(opendatatoronto)
1612808441787:library(dplyr)
1612808441807:library(patchwork)
1612808441830:library(tidyverse)
1612808441894:## Here you can code your simulation and create the 3 plots.
1612808441944:## Here is some starter code for the simulation:
1612808441981:set.seed(899)
1612808442003:sigma_sq = 1
1612808442065:## Simulating from Normal
1612808442095:#rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612808442119:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612808442144:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612808442205:N <- 1000
1612808442237:n <- 100
1612808442263:M <- 1000 # One million simulations
1612808442327:thesimulations <- list(
1612808442354:T1 = numeric(M),
1612808442381:T2 = numeric(M),
1612808442404:T3 = numeric(M)
1612808442429:)
1612808442460:for (i in 1:M) {
1612808442482:# Do the simulation
1612808442503:# Sample from a discrete uniform (?sample.int):
1612808442523:thesample <- sample.int(N,n,replace = FALSE)
1612808442547:# Record the values of the two estimators:
1612808442570:thesimulations$T1[i] <- T1(thesample)
1612808442590:thesimulations$T2[i] <- T2(thesample)
1612808442610:}
1612808442741:## Create your plots below. (I recommend using ggplot)
1612808442778:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612808442800:ggplot(aes(x = T1)) +
1612808442821:theme_classic() +
1612808442844:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612808443139:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612808443163:#coord_cartesian(xlim = c(300,1600))
1612808443225:#leftplot
1612808443264:## Remember the patchwork package might be helpful.
1612808443320:mse <- function(x) var(x) + (mean(x) - N)^2
1612808443360:#Bias
1612808443384:mean(thesimulations$T1) - N
1612808443419:mean(thesimulations$T2) - N
1612808443466:#Variance
1612808443491:var(thesimulations$T1)
1612808443529:var(thesimulations$T2)
1612808443575:#MSE
1612808443596:mse(thesimulations$T1)
1612808443633:mse(thesimulations$T2)
1612808443725:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612808443772:# You may need additional chunks.
1612808443813:# I would recommend not including any of the Cleaning process output here.
1612808443853:# get package
1612808443875:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612808444210:package
1612808444272:# get all resources for this package
1612808444297:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612808444364:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612808444387:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612808444430:# load the first datastore resource as a sample
1612808444453:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612808446100:data
1612808446287:data %>%
1612808446317:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612808446338:geom_point(col = "blue")
1612808446550:# Here you can run a linear regression on your two variables of interest.
1612808446595:lm(AutoTheft_AVG ~ Population, data = data)
1612808446745:# Use this to calculate generate a scatterplot of your variables.
1612808446773:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612808446811:data %>%
1612808446831:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612808446850:geom_point(col = "blue")+
1612808446871:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1612808658875:## Here you can code your simulation and create the 3 plots.
1612808658913:## Here is some starter code for the simulation:
1612808658950:set.seed(899)
1612808658970:sigma_sq = 1
1612808659023:## Simulating from Normal
1612808659043:#rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612808659064:T1 <- function(x) (1/(length(x)-1))*sum(x-mean(x))^2
1612808659087:T2 <- function(x) (1/(length(x)))*sum(x-mean(x))^2
1612808659142:N <- 1000
1612808659167:n <- 100
1612808659191:M <- 1000 # One million simulations
1612808659257:thesimulations <- list(
1612808659277:T1 = numeric(M),
1612808659298:T2 = numeric(M),
1612808659319:T3 = numeric(M)
1612808659344:)
1612808659369:for (i in 1:M) {
1612808659391:# Do the simulation
1612808659414:# Sample from a discrete uniform (?sample.int):
1612808659437:thesample <- sample.int(N,n,replace = FALSE)
1612808659463:# Record the values of the two estimators:
1612808659488:thesimulations$T1[i] <- T1(thesample)
1612808659511:thesimulations$T2[i] <- T2(thesample)
1612808659533:}
1612808659669:## Create your plots below. (I recommend using ggplot)
1612808659705:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612808659725:ggplot(aes(x = T1)) +
1612808659743:theme_classic() +
1612808659764:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612808660023:#scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612808660046:#coord_cartesian(xlim = c(300,1600))
1612808660099:leftplot
1612808660251:## Remember the patchwork package might be helpful.
1612808660311:mse <- function(x) var(x) + (mean(x) - N)^2
1612808660350:#Bias
1612808660377:mean(thesimulations$T1) - N
1612808660413:mean(thesimulations$T2) - N
1612808660465:#Variance
1612808660489:var(thesimulations$T1)
1612808660533:var(thesimulations$T2)
1612808660581:#MSE
1612808660610:mse(thesimulations$T1)
1612808660646:mse(thesimulations$T2)
1612812894469:## Here you can code your simulation and create the 3 plots.
1612812894511:## Here is some starter code for the simulation:
1612812894551:set.seed(899)
1612812894575:sigma_sq = 1
1612812894599:## Simulating from Normal
1612812894656:# Functions to compute the estimators
1612812894678:T1 <- function(x) 2 * mean(x) - 1
1612812894701:T2 <- function(x) ( (length(x) + 1)/length(x) ) * max(x) - 1
1612812894739:N <- 1000
1612812894767:n <- 100
1612812894789:M <- 1000 # One million simulations
1612812894852:thesimulations <- list(
1612812894876:T1 = numeric(M),
1612812894897:T2 = numeric(M)
1612812894919:)
1612812894946:for (i in 1:M) {
1612812894967:# Do the simulation
1612812894990:# Sample from a discrete uniform (?sample.int):
1612812895011:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612812895031:# Record the values of the two estimators:
1612812895052:thesimulations$T1[i] <- T1(thesample)
1612812895076:thesimulations$T2[i] <- T2(thesample)
1612812895102:}
1612812895176:#Bias
1612812895220:Bias_T1 <- function()
1612812895243:Bias_T2 <- function(s, n) -(s^2)/n
1612812895287:#Variance
1612812895364:#MSE
1612812895442:## Create your plots below. (I recommend using ggplot)
1612812895502:## Remember the patchwork package might be helpful.
1612813966520:## Here you can code your simulation and create the 3 plots.
1612813966556:## Here is some starter code for the simulation:
1612813966593:set.seed(899)
1612813966615:sigma_sq = 1
1612813966637:## Simulating from Normal
1612813966706:# Functions to compute the estimators
1612813966731:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612813966754:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612813966793:N <- 1000
1612813966815:n <- 100
1612813966837:M <- 1000 # One million simulations
1612813966890:sim <- list(
1612813966909:T1 = numeric(M),
1612813966930:T2 = numeric(M)
1612813966952:)
1612813966975:for (i in 1:M) {
1612813966995:# Do the simulation
1612813967018:# Sample from Normal
1612813967040:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612813967063:# Record the values of the two estimators:
1612813967084:thesimulations$T1[i] <- T1(thesample)
1612813967105:thesimulations$T2[i] <- T2(thesample)
1612813967125:}
1612813967211:#Bias
1612813967249:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612813967274:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612813967312:#Variance
1612813967350:Var_T1 <- function(T1) var(sim$T1)
1612813967371:Var_T2 <- function(T2) var(sim$T2)
1612813967425:#MSE
1612813967461:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612813967483:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612813967536:## Create your plots below. (I recommend using ggplot)
1612813967593:## Remember the patchwork package might be helpful.
1612814144893:## Here you can code your simulation and create the 3 plots.
1612814144933:## Here is some starter code for the simulation:
1612814144974:set.seed(899)
1612814144999:sigma_sq = 1
1612814145024:## Simulating from Normal
1612814145080:# Functions to compute the estimators
1612814145100:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814145122:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814145163:N <- 1000
1612814145187:n <- 100
1612814145210:M <- 1000 # One million simulations
1612814145268:sim <- list(
1612814145293:T1 = numeric(M),
1612814145316:T2 = numeric(M)
1612814145338:)
1612814145364:for (i in 1:M) {
1612814145384:# Do the simulation
1612814145404:# Sample from Normal
1612814145425:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814145446:# Record the values of the two estimators:
1612814145466:thesimulations$T1[i] <- T1(thesample)
1612814145488:thesimulations$T2[i] <- T2(thesample)
1612814145509:}
1612814145591:#Bias
1612814145628:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814145649:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814145697:#Variance
1612814145734:Var_T1 <- function(T1) var(sim$T1)
1612814145756:Var_T2 <- function(T2) var(sim$T2)
1612814145808:#MSE
1612814145844:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814145866:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814145920:## Create your plots below. (I recommend using ggplot)
1612814145958:# Write a function to make the plot of p for fixed n
1612814145980:make_plot <- function(n) {
1612814146005:tibble(x = c(0,1)) %>%
1612814146030:ggplot(aes(x = x)) +
1612814146052:theme_bw() +
1612814146075:stat_function(fun = MSE_T1,args = list(n = n)) +
1612814146098:stat_function(fun = MSE_T2,args = list(n = n),linetype = "dashed") +
1612814146120:labs(title = paste0("MSE for n = ",n),
1612814146145:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814146169:x = "p",
1612814146191:y = "MSE"
1612814146213:)
1612814146237:}
1612814146258:make_plot(1)
1612814146424:## Remember the patchwork package might be helpful.
1612814206656:## Here you can code your simulation and create the 3 plots.
1612814206696:## Here is some starter code for the simulation:
1612814206744:set.seed(899)
1612814206769:sigma_sq = 1
1612814206794:## Simulating from Normal
1612814206842:# Functions to compute the estimators
1612814206861:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814206880:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814206915:N <- 1000
1612814206938:n <- 100
1612814206960:M <- 1000 # One million simulations
1612814207020:sim <- list(
1612814207043:T1 = numeric(M),
1612814207066:T2 = numeric(M)
1612814207084:)
1612814207106:for (i in 1:M) {
1612814207131:# Do the simulation
1612814207151:# Sample from Normal
1612814207169:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814207189:# Record the values of the two estimators:
1612814207212:thesimulations$T1[i] <- T1(thesample)
1612814207234:thesimulations$T2[i] <- T2(thesample)
1612814207253:}
1612814207341:#Bias
1612814207381:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814207403:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814207439:#Variance
1612814207476:Var_T1 <- function(T1) var(sim$T1)
1612814207497:Var_T2 <- function(T2) var(sim$T2)
1612814207549:#MSE
1612814207589:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814207610:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814207663:## Create your plots below. (I recommend using ggplot)
1612814207699:# Write a function to make the plot of p for fixed n
1612814207722:make_plot <- function(sigma_sq) {
1612814207744:tibble(x = c(0,1)) %>%
1612814207763:ggplot(aes(x = x)) +
1612814207786:theme_bw() +
1612814207807:stat_function(fun = MSE_T1,args = list(n = n)) +
1612814207827:stat_function(fun = MSE_T2,args = list(n = n),linetype = "dashed") +
1612814207846:labs(title = paste0("MSE for n = ",n),
1612814207868:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814207893:x = "p",
1612814207915:y = "MSE"
1612814207936:)
1612814207955:}
1612814207977:make_plot(1)
1612814208110:## Remember the patchwork package might be helpful.
1612814305233:## Here you can code your simulation and create the 3 plots.
1612814305276:## Here is some starter code for the simulation:
1612814305317:set.seed(899)
1612814305337:sigma_sq = 1
1612814305367:## Simulating from Normal
1612814305424:# Functions to compute the estimators
1612814305449:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814305476:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814305521:N <- 1000
1612814305545:n <- 100
1612814305573:M <- 1000 # One million simulations
1612814305630:sim <- list(
1612814305654:T1 = numeric(M),
1612814305679:T2 = numeric(M)
1612814305702:)
1612814305727:for (i in 1:M) {
1612814305751:# Do the simulation
1612814305778:# Sample from Normal
1612814305799:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814305820:# Record the values of the two estimators:
1612814305840:thesimulations$T1[i] <- T1(thesample)
1612814305861:thesimulations$T2[i] <- T2(thesample)
1612814305882:}
1612814305964:#Bias
1612814306004:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814306027:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814306072:#Variance
1612814306122:Var_T1 <- function(T1) var(sim$T1)
1612814306145:Var_T2 <- function(T2) var(sim$T2)
1612814306217:#MSE
1612814306258:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814306284:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814306353:## Create your plots below. (I recommend using ggplot)
1612814306396:# Write a function to make the plot of p for fixed n
1612814306419:make_plot <- function(sigma_sq) {
1612814306442:tibble(x = c(0,1)) %>%
1612814306464:ggplot(aes(x = x)) +
1612814306485:theme_bw() +
1612814306504:stat_function(fun = Var_T1,args = list(n = n)) +
1612814306524:stat_function(fun = Var_T2,args = list(n = n),linetype = "dashed") +
1612814306545:labs(title = paste0("MSE for n = ",n),
1612814306567:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814306588:x = "p",
1612814306610:y = "MSE"
1612814306631:)
1612814306656:}
1612814306680:make_plot(1)
1612814306802:## Remember the patchwork package might be helpful.
1612814331448:## Here you can code your simulation and create the 3 plots.
1612814331486:## Here is some starter code for the simulation:
1612814331526:set.seed(899)
1612814331549:sigma_sq = 1
1612814331574:## Simulating from Normal
1612814331653:# Functions to compute the estimators
1612814331679:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814331706:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814331742:N <- 1000
1612814331767:n <- 100
1612814331791:M <- 1000 # One million simulations
1612814331848:sim <- list(
1612814331871:T1 = numeric(M),
1612814331894:T2 = numeric(M)
1612814331918:)
1612814331945:for (i in 1:M) {
1612814331967:# Do the simulation
1612814331986:# Sample from Normal
1612814332008:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814332028:# Record the values of the two estimators:
1612814332050:thesimulations$T1[i] <- T1(thesample)
1612814332073:thesimulations$T2[i] <- T2(thesample)
1612814332096:}
1612814332197:#Bias
1612814332236:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814332264:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814332307:#Variance
1612814332347:Var_T1 <- function(T1) var(sim$T1)
1612814332374:Var_T2 <- function(T2) var(sim$T2)
1612814332432:#MSE
1612814332473:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814332500:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814332557:## Create your plots below. (I recommend using ggplot)
1612814332599:# Write a function to make the plot of p for fixed n
1612814332620:make_plot <- function(sigma_sq) {
1612814332643:tibble(x = c(0,1)) %>%
1612814332665:ggplot(aes(x = x)) +
1612814332685:theme_bw() +
1612814332704:stat_function(fun = Var_T1,args = list(sigma_sq = 1)) +
1612814332725:stat_function(fun = Var_T2,args = list(sigma_sq = 1),linetype = "dashed") +
1612814332745:labs(title = paste0("MSE for n = ",n),
1612814332765:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814332784:x = "p",
1612814332806:y = "MSE"
1612814332826:)
1612814332847:}
1612814332869:make_plot(1)
1612814333003:## Remember the patchwork package might be helpful.
1612814436790:## Here you can code your simulation and create the 3 plots.
1612814436828:## Here is some starter code for the simulation:
1612814436867:set.seed(899)
1612814436887:sigma_sq = 1
1612814436909:## Simulating from Normal
1612814436967:# Functions to compute the estimators
1612814436988:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814437012:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814437054:N <- 1000
1612814437084:n <- 100
1612814437110:M <- 1000 # One million simulations
1612814437174:sim <- list(
1612814437196:T1 = numeric(M),
1612814437218:T2 = numeric(M)
1612814437238:)
1612814437263:for (i in 1:M) {
1612814437284:# Do the simulation
1612814437307:# Sample from Normal
1612814437329:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814437350:# Record the values of the two estimators:
1612814437372:thesimulations$T1[i] <- T1(thesample)
1612814437393:thesimulations$T2[i] <- T2(thesample)
1612814437414:}
1612814437496:#Bias
1612814437536:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814437560:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814437600:#Variance
1612814437642:Var_T1 <- function(T1) var(sim$T1)
1612814437664:Var_T2 <- function(T2) var(sim$T2)
1612814437716:#MSE
1612814437752:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814437774:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814437833:## Create your plots below. (I recommend using ggplot)
1612814437871:# Write a function to make the plot of p for fixed n
1612814437892:make_plot <- function(sigma_sq) {
1612814437915:tibble(x = c(0,1)) %>%
1612814437936:ggplot(aes(x = x)) +
1612814437958:theme_bw() +
1612814437980:#stat_function(fun = Var_T1,args = list(sigma_sq = 1)) +
1612814438001:#stat_function(fun = Var_T2,args = list(sigma_sq = 1),linetype = "dashed") +
1612814438026:labs(title = paste0("MSE for n = ",n),
1612814438047:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814438068:x = "p",
1612814438089:y = "MSE"
1612814438113:)
1612814438135:}
1612814438159:make_plot(1)
1612814438292:## Remember the patchwork package might be helpful.
1612814456228:## Here you can code your simulation and create the 3 plots.
1612814456264:## Here is some starter code for the simulation:
1612814456305:set.seed(899)
1612814456325:sigma_sq = 1
1612814456351:## Simulating from Normal
1612814456410:# Functions to compute the estimators
1612814456430:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814456453:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814456513:N <- 1000
1612814456543:n <- 100
1612814456569:M <- 1000 # One million simulations
1612814456627:sim <- list(
1612814456648:T1 = numeric(M),
1612814456671:T2 = numeric(M)
1612814456691:)
1612814456720:for (i in 1:M) {
1612814456745:# Do the simulation
1612814456767:# Sample from Normal
1612814456791:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814456814:# Record the values of the two estimators:
1612814456841:thesimulations$T1[i] <- T1(thesample)
1612814456863:thesimulations$T2[i] <- T2(thesample)
1612814456885:}
1612814456970:#Bias
1612814457006:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814457027:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814457069:#Variance
1612814457107:Var_T1 <- function(T1) var(sim$T1)
1612814457131:Var_T2 <- function(T2) var(sim$T2)
1612814457193:#MSE
1612814457234:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814457259:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814457319:## Create your plots below. (I recommend using ggplot)
1612814457354:# Write a function to make the plot of p for fixed n
1612814457377:make_plot <- function(sigma_sq) {
1612814457401:tibble(x = c(0,1)) %>%
1612814457421:ggplot(aes(x = x)) +
1612814457444:theme_bw() +
1612814457468:#stat_function(fun = Var_T1,args = list(sigma_sq = 1)) +
1612814457491:#stat_function(fun = Var_T2,args = list(sigma_sq = 1),linetype = "dashed") +
1612814457512:labs(title = paste0("MSE for n = ",n),
1612814457536:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814457557:x = "p",
1612814457578:y = "MSE"
1612814457599:)
1612814457621:}
1612814457652:make_plot(10)
1612814457774:## Remember the patchwork package might be helpful.
1612814489797:## Here you can code your simulation and create the 3 plots.
1612814489836:## Here is some starter code for the simulation:
1612814489877:set.seed(899)
1612814489898:sigma_sq = 1
1612814489923:## Simulating from Normal
1612814489980:# Functions to compute the estimators
1612814490005:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612814490025:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612814490062:N <- 1000
1612814490086:n <- 100
1612814490110:M <- 1000 # One million simulations
1612814490163:sim <- list(
1612814490182:T1 = numeric(M),
1612814490203:T2 = numeric(M)
1612814490223:)
1612814490245:for (i in 1:M) {
1612814490266:# Do the simulation
1612814490285:# Sample from Normal
1612814490305:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612814490325:# Record the values of the two estimators:
1612814490343:thesimulations$T1[i] <- T1(thesample)
1612814490366:thesimulations$T2[i] <- T2(thesample)
1612814490386:}
1612814490473:#Bias
1612814490517:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612814490541:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612814490590:#Variance
1612814490629:Var_T1 <- function(T1) var(sim$T1)
1612814490653:Var_T2 <- function(T2) var(sim$T2)
1612814490711:#MSE
1612814490758:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612814490785:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612814490842:## Create your plots below. (I recommend using ggplot)
1612814490881:# Write a function to make the plot of p for fixed n
1612814490903:make_plot <- function(sigma_sq) {
1612814490923:tibble(x = c(0,1)) %>%
1612814490945:ggplot(aes(x = x)) +
1612814490970:theme_bw() +
1612814490991:stat_function(fun = Var_T1,args = list(sigma_sq = 1)) +
1612814491012:stat_function(fun = Var_T2,args = list(sigma_sq = 1),linetype = "dashed") +
1612814491035:labs(title = paste0("MSE for n = ",n),
1612814491061:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612814491083:x = "p",
1612814491112:y = "MSE"
1612814491136:)
1612814491161:}
1612814491187:make_plot(1)
1612814491330:## Remember the patchwork package might be helpful.
1612815068015:## Here you can code your simulation and create the 3 plots.
1612815068060:## Here is some starter code for the simulation:
1612815068099:set.seed(899)
1612815068121:sigma_sq = 1
1612815068144:## Simulating from Normal
1612815068207:# Functions to compute the estimators
1612815068231:T1 <- function(x) (1/(n-1)) * sum(x-mean(x))^2
1612815068261:T2 <- function(x) (1/(n)) * sum(x-mean(x))^2
1612815068297:N <- 1000
1612815068320:n <- 100
1612815068357:M <- 1000 # One million simulations
1612815068413:sim <- list(
1612815068434:T1 = numeric(M),
1612815068457:T2 = numeric(M)
1612815068476:)
1612815068499:for (i in 1:M) {
1612815068523:# Do the simulation
1612815068546:# Sample from Normal
1612815068571:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612815068594:# Record the values of the two estimators:
1612815068614:thesimulations$T1[i] <- T1(thesample)
1612815068635:thesimulations$T2[i] <- T2(thesample)
1612815068655:}
1612815068737:#Bias
1612815068775:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612815068799:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612815068840:#Variance
1612815068882:Var_T1 <- function(T1) var(sim$T1)
1612815068906:Var_T2 <- function(T2) var(sim$T2)
1612815068959:#MSE
1612815069045:## Create your plots below. (I recommend using ggplot)
1612815069084:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612815069105:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612815069144:# Write a function to make the plot of p for fixed n
1612815069172:make_plot <- function(sigma_sq) {
1612815069194:tibble(x = c(0,1)) %>%
1612815069218:ggplot(aes(x = x)) +
1612815069240:theme_bw() +
1612815069262:stat_function(fun = Var_T1,args = list(n = sigma_sq)) +
1612815069284:stat_function(fun = Var_T2,args = list(n = sigma_sq),linetype = "dashed") +
1612815069310:labs(title = paste0("MSE for n = ",n),
1612815069333:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612815069354:x = "p",
1612815069374:y = "MSE"
1612815069393:)
1612815069413:}
1612815069437:make_plot(1)
1612815069572:## Remember the patchwork package might be helpful.
1612815575461:## Here you can code your simulation and create the 3 plots.
1612815575500:## Here is some starter code for the simulation:
1612815575536:set.seed(899)
1612815575555:sigma_sq = 1
1612815575577:## Simulating from Normal
1612815575632:# Functions to compute the estimators
1612815575652:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612815575674:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612815575709:n <- 100
1612815575737:M <- 1000
1612815575796:sim <- list(
1612815575816:T1 = numeric(M),
1612815575836:T2 = numeric(M)
1612815575856:)
1612815575880:for (i in 1:M) {
1612815575900:# Do the simulation
1612815575922:# Sample from Normal
1612815575947:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612815575970:# Record the values of the two estimators:
1612815575991:thesimulations$T1[i] <- T1(thesample)
1612815576013:thesimulations$T2[i] <- T2(thesample)
1612815576032:}
1612815576119:#Bias
1612815576154:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612815576179:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612815576214:#Variance
1612815576249:Var_T1 <- function(T1) var(sim$T1)
1612815576270:Var_T2 <- function(T2) var(sim$T2)
1612815576323:#MSE
1612815576396:## Create your plots below. (I recommend using ggplot)
1612815576434:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612815576454:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612815576495:make_plot <- function(sigma_sq) {
1612815576516:tibble(x = c(0,1)) %>%
1612815576537:ggplot(aes(x = x)) +
1612815576559:theme_bw() +
1612815576582:stat_function(fun = Var_T1,args = list(n = sigma_sq)) +
1612815576602:stat_function(fun = Var_T2,args = list(n = sigma_sq),linetype = "dashed") +
1612815576621:labs(title = paste0("MSE for n = ",n),
1612815576641:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612815576660:x = "p",
1612815576679:y = "MSE"
1612815576702:)
1612815576723:}
1612815576746:make_plot(1)
1612815576888:## Remember the patchwork package might be helpful.
1612815887544:## Here you can code your simulation and create the 3 plots.
1612815887583:## Here is some starter code for the simulation:
1612815887622:set.seed(899)
1612815887648:sigma_sq = 1
1612815887671:## Simulating from Normal
1612815887723:# Functions to compute the estimators
1612815887744:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612815887772:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612815887813:n <- 100
1612815887837:M <- 1000
1612815887893:sim <- list(
1612815887915:T1 = numeric(M),
1612815887936:T2 = numeric(M)
1612815887958:)
1612815887991:for (i in 1:M) {
1612815888015:# Do the simulation
1612815888048:# Sample from Normal
1612815888069:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612815888096:# Record the values of the two estimators:
1612815888119:thesimulations$T1[i] <- T1(thesample)
1612815888140:thesimulations$T2[i] <- T2(thesample)
1612815888164:}
1612815888255:#Bias
1612815888293:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612815888318:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612815888362:#Variance
1612815888403:Var_T1 <- function(T1) var(sim$T1)
1612815888434:Var_T2 <- function(T2) var(sim$T2)
1612815888499:#MSE
1612815888590:## Create your plots below. (I recommend using ggplot)
1612815888636:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612815888660:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612815888705:make_plot <- function(sigma_sq) {
1612815888730:tibble(x = c(0,1)) %>%
1612815888757:ggplot(aes(x = x)) +
1612815888781:theme_bw() +
1612815888808:stat_function(fun = MSE_T1,args = list(n = sigma_sq)) +
1612815888832:stat_function(fun = MSE_T2,args = list(n = sigma_sq),linetype = "dashed") +
1612815888859:labs(title = paste0("MSE for n = ",n),
1612815888878:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612815888900:x = "p",
1612815888921:y = "MSE"
1612815888944:)
1612815888965:}
1612815888989:make_plot(1)
1612815889100:## Remember the patchwork package might be helpful.
1612826920519:install.packages(c("opendatatoronto", "patchwork"))
1612827009880:## Here you can code your simulation and create the 3 plots.
1612827009919:## Here is some starter code for the simulation:
1612827009963:set.seed(899)
1612827009985:sigma_sq = 1
1612827010011:## Simulating from Normal
1612827010074:# Functions to compute the estimators
1612827010098:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612827010123:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612827010204:n <- 100
1612827010234:M <- 1000
1612827010303:sim <- list(
1612827010328:T1 = numeric(M),
1612827010349:T2 = numeric(M)
1612827010373:)
1612827010400:for (i in 1:M) {
1612827010424:# Do the simulation
1612827010447:# Sample from Normal
1612827010468:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612827010490:# Record the values of the two estimators:
1612827010516:sim$T1[i] <- T1(thesample)
1612827010540:sim$T2[i] <- T2(thesample)
1612827010562:}
1612827010667:#Bias
1612827010706:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612827010736:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612827010774:#Variance
1612827010816:Var_T1 <- function(T1) var(sim$T1)
1612827010840:Var_T2 <- function(T2) var(sim$T2)
1612827010900:#MSE
1612827011015:## Create your plots below. (I recommend using ggplot)
1612827011059:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612827011082:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612827011120:make_plot <- function(sigma_sq) {
1612827011143:tibble(x = c(0,1)) %>%
1612827011164:ggplot(aes(x = x)) +
1612827011188:theme_bw() +
1612827011212:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612827011232:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612827011259:labs(title = paste0("MSE for n = ",n),
1612827011281:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612827011301:x = "p",
1612827011324:y = "MSE"
1612827011344:)
1612827011363:}
1612827011387:make_plot(1)
1612827015530:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612827015571:library(openintro)
1612827016375:library(opendatatoronto)
1612827016492:library(dplyr)
1612827016536:library(patchwork)
1612827016585:library(tidyverse)
1612827017695:## Here you can code your simulation and create the 3 plots.
1612827017744:## Here is some starter code for the simulation:
1612827017786:set.seed(899)
1612827017807:sigma_sq = 1
1612827017831:## Simulating from Normal
1612827017894:# Functions to compute the estimators
1612827017917:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612827017942:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612827017983:n <- 100
1612827018004:M <- 1000
1612827018066:sim <- list(
1612827018090:T1 = numeric(M),
1612827018113:T2 = numeric(M)
1612827018131:)
1612827018157:for (i in 1:M) {
1612827018179:# Do the simulation
1612827018201:# Sample from Normal
1612827018225:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612827018248:# Record the values of the two estimators:
1612827018272:sim$T1[i] <- T1(thesample)
1612827018295:sim$T2[i] <- T2(thesample)
1612827018321:}
1612827018421:#Bias
1612827018459:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612827018484:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612827018527:#Variance
1612827018567:Var_T1 <- function(T1) var(sim$T1)
1612827018592:Var_T2 <- function(T2) var(sim$T2)
1612827018657:#MSE
1612827018777:## Create your plots below. (I recommend using ggplot)
1612827018821:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612827018844:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612827018886:make_plot <- function(sigma_sq) {
1612827018907:tibble(x = c(0,1)) %>%
1612827018927:ggplot(aes(x = x)) +
1612827018945:theme_bw() +
1612827018966:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612827018987:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612827019007:labs(title = paste0("MSE for n = ",n),
1612827019028:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612827019064:x = "p",
1612827019085:y = "MSE"
1612827019107:)
1612827019129:}
1612827019153:make_plot(1)
1612827034744:## Here you can code your simulation and create the 3 plots.
1612827034787:## Here is some starter code for the simulation:
1612827034840:set.seed(899)
1612827034868:sigma_sq = 1
1612827034894:## Simulating from Normal
1612827034961:# Functions to compute the estimators
1612827034983:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612827035011:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612827035055:n <- 100
1612827035080:M <- 1000
1612827035144:sim <- list(
1612827035168:T1 = numeric(M),
1612827035192:T2 = numeric(M)
1612827035216:)
1612827035240:for (i in 1:M) {
1612827035263:# Do the simulation
1612827035288:# Sample from Normal
1612827035314:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612827035339:# Record the values of the two estimators:
1612827035362:sim$T1[i] <- T1(thesample)
1612827035387:sim$T2[i] <- T2(thesample)
1612827035412:}
1612827035510:#Bias
1612827035549:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612827035572:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612827035614:#Variance
1612827035654:Var_T1 <- function(T1) var(sim$T1)
1612827035683:Var_T2 <- function(T2) var(sim$T2)
1612827035745:#MSE
1612827035868:## Create your plots below. (I recommend using ggplot)
1612827035922:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612827035947:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612827035992:make_plot <- function(sigma_sq) {
1612827036015:tibble(x = c(0,1)) %>%
1612827036038:ggplot(aes(x = x)) +
1612827036061:theme_bw() +
1612827036084:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612827036105:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612827036127:labs(title = paste0("MSE for n = ",n),
1612827036152:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612827036174:x = "p",
1612827036200:y = "MSE"
1612827036223:)
1612827036244:}
1612827036267:make_plot()
1612827230553:## Here you can code your simulation and create the 3 plots.
1612827230593:## Here is some starter code for the simulation:
1612827230628:set.seed(899)
1612827230647:sigma_sq = 1
1612827230670:# Functions to compute the estimators
1612827230690:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612827230712:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612827230751:n <- 100
1612827230773:M <- 1000
1612827230826:sim <- list(
1612827230846:T1 = numeric(M),
1612827230867:T2 = numeric(M)
1612827230888:)
1612827230914:for (i in 1:M) {
1612827230936:# Sample from Normal
1612827230958:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612827230978:# Record the values of the two estimators:
1612827230998:sim$T1[i] <- T1(thesample)
1612827231020:sim$T2[i] <- T2(thesample)
1612827231042:}
1612827231131:#Bias
1612827231168:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612827231190:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612827231234:#Variance
1612827231273:Var_T1 <- function(T1) var(sim$T1)
1612827231297:Var_T2 <- function(T2) var(sim$T2)
1612827231350:#MSE
1612827231372:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612827231394:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612827231434:## Create your plots below. (I recommend using ggplot)
1612827231476:make_plot <- function(sigma_sq) {
1612827231497:tibble(x = c(0,1)) %>%
1612827231519:ggplot(aes(x = x)) +
1612827231542:theme_bw() +
1612827231563:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612827231584:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612827231605:labs(title = paste0("MSE for n = ",n),
1612827231628:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612827231651:x = "p",
1612827231674:y = "MSE"
1612827231696:)
1612827231718:}
1612827231741:make_plot()
1612827243150:## Here you can code your simulation and create the 3 plots.
1612827243188:## Here is some starter code for the simulation:
1612827243226:set.seed(899)
1612827243248:sigma_sq = 1
1612827243272:# Functions to compute the estimators
1612827243292:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612827243316:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612827243360:n <- 100
1612827243389:M <- 1000
1612827243454:sim <- list(
1612827243477:T1 = numeric(M),
1612827243501:T2 = numeric(M)
1612827243524:)
1612827243551:for (i in 1:M) {
1612827243577:# Sample from Normal
1612827243603:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612827243629:# Record the values of the two estimators:
1612827243653:sim$T1[i] <- T1(thesample)
1612827243676:sim$T2[i] <- T2(thesample)
1612827243699:}
1612827243792:#Bias
1612827243833:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612827243854:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612827243895:#Variance
1612827243937:Var_T1 <- function(T1) var(sim$T1)
1612827243962:Var_T2 <- function(T2) var(sim$T2)
1612827244024:#MSE
1612827244047:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612827244071:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612827244114:## Create your plots below. (I recommend using ggplot)
1612827244154:make_plot <- function(sigma_sq) {
1612827244175:tibble(x = c(0,1)) %>%
1612827244196:ggplot(aes(x = x)) +
1612827244218:theme_bw() +
1612827244241:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612827244262:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612827244283:labs(title = paste0("MSE for n = ",n),
1612827244305:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612827244326:x = "p",
1612827244347:y = "MSE"
1612827244370:)
1612827244392:}
1612827244454:## Remember the patchwork package might be helpful.
1612827247951:View(make_plot)
1612902098084:install.packages(c("opendatatoronto", "patchwork"))
1612902960156:## Here you can code your simulation and create the 3 plots.
1612902960192:## Here is some starter code for the simulation:
1612902960229:set.seed(899)
1612902960253:sigma_sq = 1
1612902960276:# Functions to compute the estimators
1612902960296:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612902960320:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612902960410:n <- 100
1612902960437:M <- 1000
1612902960504:sim <- list(
1612902960525:T1 = numeric(M),
1612902960545:T2 = numeric(M)
1612902960566:)
1612902960591:for (i in 1:M) {
1612902960612:# Sample from Normal
1612902960634:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612902960656:# Record the values of the two estimators:
1612902960676:sim$T1[i] <- T1(thesample)
1612902960701:sim$T2[i] <- T2(thesample)
1612902960720:}
1612902960826:#Bias
1612902960862:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612902960886:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612902960933:#Variance
1612902960975:Var_T1 <- function(T1) var(sim$T1)
1612902961000:Var_T2 <- function(T2) var(sim$T2)
1612902961065:#MSE
1612902961087:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612902961110:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612902961148:## Create your plots below. (I recommend using ggplot)
1612902961185:make_plot <- function(sigma_sq) {
1612902961208:tibble(x = c(0,1)) %>%
1612902961228:ggplot(aes(x = x)) +
1612902961254:theme_bw() +
1612902961274:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612902961297:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612902961318:labs(title = paste0("MSE for n = ",n),
1612902961338:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612902961364:x = "p",
1612902961384:y = "MSE"
1612902961405:)
1612902961423:}
1612902961478:## Remember the patchwork package might be helpful.
1612902966141:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612902966181:library(openintro)
1612902966888:library(opendatatoronto)
1612902967054:library(dplyr)
1612902967101:library(patchwork)
1612902967160:library(tidyverse)
1612902968594:## Here you can code your simulation and create the 3 plots.
1612902968640:## Here is some starter code for the simulation:
1612902968678:set.seed(899)
1612902968699:sigma_sq = 1
1612902968723:# Functions to compute the estimators
1612902968746:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612902968773:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612902968816:n <- 100
1612902968841:M <- 1000
1612902968903:sim <- list(
1612902968931:T1 = numeric(M),
1612902968955:T2 = numeric(M)
1612902968977:)
1612902969010:for (i in 1:M) {
1612902969034:# Sample from Normal
1612902969056:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612902969078:# Record the values of the two estimators:
1612902969101:sim$T1[i] <- T1(thesample)
1612902969128:sim$T2[i] <- T2(thesample)
1612902969149:}
1612902969263:#Bias
1612902969301:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612902969325:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612902969366:#Variance
1612902969406:Var_T1 <- function(T1) var(sim$T1)
1612902969429:Var_T2 <- function(T2) var(sim$T2)
1612902969481:#MSE
1612902969502:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612902969524:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612902969566:## Create your plots below. (I recommend using ggplot)
1612902969601:make_plot <- function(sigma_sq) {
1612902969623:tibble(x = c(0,1)) %>%
1612902969645:ggplot(aes(x = x)) +
1612902969670:theme_bw() +
1612902969691:stat_function(fun = MSE_T1(T1),args = list(n = sigma_sq)) +
1612902969711:stat_function(fun = MSE_T2(T2),args = list(n = sigma_sq),linetype = "dashed") +
1612902969731:labs(title = paste0("MSE for n = ",n),
1612902969750:subtitle = "T1 (Solid) vs T2 (Dashed)",
1612902969771:x = "p",
1612902969790:y = "MSE"
1612902969810:)
1612902969833:}
1612902969898:## Remember the patchwork package might be helpful.
1612902969991:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612902970041:# You may need additional chunks.
1612902970080:# I would recommend not including any of the Cleaning process output here.
1612902970124:# get package
1612902970143:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612902970560:package
1612902970624:# get all resources for this package
1612902970645:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612902970740:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612902970762:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612902970809:# load the first datastore resource as a sample
1612902970828:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612902972908:data
1612902973211:data %>%
1612902973236:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612902973258:geom_point(col = "blue")
1612902973653:# Here you can run a linear regression on your two variables of interest.
1612902973699:lm(AutoTheft_AVG ~ Population, data = data)
1612902973861:# Use this to calculate generate a scatterplot of your variables.
1612902973888:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612902973930:data %>%
1612902973953:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612902973974:geom_point(col = "blue")+
1612902973996:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1612903383992:## Here you can code your simulation and create the 3 plots.
1612903384028:## Here is some starter code for the simulation:
1612903384065:set.seed(899)
1612903384085:sigma_sq = 1
1612903384109:# Functions to compute the estimators
1612903384131:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903384153:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903384191:n <- 100
1612903384213:M <- 1000
1612903384272:sim <- list(
1612903384291:T1 = numeric(M),
1612903384313:T2 = numeric(M)
1612903384332:)
1612903384357:for (i in 1:M) {
1612903384378:# Sample from Normal
1612903384399:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903384420:# Record the values of the two estimators:
1612903384440:sim$T1[i] <- T1(thesample)
1612903384464:sim$T2[i] <- T2(thesample)
1612903384489:}
1612903384579:#Bias
1612903384621:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903384642:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903384681:#Variance
1612903384721:Var_T1 <- function(T1) var(sim$T1)
1612903384742:Var_T2 <- function(T2) var(sim$T2)
1612903384795:#MSE
1612903384815:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903384835:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903384873:## Create your plots below. (I recommend using ggplot)
1612903384914:leftplot <- tibble(T1 = thesimulations$T1) %>%
1612903384934:ggplot(aes(x = T1)) +
1612903384958:theme_classic() +
1612903384977:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612903385000:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612903385024:coord_cartesian(xlim = c(300,1600))
1612903400831:## Here you can code your simulation and create the 3 plots.
1612903400869:## Here is some starter code for the simulation:
1612903400911:set.seed(899)
1612903400934:sigma_sq = 1
1612903400958:# Functions to compute the estimators
1612903400978:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903401004:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903401046:n <- 100
1612903401071:M <- 1000
1612903401141:sim <- list(
1612903401162:T1 = numeric(M),
1612903401181:T2 = numeric(M)
1612903401202:)
1612903401227:for (i in 1:M) {
1612903401251:# Sample from Normal
1612903401272:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903401293:# Record the values of the two estimators:
1612903401317:sim$T1[i] <- T1(thesample)
1612903401338:sim$T2[i] <- T2(thesample)
1612903401360:}
1612903401457:#Bias
1612903401493:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903401515:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903401561:#Variance
1612903401594:Var_T1 <- function(T1) var(sim$T1)
1612903401613:Var_T2 <- function(T2) var(sim$T2)
1612903401670:#MSE
1612903401693:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903401714:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903401748:## Create your plots below. (I recommend using ggplot)
1612903401794:leftplot <- tibble(T1 = sim$T1) %>%
1612903401818:ggplot(aes(x = T1)) +
1612903401840:theme_classic() +
1612903401864:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612903401887:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612903401909:coord_cartesian(xlim = c(300,1600))
1612903402225:rightplot <- tibble(T2 = sim$T2) %>%
1612903402245:ggplot(aes(x = T2)) +
1612903402267:theme_classic() +
1612903402287:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612903402309:scale_x_continuous(breaks = c(300,700,1000,1300,1600)) +
1612903402334:coord_cartesian(xlim = c(300,1600))
1612903402656:leftplot | rightplot
1612903403067:## Remember the patchwork package might be helpful.
1612903417329:## Here you can code your simulation and create the 3 plots.
1612903417363:## Here is some starter code for the simulation:
1612903417400:set.seed(899)
1612903417420:sigma_sq = 1
1612903417442:# Functions to compute the estimators
1612903417462:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903417484:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903417526:n <- 100
1612903417549:M <- 1000
1612903417598:sim <- list(
1612903417626:T1 = numeric(M),
1612903417646:T2 = numeric(M)
1612903417670:)
1612903417694:for (i in 1:M) {
1612903417715:# Sample from Normal
1612903417742:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903417762:# Record the values of the two estimators:
1612903417782:sim$T1[i] <- T1(thesample)
1612903417803:sim$T2[i] <- T2(thesample)
1612903417824:}
1612903417921:#Bias
1612903417964:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903417992:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903418031:#Variance
1612903418071:Var_T1 <- function(T1) var(sim$T1)
1612903418097:Var_T2 <- function(T2) var(sim$T2)
1612903418152:#MSE
1612903418178:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903418203:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903418242:## Create your plots below. (I recommend using ggplot)
1612903418287:leftplot <- tibble(T1 = sim$T1) %>%
1612903418314:ggplot(aes(x = T1)) +
1612903418335:theme_classic() +
1612903418356:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612903418377:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903418696:rightplot <- tibble(T2 = sim$T2) %>%
1612903418721:ggplot(aes(x = T2)) +
1612903418743:theme_classic() +
1612903418766:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent") +
1612903418790:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903419086:leftplot | rightplot
1612903419374:## Remember the patchwork package might be helpful.
1612903437955:## Here you can code your simulation and create the 3 plots.
1612903437992:## Here is some starter code for the simulation:
1612903438033:set.seed(899)
1612903438055:sigma_sq = 1
1612903438083:# Functions to compute the estimators
1612903438108:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903438131:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903438169:n <- 100
1612903438200:M <- 1000
1612903438248:sim <- list(
1612903438267:T1 = numeric(M),
1612903438288:T2 = numeric(M)
1612903438308:)
1612903438333:for (i in 1:M) {
1612903438352:# Sample from Normal
1612903438373:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903438393:# Record the values of the two estimators:
1612903438413:sim$T1[i] <- T1(thesample)
1612903438433:sim$T2[i] <- T2(thesample)
1612903438456:}
1612903438549:#Bias
1612903438587:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903438610:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903438650:#Variance
1612903438687:Var_T1 <- function(T1) var(sim$T1)
1612903438716:Var_T2 <- function(T2) var(sim$T2)
1612903438774:#MSE
1612903438794:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903438815:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903438859:## Create your plots below. (I recommend using ggplot)
1612903438903:leftplot <- tibble(T1 = sim$T1) %>%
1612903438924:ggplot(aes(x = T1)) +
1612903438950:theme_classic() +
1612903438972:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent") +
1612903438999:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903439295:rightplot <- tibble(T2 = sim$T2) %>%
1612903439314:ggplot(aes(x = T2)) +
1612903439336:theme_classic() +
1612903439355:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent") +
1612903439376:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903439669:leftplot | rightplot
1612903439931:## Remember the patchwork package might be helpful.
1612903475631:## Here you can code your simulation and create the 3 plots.
1612903475668:## Here is some starter code for the simulation:
1612903475705:set.seed(899)
1612903475729:sigma_sq = 1
1612903475752:# Functions to compute the estimators
1612903475778:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903475803:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903475842:n <- 100
1612903475864:M <- 1000
1612903475924:sim <- list(
1612903475944:T1 = numeric(M),
1612903475975:T2 = numeric(M)
1612903475998:)
1612903476028:for (i in 1:M) {
1612903476051:# Sample from Normal
1612903476074:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903476096:# Record the values of the two estimators:
1612903476118:sim$T1[i] <- T1(thesample)
1612903476141:sim$T2[i] <- T2(thesample)
1612903476162:}
1612903476256:#Bias
1612903476294:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903476324:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903476361:#Variance
1612903476395:Var_T1 <- function(T1) var(sim$T1)
1612903476422:Var_T2 <- function(T2) var(sim$T2)
1612903476479:#MSE
1612903476500:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903476521:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903476559:## Create your plots below. (I recommend using ggplot)
1612903476595:leftplot <- tibble(T1 = Bias_T1(T1)$T1) %>%
1612903476618:ggplot(aes(x = T1)) +
1612903476644:theme_classic() +
1612903476665:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent") +
1612903476690:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903488624:## Here you can code your simulation and create the 3 plots.
1612903488671:## Here is some starter code for the simulation:
1612903488713:set.seed(899)
1612903488734:sigma_sq = 1
1612903488757:# Functions to compute the estimators
1612903488777:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903488801:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903488843:n <- 100
1612903488866:M <- 1000
1612903488920:sim <- list(
1612903488943:T1 = numeric(M),
1612903488966:T2 = numeric(M)
1612903488992:)
1612903489016:for (i in 1:M) {
1612903489044:# Sample from Normal
1612903489068:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903489094:# Record the values of the two estimators:
1612903489115:sim$T1[i] <- T1(thesample)
1612903489138:sim$T2[i] <- T2(thesample)
1612903489167:}
1612903489265:#Bias
1612903489311:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903489338:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903489381:#Variance
1612903489417:Var_T1 <- function(T1) var(sim$T1)
1612903489438:Var_T2 <- function(T2) var(sim$T2)
1612903489497:#MSE
1612903489519:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903489544:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903489583:## Create your plots below. (I recommend using ggplot)
1612903489621:leftplot <- tibble(T1 = sim$T1) %>%
1612903489641:ggplot(aes(x = T1)) +
1612903489661:theme_classic() +
1612903489694:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent") +
1612903489716:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903490050:rightplot <- tibble(T2 = sim$T2) %>%
1612903490072:ggplot(aes(x = T2)) +
1612903490092:theme_classic() +
1612903490113:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent") +
1612903490139:scale_x_continuous(breaks = c(300,700,1000,1300,1600))
1612903490455:leftplot | rightplot
1612903490716:## Remember the patchwork package might be helpful.
1612903688635:## Here you can code your simulation and create the 3 plots.
1612903688674:## Here is some starter code for the simulation:
1612903688711:set.seed(899)
1612903688734:sigma_sq = 1
1612903688757:# Functions to compute the estimators
1612903688779:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903688801:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903688837:n <- 100
1612903688860:M <- 1000
1612903688925:sim <- list(
1612903688944:T1 = numeric(M),
1612903688963:T2 = numeric(M)
1612903688983:)
1612903689007:for (i in 1:M) {
1612903689037:# Sample from Normal
1612903689072:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903689100:# Record the values of the two estimators:
1612903689122:sim$T1[i] <- T1(thesample)
1612903689144:sim$T2[i] <- T2(thesample)
1612903689163:}
1612903689257:#Bias
1612903689293:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903689319:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903689357:#Variance
1612903689397:Var_T1 <- function(T1) var(sim$T1)
1612903689420:Var_T2 <- function(T2) var(sim$T2)
1612903689471:#MSE
1612903689492:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903689535:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903689571:## Create your plots below. (I recommend using ggplot)
1612903689607:leftplot <- tibble(T1 = sim$T1) %>%
1612903689634:ggplot(aes(x = T1)) +
1612903689656:theme_classic() +
1612903689677:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent")
1612903689987:rightplot <- tibble(T2 = sim$T2) %>%
1612903690011:ggplot(aes(x = T2)) +
1612903690036:theme_classic() +
1612903690059:geom_histogram(aes(y = ..density..),bins = 15,colour = "black",fill = "transparent")
1612903690370:leftplot | rightplot
1612903690650:## Remember the patchwork package might be helpful.
1612903701024:## Here you can code your simulation and create the 3 plots.
1612903701061:## Here is some starter code for the simulation:
1612903701097:set.seed(899)
1612903701122:sigma_sq = 1
1612903701143:# Functions to compute the estimators
1612903701164:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903701183:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903701217:n <- 100
1612903701241:M <- 1000
1612903701292:sim <- list(
1612903701311:T1 = numeric(M),
1612903701331:T2 = numeric(M)
1612903701354:)
1612903701378:for (i in 1:M) {
1612903701400:# Sample from Normal
1612903701423:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903701450:# Record the values of the two estimators:
1612903701471:sim$T1[i] <- T1(thesample)
1612903701491:sim$T2[i] <- T2(thesample)
1612903701512:}
1612903701596:#Bias
1612903701634:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903701663:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903701705:#Variance
1612903701743:Var_T1 <- function(T1) var(sim$T1)
1612903701765:Var_T2 <- function(T2) var(sim$T2)
1612903701824:#MSE
1612903701843:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903701865:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903701906:## Create your plots below. (I recommend using ggplot)
1612903701947:leftplot <- tibble(T1 = sim$T1) %>%
1612903701969:ggplot(aes(x = T1)) +
1612903701988:theme_classic() +
1612903702008:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612903702338:rightplot <- tibble(T2 = sim$T2) %>%
1612903702359:ggplot(aes(x = T2)) +
1612903702379:theme_classic() +
1612903702398:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "transparent")
1612903702704:leftplot | rightplot
1612903703005:## Remember the patchwork package might be helpful.
1612903710393:## Here you can code your simulation and create the 3 plots.
1612903710431:## Here is some starter code for the simulation:
1612903710467:set.seed(899)
1612903710487:sigma_sq = 1
1612903710508:# Functions to compute the estimators
1612903710535:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903710559:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903710597:n <- 100
1612903710620:M <- 1000
1612903710683:sim <- list(
1612903710705:T1 = numeric(M),
1612903710726:T2 = numeric(M)
1612903710750:)
1612903710773:for (i in 1:M) {
1612903710795:# Sample from Normal
1612903710815:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903710838:# Record the values of the two estimators:
1612903710858:sim$T1[i] <- T1(thesample)
1612903710880:sim$T2[i] <- T2(thesample)
1612903710901:}
1612903710998:#Bias
1612903711033:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903711055:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903711095:#Variance
1612903711129:Var_T1 <- function(T1) var(sim$T1)
1612903711150:Var_T2 <- function(T2) var(sim$T2)
1612903711203:#MSE
1612903711223:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903711245:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903711280:## Create your plots below. (I recommend using ggplot)
1612903711317:leftplot <- tibble(T1 = sim$T1) %>%
1612903711335:ggplot(aes(x = T1)) +
1612903711355:theme_classic() +
1612903711373:geom_histogram(aes(y = ..density..),bins = 10,colour = "black",fill = "transparent")
1612903711871:rightplot <- tibble(T2 = sim$T2) %>%
1612903711891:ggplot(aes(x = T2)) +
1612903711911:theme_classic() +
1612903711931:geom_histogram(aes(y = ..density..),bins = 10,colour = "black",fill = "transparent")
1612903712226:leftplot | rightplot
1612903712499:## Remember the patchwork package might be helpful.
1612903724363:## Here you can code your simulation and create the 3 plots.
1612903724404:## Here is some starter code for the simulation:
1612903724444:set.seed(899)
1612903724468:sigma_sq = 1
1612903724490:# Functions to compute the estimators
1612903724514:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903724539:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903724578:n <- 100
1612903724612:M <- 1000
1612903724674:sim <- list(
1612903724701:T1 = numeric(M),
1612903724726:T2 = numeric(M)
1612903724749:)
1612903724775:for (i in 1:M) {
1612903724798:# Sample from Normal
1612903724818:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903724840:# Record the values of the two estimators:
1612903724863:sim$T1[i] <- T1(thesample)
1612903724886:sim$T2[i] <- T2(thesample)
1612903724908:}
1612903724997:#Bias
1612903725035:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903725061:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903725105:#Variance
1612903725146:Var_T1 <- function(T1) var(sim$T1)
1612903725166:Var_T2 <- function(T2) var(sim$T2)
1612903725217:#MSE
1612903725236:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903725256:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903725295:## Create your plots below. (I recommend using ggplot)
1612903725334:leftplot <- tibble(T1 = sim$T1) %>%
1612903725355:ggplot(aes(x = T1)) +
1612903725375:theme_classic() +
1612903725395:geom_histogram(aes(y = ..density..),bins = 5,colour = "black",fill = "transparent")
1612903725682:rightplot <- tibble(T2 = sim$T2) %>%
1612903725699:ggplot(aes(x = T2)) +
1612903725719:theme_classic() +
1612903725740:geom_histogram(aes(y = ..density..),bins = 5,colour = "black",fill = "transparent")
1612903726027:leftplot | rightplot
1612903726303:## Remember the patchwork package might be helpful.
1612903740927:## Here you can code your simulation and create the 3 plots.
1612903740964:## Here is some starter code for the simulation:
1612903741001:set.seed(899)
1612903741022:sigma_sq = 1
1612903741044:# Functions to compute the estimators
1612903741068:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903741090:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903741128:n <- 100
1612903741150:M <- 1000
1612903741204:sim <- list(
1612903741226:T1 = numeric(M),
1612903741247:T2 = numeric(M)
1612903741266:)
1612903741291:for (i in 1:M) {
1612903741311:# Sample from Normal
1612903741331:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903741351:# Record the values of the two estimators:
1612903741372:sim$T1[i] <- T1(thesample)
1612903741397:sim$T2[i] <- T2(thesample)
1612903741417:}
1612903741504:#Bias
1612903741542:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903741565:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903741608:#Variance
1612903741645:Var_T1 <- function(T1) var(sim$T1)
1612903741666:Var_T2 <- function(T2) var(sim$T2)
1612903741723:#MSE
1612903741743:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903741768:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903741804:## Create your plots below. (I recommend using ggplot)
1612903741844:leftplot <- tibble(T1 = sim$T1) %>%
1612903741865:ggplot(aes(x = T1)) +
1612903741885:theme_classic() +
1612903741904:geom_histogram(aes(y = ..density..),bins = 1,colour = "black",fill = "light blue")
1612903742217:rightplot <- tibble(T2 = sim$T2) %>%
1612903742238:ggplot(aes(x = T2)) +
1612903742262:theme_classic() +
1612903742282:geom_histogram(aes(y = ..density..),bins = 1,colour = "black",fill = "light blue")
1612903742587:leftplot | rightplot
1612903742835:## Remember the patchwork package might be helpful.
1612903750873:## Here you can code your simulation and create the 3 plots.
1612903750907:## Here is some starter code for the simulation:
1612903750942:set.seed(899)
1612903750978:sigma_sq = 1
1612903751004:# Functions to compute the estimators
1612903751028:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612903751051:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612903751093:n <- 100
1612903751118:M <- 1000
1612903751181:sim <- list(
1612903751201:T1 = numeric(M),
1612903751221:T2 = numeric(M)
1612903751243:)
1612903751268:for (i in 1:M) {
1612903751288:# Sample from Normal
1612903751311:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612903751332:# Record the values of the two estimators:
1612903751353:sim$T1[i] <- T1(thesample)
1612903751377:sim$T2[i] <- T2(thesample)
1612903751397:}
1612903751500:#Bias
1612903751539:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612903751560:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612903751601:#Variance
1612903751643:Var_T1 <- function(T1) var(sim$T1)
1612903751668:Var_T2 <- function(T2) var(sim$T2)
1612903751724:#MSE
1612903751743:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612903751765:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612903751809:## Create your plots below. (I recommend using ggplot)
1612903751845:leftplot <- tibble(T1 = sim$T1) %>%
1612903751866:ggplot(aes(x = T1)) +
1612903751888:theme_classic() +
1612903751908:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612903752226:rightplot <- tibble(T2 = sim$T2) %>%
1612903752247:ggplot(aes(x = T2)) +
1612903752275:theme_classic() +
1612903752296:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612903752610:leftplot | rightplot
1612903752895:## Remember the patchwork package might be helpful.
1612904617328:tibble(T1 = sim$T1)
1612904807699:## Here you can code your simulation and create the 3 plots.
1612904807733:## Here is some starter code for the simulation:
1612904807768:set.seed(899)
1612904807788:sigma_sq = 1
1612904807812:# Functions to compute the estimators
1612904807833:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612904807855:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612904807894:n <- 100
1612904807917:M <- 1000
1612904807976:sim <- list(
1612904807995:T1 = numeric(M),
1612904808019:T2 = numeric(M)
1612904808039:)
1612904808061:for (i in 1:M) {
1612904808083:# Sample from Normal
1612904808105:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612904808128:# Record the values of the two estimators:
1612904808149:sim$T1[i] <- T1(thesample)
1612904808172:sim$T2[i] <- T2(thesample)
1612904808192:}
1612904808275:#Bias
1612904808309:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612904808334:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612904808384:#Variance
1612904808420:Var_T1 <- function(T1) var(sim$T1)
1612904808441:Var_T2 <- function(T2) var(sim$T2)
1612904808494:#MSE
1612904808513:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612904808533:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612904808575:## Create your plots below. (I recommend using ggplot)
1612904808611:leftplot <- tibble(T1 = sigma_sq) %>%
1612904808631:ggplot(aes(x = T1)) +
1612904808652:theme_classic() +
1612904808673:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612904808953:rightplot <- tibble(T2 = sigma_sq) %>%
1612904808972:ggplot(aes(x = T2)) +
1612904808991:theme_classic() +
1612904809015:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612904809337:leftplot | rightplot
1612904809601:## Remember the patchwork package might be helpful.
1612905126525:## Here you can code your simulation and create the 3 plots.
1612905126560:## Here is some starter code for the simulation:
1612905126604:set.seed(899)
1612905126626:sigma_sq = 10
1612905126649:# Functions to compute the estimators
1612905126669:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612905126690:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612905126729:n <- 100
1612905126754:M <- 1000
1612905126812:sim <- list(
1612905126832:T1 = numeric(M),
1612905126856:T2 = numeric(M)
1612905126877:)
1612905126900:for (i in 1:M) {
1612905126923:# Sample from Normal
1612905126944:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612905126964:# Record the values of the two estimators:
1612905126984:sim$T1[i] <- T1(thesample)
1612905127002:sim$T2[i] <- T2(thesample)
1612905127023:}
1612905127109:#Bias
1612905127150:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612905127176:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612905127218:#Variance
1612905127255:Var_T1 <- function(T1) var(sim$T1)
1612905127277:Var_T2 <- function(T2) var(sim$T2)
1612905127334:#MSE
1612905127355:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612905127375:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612905127414:## Create your plots below. (I recommend using ggplot)
1612905127450:leftplot <- tibble(T1 = sigma_sq) %>%
1612905127470:ggplot(aes(x = T1)) +
1612905127496:theme_classic() +
1612905127519:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905127811:rightplot <- tibble(T2 = sigma_sq) %>%
1612905127838:ggplot(aes(x = T2)) +
1612905127865:theme_classic() +
1612905127890:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905128222:leftplot | rightplot
1612905159230:## Here you can code your simulation and create the 3 plots.
1612905159268:## Here is some starter code for the simulation:
1612905159308:set.seed(899)
1612905159334:sigma_sq = 10
1612905159357:# Functions to compute the estimators
1612905159377:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612905159400:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612905159436:n <- 100
1612905159462:M <- 1000
1612905159514:sim <- list(
1612905159532:T1 = numeric(M),
1612905159555:T2 = numeric(M)
1612905159574:)
1612905159598:for (i in 1:M) {
1612905159622:# Sample from Normal
1612905159642:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612905159663:# Record the values of the two estimators:
1612905159684:sim$T1[i] <- T1(thesample)
1612905159705:sim$T2[i] <- T2(thesample)
1612905159725:}
1612905159854:#Bias
1612905159901:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612905159922:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612905159960:#Variance
1612905160003:Var_T1 <- function(T1) var(sim$T1)
1612905160026:Var_T2 <- function(T2) var(sim$T2)
1612905160084:#MSE
1612905160110:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612905160132:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612905160168:## Create your plots below. (I recommend using ggplot)
1612905160207:leftplot <- tibble(T1 = sim$T1) %>%
1612905160227:ggplot(aes(x = T1)) +
1612905160245:theme_classic() +
1612905160264:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905160576:rightplot <- tibble(T2 = sim$T2) %>%
1612905160596:ggplot(aes(x = T2)) +
1612905160615:theme_classic() +
1612905160633:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905160936:leftplot | rightplot
1612905640950:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1612905640990:library(openintro)
1612905641011:library(opendatatoronto)
1612905641030:library(dplyr)
1612905641056:library(patchwork)
1612905641080:library(tidyverse)
1612905641151:## Here you can code your simulation and create the 3 plots.
1612905641198:## Here is some starter code for the simulation:
1612905641236:set.seed(899)
1612905641258:sigma_sq = 10
1612905641286:# Functions to compute the estimators
1612905641307:T1 <- function(x) (1/(length(x)-1)) * sum(x-mean(x))^2
1612905641331:T2 <- function(x) (1/(length(x))) * sum(x-mean(x))^2
1612905641371:n <- 100
1612905641397:M <- 1000
1612905641455:sim <- list(
1612905641474:T1 = numeric(M),
1612905641497:T2 = numeric(M)
1612905641521:)
1612905641547:for (i in 1:M) {
1612905641573:# Sample from Normal
1612905641594:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612905641615:# Record the values of the two estimators:
1612905641636:sim$T1[i] <- T1(thesample)
1612905641659:sim$T2[i] <- T2(thesample)
1612905641681:}
1612905641782:#Bias
1612905641818:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612905641840:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612905641879:#Variance
1612905641913:Var_T1 <- function(T1) var(sim$T1)
1612905641940:Var_T2 <- function(T2) var(sim$T2)
1612905641999:#MSE
1612905642023:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612905642050:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612905642093:## Create your plots below. (I recommend using ggplot)
1612905642131:leftplot <- tibble(T1 = sim$T1) %>%
1612905642159:ggplot(aes(x = T1)) +
1612905642180:theme_classic() +
1612905642203:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905642528:rightplot <- tibble(T2 = sim$T2) %>%
1612905642548:ggplot(aes(x = T2)) +
1612905642570:theme_classic() +
1612905642591:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612905642926:leftplot | rightplot
1612905643413:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1612905643456:# You may need additional chunks.
1612905643503:# I would recommend not including any of the Cleaning process output here.
1612905643541:# get package
1612905643560:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612905643912:package
1612905643976:# get all resources for this package
1612905643996:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1612905644117:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1612905644139:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1612905644181:# load the first datastore resource as a sample
1612905644202:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1612905645709:data
1612905645896:data %>%
1612905645927:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612905645950:geom_point(col = "blue")
1612905646187:# Here you can run a linear regression on your two variables of interest.
1612905646233:lm(AutoTheft_AVG ~ Population, data = data)
1612905646379:# Use this to calculate generate a scatterplot of your variables.
1612905646413:# Don't forget to use abline to overlay the scatterplot with the regression line.
1612905646450:data %>%
1612905646470:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1612905646491:geom_point(col = "blue")+
1612905646511:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1612906344614:Bias_T1
1612906369243:tibble(T1 = sim$T1)
1612906376805:sim$T1
1612906481308:Var_T1 <- function(T1) var(sim$T1)
1612906486045:Var_T2
1612906495704:geom_histogram
1612906499000:leftplot
1612906507925:tibble(T1 = sim$T1
1612906509537:tibble(T1 = sim$T1
1612906514358:tibble(T1 = sim$T1)
1612906532685:sim$T2[i]
1612906552978:## Here you can code your simulation and create the 3 plots.
1612906553014:## Here is some starter code for the simulation:
1612906553052:set.seed(899)
1612906553072:sigma_sq = 1
1612906553099:# Functions to compute the estimators
1612906553119:T1 <- function(x) (1/(length(x)-1)) * (sum(x-mean(x))^2)
1612906553141:T2 <- function(x) (1/(length(x))) * (sum(x-mean(x))^2)
1612906553179:n <- 100
1612906553207:M <- 1000
1612906553260:sim <- list(
1612906553282:T1 = numeric(M),
1612906553310:T2 = numeric(M)
1612906553329:)
1612906553352:for (i in 1:M) {
1612906553373:# Sample from Normal
1612906553394:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612906553414:# Record the values of the two estimators:
1612906553434:sim$T1[i] <- T1(thesample)
1612906553456:sim$T2[i] <- T2(thesample)
1612906553476:}
1612906553572:#Bias
1612906553606:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612906553633:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612906553669:#Variance
1612906553704:Var_T1 <- function(T1) var(sim$T1)
1612906553725:Var_T2 <- function(T2) var(sim$T2)
1612906553785:#MSE
1612906553806:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612906553827:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612906553865:## Create your plots below. (I recommend using ggplot)
1612906553900:leftplot <- tibble(T1 = sim$T1) %>%
1612906553921:ggplot(aes(x = T1)) +
1612906553940:theme_classic() +
1612906553960:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906554242:rightplot <- tibble(T2 = sim$T2) %>%
1612906554261:ggplot(aes(x = T2)) +
1612906554284:theme_classic() +
1612906554308:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906554633:leftplot | rightplot
1612906564408:# Record the values of the two estimators:
1612906564425:sim$T1[i] <- T1(thesample)
1612906570350:sim$T1[i]
1612906574067:sim$T1[i]
1612906574687:sim$T1[i]
1612906574894:sim$T1[i]
1612906577311:sim$T2[i]
1612906635841:## Here you can code your simulation and create the 3 plots.
1612906635877:## Here is some starter code for the simulation:
1612906635915:set.seed(899)
1612906635933:sigma_sq = 1
1612906635959:# Functions to compute the estimators
1612906635980:T1 <- function(x) (1/(length(x)-1)) * (sum(x-mean(x))^2)
1612906636005:T2 <- function(x) (1/(length(x))) * (sum(x-mean(x))^2)
1612906636046:n <- 100
1612906636069:M <- 1000
1612906636125:sim <- list(
1612906636147:T1 = numeric(M),
1612906636174:T2 = numeric(M)
1612906636193:)
1612906636219:for (i in 1:M) {
1612906636237:# Sample from Normal
1612906636255:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612906636276:# Record the values of the two estimators:
1612906636294:sim$T1[i] <- T1(thesample)
1612906636318:sim$T2[i] <- T2(thesample)
1612906636341:}
1612906636439:#Bias
1612906636471:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612906636494:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612906636536:#Variance
1612906636580:Var_T1 <- function(T1) var(sim$T1)
1612906636600:Var_T2 <- function(T2) var(sim$T2)
1612906636665:#MSE
1612906636687:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612906636709:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612906636744:## Create your plots below. (I recommend using ggplot)
1612906636784:leftplot <- tibble(T1 = sim$T1) %>%
1612906636805:ggplot(aes(x = T1)) +
1612906636825:theme_classic() +
1612906636844:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906637135:rightplot <- tibble(T2 = sim$T2) %>%
1612906637155:ggplot(aes(x = T2)) +
1612906637178:theme_classic() +
1612906637199:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906637476:leftplot | rightplot
1612906644528:Var_T2
1612906650214:sim$T1
1612906678865:## Here you can code your simulation and create the 3 plots.
1612906678902:## Here is some starter code for the simulation:
1612906678943:set.seed(899)
1612906678965:sigma_sq = 1
1612906678988:# Functions to compute the estimators
1612906679012:T1 <- function(x) (1/(n-1)) * (sum(x-mean(x))^2)
1612906679034:T2 <- function(x) (1/n) * (sum(x-mean(x))^2)
1612906679074:n <- 100
1612906679098:M <- 1000
1612906679157:sim <- list(
1612906679188:T1 = numeric(M),
1612906679209:T2 = numeric(M)
1612906679231:)
1612906679267:for (i in 1:M) {
1612906679292:# Sample from Normal
1612906679317:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612906679339:# Record the values of the two estimators:
1612906679370:sim$T1[i] <- T1(thesample)
1612906679392:sim$T2[i] <- T2(thesample)
1612906679412:}
1612906679498:#Bias
1612906679538:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612906679561:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612906679602:#Variance
1612906679639:Var_T1 <- function(T1) var(sim$T1)
1612906679660:Var_T2 <- function(T2) var(sim$T2)
1612906679718:#MSE
1612906679737:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612906679758:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612906679796:## Create your plots below. (I recommend using ggplot)
1612906679833:leftplot <- tibble(T1 = sim$T1) %>%
1612906679855:ggplot(aes(x = T1)) +
1612906679874:theme_classic() +
1612906679895:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906680218:rightplot <- tibble(T2 = sim$T2) %>%
1612906680237:ggplot(aes(x = T2)) +
1612906680255:theme_classic() +
1612906680273:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906680596:leftplot | rightplot
1612906722145:sim$T1[i]
1612906740198:thesample
1612906956330:## Here you can code your simulation and create the 3 plots.
1612906956365:## Here is some starter code for the simulation:
1612906956403:set.seed(899)
1612906956423:sigma_sq = 1
1612906956445:# Functions to compute the estimators
1612906956464:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1612906956485:T2 <- function(x) (1/n) * (sum(x-mean(x))^2)
1612906956524:n <- 100
1612906956552:M <- 1000
1612906956607:sim <- list(
1612906956636:T1 = numeric(M),
1612906956658:T2 = numeric(M)
1612906956680:)
1612906956705:for (i in 1:M) {
1612906956727:# Sample from Normal
1612906956748:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612906956770:# Record the values of the two estimators:
1612906956792:sim$T1[i] <- T1(thesample)
1612906956813:sim$T2[i] <- T2(thesample)
1612906956833:}
1612906956919:#Bias
1612906956961:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612906956984:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612906957024:#Variance
1612906957065:Var_T1 <- function(T1) var(sim$T1)
1612906957086:Var_T2 <- function(T2) var(sim$T2)
1612906957142:#MSE
1612906957164:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612906957186:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612906957224:## Create your plots below. (I recommend using ggplot)
1612906957260:leftplot <- tibble(T1 = sim$T1) %>%
1612906957281:ggplot(aes(x = T1)) +
1612906957301:theme_classic() +
1612906957320:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906957614:rightplot <- tibble(T2 = sim$T2) %>%
1612906957639:ggplot(aes(x = T2)) +
1612906957659:theme_classic() +
1612906957679:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906957988:leftplot | rightplot
1612906967388:## Here you can code your simulation and create the 3 plots.
1612906967424:## Here is some starter code for the simulation:
1612906967463:set.seed(899)
1612906967485:sigma_sq = 1
1612906967506:# Functions to compute the estimators
1612906967530:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1612906967563:T2 <- function(x) (1/n) * ((sum(x-mean(x))^2))
1612906967601:n <- 100
1612906967626:M <- 1000
1612906967683:sim <- list(
1612906967702:T1 = numeric(M),
1612906967721:T2 = numeric(M)
1612906967743:)
1612906967771:for (i in 1:M) {
1612906967794:# Sample from Normal
1612906967814:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612906967837:# Record the values of the two estimators:
1612906967857:sim$T1[i] <- T1(thesample)
1612906967889:sim$T2[i] <- T2(thesample)
1612906967910:}
1612906967999:#Bias
1612906968041:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612906968062:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612906968104:#Variance
1612906968139:Var_T1 <- function(T1) var(sim$T1)
1612906968161:Var_T2 <- function(T2) var(sim$T2)
1612906968215:#MSE
1612906968238:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612906968259:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612906968296:## Create your plots below. (I recommend using ggplot)
1612906968336:leftplot <- tibble(T1 = sim$T1) %>%
1612906968356:ggplot(aes(x = T1)) +
1612906968377:theme_classic() +
1612906968398:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906968685:rightplot <- tibble(T2 = sim$T2) %>%
1612906968706:ggplot(aes(x = T2)) +
1612906968726:theme_classic() +
1612906968747:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612906969017:leftplot | rightplot
1612907009071:## Here you can code your simulation and create the 3 plots.
1612907009108:## Here is some starter code for the simulation:
1612907009149:set.seed(899)
1612907009169:sigma_sq = 1
1612907009190:# Functions to compute the estimators
1612907009212:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1612907009233:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1612907009269:n <- 100
1612907009294:M <- 1000
1612907009354:sim <- list(
1612907009375:T1 = numeric(M),
1612907009395:T2 = numeric(M)
1612907009417:)
1612907009442:for (i in 1:M) {
1612907009466:# Sample from Normal
1612907009492:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612907009514:# Record the values of the two estimators:
1612907009537:sim$T1[i] <- T1(thesample)
1612907009560:sim$T2[i] <- T2(thesample)
1612907009582:}
1612907009684:#Bias
1612907009722:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612907009747:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612907009786:#Variance
1612907009822:Var_T1 <- function(T1) var(sim$T1)
1612907009844:Var_T2 <- function(T2) var(sim$T2)
1612907009902:#MSE
1612907009926:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612907009950:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612907009988:## Create your plots below. (I recommend using ggplot)
1612907010023:leftplot <- tibble(T1 = sim$T1) %>%
1612907010044:ggplot(aes(x = T1)) +
1612907010067:theme_classic() +
1612907010089:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907010372:rightplot <- tibble(T2 = sim$T2) %>%
1612907010392:ggplot(aes(x = T2)) +
1612907010413:theme_classic() +
1612907010440:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907010747:leftplot | rightplot
1612907066001:tibble(T1 = sim$T1)
1612907103270:## Here you can code your simulation and create the 3 plots.
1612907103306:## Here is some starter code for the simulation:
1612907103343:set.seed(899)
1612907103367:sigma_sq = 1
1612907103396:# Functions to compute the estimators
1612907103418:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1612907103440:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1612907103478:n <- 100
1612907103510:M <- 1000
1612907103563:sim <- list(
1612907103584:T1 = numeric(M),
1612907103604:T2 = numeric(M)
1612907103625:)
1612907103657:for (i in 1:M) {
1612907103684:# Sample from Normal
1612907103709:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612907103732:# Record the values of the two estimators:
1612907103762:sim$T1[i] <- T1(thesample)
1612907103783:sim$T2[i] <- T2(thesample)
1612907103809:}
1612907103904:#Bias
1612907103951:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612907103973:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612907104026:#Variance
1612907104072:Var_T1 <- function(T1) var(sim$T1)
1612907104097:Var_T2 <- function(T2) var(sim$T2)
1612907104173:#MSE
1612907104199:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612907104222:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612907104263:## Create your plots below. (I recommend using ggplot)
1612907104311:leftplot <- tibble(T1 = sim$T1) %>%
1612907104332:ggplot(aes(x = T1)) +
1612907104356:theme_classic() +
1612907104381:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907104721:rightplot <- tibble(T2 = sim$T2) %>%
1612907104749:ggplot(aes(x = T2)) +
1612907104779:theme_classic() +
1612907104807:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907105080:leftplot | rightplot
1612907811376:mean(sim$T1) - N
1612907825702:mean(sim$T1) - sigma_sq
1612907825735:mean(sim$T2) - sigma_sq
1612907846891:set.seed(899)
1612907846925:mean(sim$T1) - sigma_sq
1612907846962:mean(sim$T2) - sigma_sq
1612907847889:set.seed(899)
1612907847926:mean(sim$T1) - sigma_sq
1612907847959:mean(sim$T2) - sigma_sq
1612907853879:mean(sim$T1) - sigma_sq
1612907853931:mean(sim$T2) - sigma_sq
1612907862536:## Here you can code your simulation and create the 3 plots.
1612907862571:## Here is some starter code for the simulation:
1612907862610:set.seed(898)
1612907862630:sigma_sq = 1
1612907862654:# Functions to compute the estimators
1612907862676:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1612907862695:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1612907862744:n <- 100
1612907862766:M <- 1000
1612907862821:sim <- list(
1612907862842:T1 = numeric(M),
1612907862860:T2 = numeric(M)
1612907862880:)
1612907862903:for (i in 1:M) {
1612907862926:# Sample from Normal
1612907862946:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1612907862969:# Record the values of the two estimators:
1612907862988:sim$T1[i] <- T1(thesample)
1612907863011:sim$T2[i] <- T2(thesample)
1612907863035:}
1612907863147:#Bias
1612907863183:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1612907863208:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1612907863249:#Variance
1612907863284:Var_T1 <- function(T1) var(sim$T1)
1612907863305:Var_T2 <- function(T2) var(sim$T2)
1612907863363:#MSE
1612907863384:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1612907863405:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1612907863442:## Create your plots below. (I recommend using ggplot)
1612907863479:leftplot <- tibble(T1 = sim$T1) %>%
1612907863498:ggplot(aes(x = T1)) +
1612907863517:theme_classic() +
1612907863536:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907863828:rightplot <- tibble(T2 = sim$T2) %>%
1612907863847:ggplot(aes(x = T2)) +
1612907863865:theme_classic() +
1612907863888:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1612907864204:leftplot | rightplot
1612907867492:mean(sim$T1) - sigma_sq
1612907867523:mean(sim$T2) - sigma_sq
1612907869192:mean(sim$T1) - sigma_sq
1612907869226:mean(sim$T2) - sigma_sq
1612907962816:mean(sim$T1) - sigma_sq
1612907962851:mean(sim$T2) - sigma_sq
1612907962898:var(thesimulations$T1)
1612907971472:mean(sim$T1) - sigma_sq
1612907971518:mean(sim$T2) - sigma_sq
1612907971574:var(sim$T1)
1612907971607:var(sim$T2)
1612908051702:mean(sim$T1) - sigma_sq
1612908051735:mean(sim$T2) - sigma_sq
1612908051796:var(sim$T1)
1612908051834:var(sim$T2)
1612908051883:mse <- function(x) var(x) + (mean(x) - N)^2
1612908051909:mse(sim$T1)
1612908057877:mean(sim$T1) - sigma_sq
1612908057910:mean(sim$T2) - sigma_sq
1612908057960:var(sim$T1)
1612908057993:var(sim$T2)
1612908058041:mse <- function(x) var(x) + (mean(x) - sigma_sq)^2
1612908058068:mse(sim$T1)
1612908069601:mean(sim$T1) - sigma_sq
1612908069641:mean(sim$T2) - sigma_sq
1612908069687:var(sim$T1)
1612908069723:var(sim$T2)
1612908069776:mse <- function(x) var(x) + (mean(x) - sigma_sq)^2
1612908069797:mse(sim$T1)
1612908069829:mse(sim$T2)
1613077159050:install.packages(c("opendatatoronto", "patchwork"))
1613077203347:library(tidyverse)
1613077205578:library(patchwork)
1613077205791:visualize_binomial_priorposterior <- function(sumx,n) {
1613077205826:prior <- function(theta) {
1613077205850:if (theta == .3) {
1613077205873:return(.8)
1613077205896:}
1613077205928:else if (theta == .7) {
1613077205952:return(.2)
1613077205974:}
1613077206001:0
1613077206029:}
1613077206054:likelihood <- function(theta) theta^sumx * (1-theta)^(n - sumx)
1613077206077:marginal_likelihood <- prior(.7) * likelihood(.7) + prior(.3) * likelihood(.3)
1613077206103:posterior <- function(theta) likelihood(theta) * prior(theta) / marginal_likelihood
1613077206150:# Plot of the prior and posterior distributions for these observed data
1613077206173:tibble(
1613077206195:theta = c(.3,.7,.3,.7),
1613077206217:value = c(prior(.3),prior(.7),posterior(.3),posterior(.7)),
1613077206241:type = c("Prior","Prior","Posterior","Posterior")
1613077206264:) %>%
1613077206288:ggplot(aes(x = theta,y = value,fill = type)) +
1613077206312:theme_classic() +
1613077206344:geom_bar(stat = "identity",position = "dodge",colour = "black") +
1613077206371:labs(title = "Prior and Posterior for theta",
1613077206395:subtitle = str_c("Observed data: ",sumx," flips in ",n," throws"),
1613077206419:x = "Theta, probability of heads",
1613077206447:y = "Prior/Posterior Probability",
1613077206478:fill = "") +
1613077206501:scale_x_continuous(breaks = c(0.30,0.70),labels = c("0.30","0.70")) +
1613077206523:scale_y_continuous(labels = scales::percent_format()) +
1613077206547:scale_fill_brewer(palette = "Reds")
1613077206590:}
1613077206648:# library(patchwork)
1613077206680:(visualize_binomial_priorposterior(6,6) | visualize_binomial_priorposterior(6,10)) /
1613077206703:(visualize_binomial_priorposterior(6,20) | visualize_binomial_priorposterior(6,50)) /
1613077206726:(visualize_binomial_priorposterior(0,10) | visualize_binomial_priorposterior(1,10)) /
1613077206763:(visualize_binomial_priorposterior(7,10) | visualize_binomial_priorposterior(10,10))
1613077693690:## Here you can code your simulation and create the 3 plots.
1613077693726:## Here is some starter code for the simulation:
1613077693765:set.seed(898)
1613077693791:sigma_sq = 1
1613077693880:# Functions to compute the estimators
1613077693907:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613077693929:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613077693968:n <- 100
1613077693990:M <- 1000
1613077694043:sim <- list(
1613077694071:T1 = numeric(M),
1613077694094:T2 = numeric(M)
1613077694117:)
1613077694143:for (i in 1:M) {
1613077694164:# Sample from Normal
1613077694186:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613077694208:# Record the values of the two estimators:
1613077694230:sim$T1[i] <- T1(thesample)
1613077694252:sim$T2[i] <- T2(thesample)
1613077694274:}
1613077694425:#Bias
1613077694468:Bias_T1 <- function(T1) mean(sim$T1) - sigma_sq
1613077694495:Bias_T2 <- function(T2) mean(sim$T2) - sigma_sq
1613077694535:#Variance
1613077694574:Var_T1 <- function(T1) var(sim$T1)
1613077694603:Var_T2 <- function(T2) var(sim$T2)
1613077694663:#MSE
1613077694684:MSE_T1 <- function(T1) var(T1) + (mean(T1) - sigma_sq)^2
1613077694711:MSE_T2 <- function(T2) var(T2) + (mean(T2) - sigma_sq)^2
1613077694748:## Create your plots below. (I recommend using ggplot)
1613077694795:leftplot <- tibble(T1 = sim$T1) %>%
1613077694817:ggplot(aes(x = T1)) +
1613077694837:theme_classic() +
1613077694859:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613077695193:rightplot <- tibble(T2 = sim$T2) %>%
1613077695216:ggplot(aes(x = T2)) +
1613077695240:theme_classic() +
1613077695266:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613077695596:leftplot | rightplot
1613078456908:## Here you can code your simulation and create the 3 plots.
1613078456946:## Here is some starter code for the simulation:
1613078456988:set.seed(898)
1613078457010:sigma_sq = 1
1613078457033:# Functions to compute the estimators
1613078457067:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613078457094:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613078457139:n <- 100
1613078457163:M <- 1000
1613078457230:sim <- list(
1613078457252:T1 = numeric(M),
1613078457274:T2 = numeric(M)
1613078457296:)
1613078457327:for (i in 1:M) {
1613078457350:# Sample from Normal
1613078457372:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613078457396:# Record the values of the two estimators:
1613078457419:sim$T1[i] <- T1(thesample)
1613078457441:sim$T2[i] <- T2(thesample)
1613078457464:}
1613078457552:#Bias
1613078457594:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613078457618:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613078457666:#Variance
1613078457710:Var_T1 <- function(sigma_sq) var(sim$T1)
1613078457734:Var_T2 <- function(sigma_sq) var(sim$T2)
1613078457793:#MSE
1613078457815:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613078457845:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613078457890:## Create your plots below. (I recommend using ggplot)
1613078457931:leftplot <- tibble(T1 = sim$T1) %>%
1613078457954:ggplot(aes(x = T1)) +
1613078457977:theme_classic() +
1613078458006:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613078458342:rightplot <- tibble(T2 = sim$T2) %>%
1613078458364:ggplot(aes(x = T2)) +
1613078458385:theme_classic() +
1613078458406:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613078458718:leftplot | rightplot
1613078739322:## Here you can code your simulation and create the 3 plots.
1613078739365:## Here is some starter code for the simulation:
1613078739411:set.seed(898)
1613078739435:sigma_sq = 1
1613078739460:# Functions to compute the estimators
1613078739484:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613078739508:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613078739551:n <- 100
1613078739578:M <- 1000
1613078739641:sim <- list(
1613078739668:T1 = numeric(M),
1613078739697:T2 = numeric(M)
1613078739724:)
1613078739750:for (i in 1:M) {
1613078739772:# Sample from Normal
1613078739795:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613078739818:# Record the values of the two estimators:
1613078739840:sim$T1[i] <- T1(thesample)
1613078739864:sim$T2[i] <- T2(thesample)
1613078739890:}
1613078739978:#Bias
1613078740019:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613078740041:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613078740083:#Variance
1613078740121:Var_T1 <- function(sigma_sq) var(sim$T1)
1613078740145:Var_T2 <- function(sigma_sq) var(sim$T2)
1613078740207:#MSE
1613078740231:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613078740256:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613078740305:for(i in 1:100){
1613078740329:mse_T1 = MSE_T1(i)
1613078740352:mse_T2 = MSE_T2(i)
1613078740377:}
1613078818212:## Here you can code your simulation and create the 3 plots.
1613078818248:## Here is some starter code for the simulation:
1613078818283:set.seed(898)
1613078818304:sigma_sq = 1
1613078818325:# Functions to compute the estimators
1613078818348:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613078818372:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613078818421:n <- 100
1613078818447:M <- 1000
1613078818508:sim <- list(
1613078818532:T1 = numeric(M),
1613078818557:T2 = numeric(M)
1613078818579:)
1613078818610:for (i in 1:M) {
1613078818633:# Sample from Normal
1613078818652:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613078818675:# Record the values of the two estimators:
1613078818698:sim$T1[i] <- T1(thesample)
1613078818730:sim$T2[i] <- T2(thesample)
1613078818752:}
1613078818845:#Bias
1613078818887:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613078818915:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613078818960:#Variance
1613078819008:Var_T1 <- function(sigma_sq) var(sim$T1)
1613078819032:Var_T2 <- function(sigma_sq) var(sim$T2)
1613078819095:#MSE
1613078819120:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613078819143:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613078819180:for(i in 1:100){
1613078819203:mse_T1 <- MSE_T1(i)
1613078819227:mse_T2 <- MSE_T2(i)
1613078819255:}
1613079019061:## Here you can code your simulation and create the 3 plots.
1613079019106:## Here is some starter code for the simulation:
1613079019145:set.seed(898)
1613079019166:sigma_sq = 1
1613079019189:# Functions to compute the estimators
1613079019211:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079019234:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079019278:n <- 100
1613079019315:M <- 1000
1613079019374:sim <- list(
1613079019394:T1 = numeric(M),
1613079019422:T2 = numeric(M)
1613079019448:)
1613079019475:for (i in 1:M) {
1613079019499:# Sample from Normal
1613079019525:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079019550:# Record the values of the two estimators:
1613079019575:sim$T1[i] <- T1(thesample)
1613079019601:sim$T2[i] <- T2(thesample)
1613079019627:}
1613079019730:#Bias
1613079019773:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079019797:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079019839:#Variance
1613079019880:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079019903:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079019964:#MSE
1613079019990:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079020017:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079020078:for(i in 1:100){
1613079020099:a <- MSE_T1(sigma_sq = i)
1613079020124:b <- MSE_T2(sigma_sq = i)
1613079020148:}
1613079129219:install.packages("patchwork")
1613079149000:library(tidyverse)
1613079149080:# Define a function for both
1613079149108:MSE_T1 <- function(p,n) p*(1-p)/n
1613079149142:MSE_T2 <- function(p,n) p^n - 2*p^(n+1) + p^2
1613079149196:# Write a function to make the plot of p for fixed n
1613079149230:make_plot <- function(n) {
1613079149285:tibble(x = c(0,1)) %>%
1613079149313:ggplot(aes(x = x)) +
1613079149338:theme_bw() +
1613079149363:stat_function(fun = MSE_T1,args = list(n = n)) +
1613079149386:stat_function(fun = MSE_T2,args = list(n = n),linetype = 'dashed') +
1613079149408:labs(title = paste0("MSE for n = ",n),
1613079149433:subtitle = "T1 (Solid) vs T2 (Dashed)",
1613079149463:x = "p",
1613079149485:y = "MSE"
1613079149510:)
1613079149538:}
1613079149578:library(patchwork)
1613079149603:(make_plot(1) | make_plot(5)) /
1613079149629:(make_plot(10) | make_plot(20)) /
1613079149652:(make_plot(50) | make_plot(100))
1613079444802:## Here you can code your simulation and create the 3 plots.
1613079444842:## Here is some starter code for the simulation:
1613079444883:set.seed(898)
1613079444911:sigma_sq = 1
1613079444936:# Functions to compute the estimators
1613079444958:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079444982:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079445021:n <- 100
1613079445043:M <- 1000
1613079445104:sim <- list(
1613079445126:T1 = numeric(M),
1613079445153:T2 = numeric(M)
1613079445174:)
1613079445197:for (i in 1:M) {
1613079445224:# Sample from Normal
1613079445248:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079445272:# Record the values of the two estimators:
1613079445293:sim$T1[i] <- T1(thesample)
1613079445316:sim$T2[i] <- T2(thesample)
1613079445341:}
1613079445451:#Bias
1613079445493:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079445522:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079445562:#Variance
1613079445601:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079445628:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079445685:#MSE
1613079445714:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079445740:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079445785:for(i in 1:100){
1613079445807:x = Bias_T1(i)
1613079445830:mse1[i] <- x[1]
1613079445852:mse2[i] <- x[2]
1613079445880:}
1613079460540:## Here you can code your simulation and create the 3 plots.
1613079460576:## Here is some starter code for the simulation:
1613079460614:set.seed(898)
1613079460637:sigma_sq = 1
1613079460659:# Functions to compute the estimators
1613079460680:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079460700:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079460736:n <- 100
1613079460761:M <- 1000
1613079460814:sim <- list(
1613079460834:T1 = numeric(M),
1613079460867:T2 = numeric(M)
1613079460885:)
1613079460908:for (i in 1:M) {
1613079460930:# Sample from Normal
1613079460951:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079460972:# Record the values of the two estimators:
1613079460995:sim$T1[i] <- T1(thesample)
1613079461016:sim$T2[i] <- T2(thesample)
1613079461035:}
1613079461120:#Bias
1613079461155:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079461177:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079461216:#Variance
1613079461249:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079461272:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079461329:#MSE
1613079461352:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079461373:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079461412:for(i in 1:100){
1613079461443:x = Bias_T1(i)
1613079461464:mse1[i] = x[1]
1613079461482:mse2[i] = x[2]
1613079461503:}
1613079493617:## Here you can code your simulation and create the 3 plots.
1613079493661:## Here is some starter code for the simulation:
1613079493704:set.seed(898)
1613079493728:sigma_sq = 1
1613079493750:# Functions to compute the estimators
1613079493771:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079493803:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079493842:n <- 100
1613079493867:M <- 1000
1613079493930:sim <- list(
1613079493951:T1 = numeric(M),
1613079493970:T2 = numeric(M)
1613079493992:)
1613079494023:for (i in 1:M) {
1613079494047:# Sample from Normal
1613079494069:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079494090:# Record the values of the two estimators:
1613079494113:sim$T1[i] <- T1(thesample)
1613079494133:sim$T2[i] <- T2(thesample)
1613079494159:}
1613079494263:#Bias
1613079494300:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079494321:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079494361:#Variance
1613079494401:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079494434:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079494500:#MSE
1613079494525:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079494549:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079494608:mse1 = numeric(5)
1613079494631:mse2 = numeric(5)
1613079494654:for(i in 1:100){
1613079494676:x = Bias_T1(i)
1613079494698:mse1[i] = x[1]
1613079494721:mse2[i] = x[2]
1613079494741:}
1613079494801:## Create your plots below. (I recommend using ggplot)
1613079494839:leftplot <- tibble(T1 = a) %>%
1613079494861:ggplot(aes(x = T1)) +
1613079494884:theme_classic() +
1613079494911:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079507591:## Here you can code your simulation and create the 3 plots.
1613079507630:## Here is some starter code for the simulation:
1613079507668:set.seed(898)
1613079507696:sigma_sq = 1
1613079507720:# Functions to compute the estimators
1613079507742:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079507765:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079507815:n <- 100
1613079507838:M <- 1000
1613079507909:sim <- list(
1613079507929:T1 = numeric(M),
1613079507955:T2 = numeric(M)
1613079507975:)
1613079508009:for (i in 1:M) {
1613079508029:# Sample from Normal
1613079508051:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079508078:# Record the values of the two estimators:
1613079508099:sim$T1[i] <- T1(thesample)
1613079508120:sim$T2[i] <- T2(thesample)
1613079508145:}
1613079508239:#Bias
1613079508281:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079508307:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079508354:#Variance
1613079508394:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079508421:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079508481:#MSE
1613079508507:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079508530:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079508573:mse1 = numeric(5)
1613079508600:mse2 = numeric(5)
1613079508625:for(i in 1:100){
1613079508646:x = Bias_T1(i)
1613079508671:mse1[i] = x[1]
1613079508691:mse2[i] = x[2]
1613079508714:}
1613079508768:## Create your plots below. (I recommend using ggplot)
1613079508813:leftplot <- tibble(T1 = mse1) %>%
1613079508840:ggplot(aes(x = T1)) +
1613079508866:theme_classic() +
1613079508891:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079509210:rightplot <- tibble(T2 = mse2) %>%
1613079509236:ggplot(aes(x = T2)) +
1613079509258:theme_classic() +
1613079509280:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079509581:leftplot | rightplot
1613079656054:## Here you can code your simulation and create the 3 plots.
1613079656098:## Here is some starter code for the simulation:
1613079656143:set.seed(898)
1613079656165:sigma_sq = 1
1613079656191:# Functions to compute the estimators
1613079656213:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079656237:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079656278:n <- 100
1613079656303:M <- 1000
1613079656368:sim <- list(
1613079656390:T1 = numeric(M),
1613079656414:T2 = numeric(M)
1613079656437:)
1613079656466:for (i in 1:M) {
1613079656490:# Sample from Normal
1613079656513:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079656542:# Record the values of the two estimators:
1613079656566:sim$T1[i] <- T1(thesample)
1613079656588:sim$T2[i] <- T2(thesample)
1613079656611:}
1613079656704:#Bias
1613079656742:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079656763:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079656805:#Variance
1613079656841:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079656868:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079656927:#MSE
1613079656949:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079656972:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079657012:mse1 = numeric(5)
1613079657043:mse2 = numeric(5)
1613079657072:for(i in 1:100){
1613079657095:x = Bias_T1(i)
1613079657117:mse1[i] = x[1]
1613079657141:mse2[i] = x[2]
1613079657164:}
1613079657231:## Create your plots below. (I recommend using ggplot)
1613079657271:leftplot <- tibble(T1 = mse1) %>%
1613079657293:ggplot(aes(x = T1)) +
1613079657316:theme_classic() +
1613079657340:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079657659:rightplot <- tibble(T2 = mse2) %>%
1613079657684:ggplot(aes(x = T2)) +
1613079657707:theme_classic() +
1613079657738:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079658039:leftplot | rightplot
1613079672640:## Here you can code your simulation and create the 3 plots.
1613079672678:## Here is some starter code for the simulation:
1613079672722:set.seed(898)
1613079672745:sigma_sq = 1
1613079672768:# Functions to compute the estimators
1613079672788:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079672809:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079672848:n <- 100
1613079672872:M <- 1000
1613079672943:sim <- list(
1613079672964:T1 = numeric(M),
1613079672987:T2 = numeric(M)
1613079673011:)
1613079673042:for (i in 1:M) {
1613079673072:# Sample from Normal
1613079673100:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079673122:# Record the values of the two estimators:
1613079673143:sim$T1[i] <- T1(thesample)
1613079673166:sim$T2[i] <- T2(thesample)
1613079673190:}
1613079673276:#Bias
1613079673312:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079673334:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079673379:#Variance
1613079673424:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079673452:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079673514:#MSE
1613079673534:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079673558:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079673604:mse1 = numeric(5)
1613079673652:mse2 = numeric(5)
1613079673680:for(i in 1:100){
1613079673701:x = Bias_T1(i)
1613079673725:mse1[i] = x[1]
1613079673746:mse2[i] = x[2]
1613079673766:}
1613079673823:## Create your plots below. (I recommend using ggplot)
1613079673860:leftplot <- tibble(T1 = mse1) %>%
1613079673881:ggplot(aes(x = T1)) +
1613079673901:theme_classic() +
1613079673928:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079674264:rightplot <- tibble(T2 = mse2) %>%
1613079674285:ggplot(aes(x = T2)) +
1613079674306:theme_classic() +
1613079674330:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079674653:leftplot | rightplot
1613079933278:## Here you can code your simulation and create the 3 plots.
1613079933320:## Here is some starter code for the simulation:
1613079933365:set.seed(898)
1613079933388:sigma_sq = 1
1613079933415:# Functions to compute the estimators
1613079933437:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613079933461:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613079933506:n <- 100
1613079933532:M <- 1000
1613079933602:sim <- list(
1613079933630:T1 = numeric(M),
1613079933653:T2 = numeric(M)
1613079933676:)
1613079933708:for (i in 1:M) {
1613079933731:# Sample from Normal
1613079933755:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613079933778:# Record the values of the two estimators:
1613079933804:sim$T1[i] <- T1(thesample)
1613079933831:sim$T2[i] <- T2(thesample)
1613079933853:}
1613079933947:#Bias
1613079933983:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613079934008:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613079934049:#Variance
1613079934087:Var_T1 <- function(sigma_sq) var(sim$T1)
1613079934108:Var_T2 <- function(sigma_sq) var(sim$T2)
1613079934170:#MSE
1613079934193:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613079934218:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613079934264:mse1 = numeric(5)
1613079934292:mse2 = numeric(5)
1613079934319:for(i in 1:100){
1613079934341:x = Bias_T1(i)
1613079934364:mse1[i] = x[1]
1613079934405:mse2[i] = x[2]
1613079934429:}
1613079934506:## Create your plots below. (I recommend using ggplot)
1613079934565:leftplot <- tibble(T1 = mse1) %>%
1613079934592:ggplot(aes(x = T1)) +
1613079934617:theme_classic() +
1613079934643:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079934962:rightplot <- tibble(T2 = mse2) %>%
1613079934985:ggplot(aes(x = T2)) +
1613079935007:theme_classic() +
1613079935030:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613079935340:leftplot | rightplot
1613080113676:## Here you can code your simulation and create the 3 plots.
1613080113715:## Here is some starter code for the simulation:
1613080113754:set.seed(898)
1613080113780:sigma_sq = 1
1613080113805:# Functions to compute the estimators
1613080113827:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080113854:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080113897:n <- 100
1613080113922:M <- 1000
1613080113986:sim <- list(
1613080114006:T1 = numeric(M),
1613080114030:T2 = numeric(M)
1613080114052:)
1613080114090:for (i in 1:M) {
1613080114113:# Sample from Normal
1613080114134:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080114155:# Record the values of the two estimators:
1613080114178:sim$T1[i] <- T1(thesample)
1613080114200:sim$T2[i] <- T2(thesample)
1613080114222:}
1613080114345:#Bias
1613080114395:Bias_T1 <- function(sigma_sq) mean(sim$T1) - sigma_sq
1613080114420:Bias_T2 <- function(sigma_sq) mean(sim$T2) - sigma_sq
1613080114459:#Variance
1613080114536:Var_T1 <- function(sigma_sq) var(sim$T1)
1613080114560:Var_T2 <- function(sigma_sq) var(sim$T2)
1613080114627:#MSE
1613080114649:MSE_T1 <- function(sigma_sq) var(T1) + (mean(T1) - sigma_sq)^2
1613080114674:MSE_T2 <- function(sigma_sq) var(T2) + (mean(T2) - sigma_sq)^2
1613080114721:mse1 = numeric(100)
1613080114748:mse2 = numeric(100)
1613080114771:for(i in 1:100){
1613080114796:x = MSE_T1(i)
1613080114823:mse1[i] = x[1]
1613080114847:mse2[i] = x[2]
1613080114871:}
1613080167179:sim <- list(
1613080167197:T1 = numeric(M),
1613080167215:T2 = numeric(M)
1613080176050:sim <- list(
1613080182225:sim <- list(
1613080182243:T1 = numeric(M),
1613080182263:T2 = numeric(M)
1613080182295:)
1613080198754:for (i in 1:M) {
1613080198774:# Sample from Normal
1613080198798:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080198818:# Record the values of the two estimators:
1613080198837:sim$T1[i] <- T1(thesample)
1613080198856:sim$T2[i] <- T2(thesample)
1613080198875:}
1613080207247:View(sim)
1613080302813:set.seed(898)
1613080302832:sigma_sq = 1
1613080302849:# Functions to compute the estimators
1613080302869:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080302890:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080302922:n <- 100
1613080302943:M <- 1000
1613080302986:sim <- list(
1613080303005:T1 = numeric(M),
1613080303032:T2 = numeric(M)
1613080303051:)
1613080303072:for (i in 1:M) {
1613080303092:# Sample from Normal
1613080303107:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080303125:# Record the values of the two estimators:
1613080303144:sim$T1[i] <- T1(thesample)
1613080303162:sim$T2[i] <- T2(thesample)
1613080303179:}
1613080303264:#Bias
1613080303294:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080303313:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080303344:#Variance
1613080303374:Var_T1 <- var(sim$T1)
1613080303393:Var_T2 <- var(sim$T2)
1613080303439:#MSE
1613080303464:MSE_T1 <- var(T1) + (mean(sim$T1) - sigma_sq)^2
1613080331634:set.seed(898)
1613080331652:sigma_sq = 1
1613080331674:# Functions to compute the estimators
1613080331691:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080331723:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080331753:n <- 100
1613080331771:M <- 1000
1613080331812:sim <- list(
1613080331830:T1 = numeric(M),
1613080331849:T2 = numeric(M)
1613080331870:)
1613080331892:for (i in 1:M) {
1613080331911:# Sample from Normal
1613080331930:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080331950:# Record the values of the two estimators:
1613080331967:sim$T1[i] <- T1(thesample)
1613080331986:sim$T2[i] <- T2(thesample)
1613080332003:}
1613080332088:#Bias
1613080332118:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080332137:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080332173:#Variance
1613080332203:Var_T1 <- var(sim$T1)
1613080332224:Var_T2 <- var(sim$T2)
1613080332273:#MSE
1613080332292:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080332313:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080640867:mse1 = numeric(100)
1613080640899:mse2 = numeric(100)
1613080640975:for(i in 1:100){
1613080641015:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080641036:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080641073:n <- 100
1613080641094:M <- 1000
1613080641159:sim <- list(
1613080641179:T1 = numeric(M),
1613080641201:T2 = numeric(M)
1613080641222:)
1613080641245:for (i in 1:M) {
1613080641267:# Sample from Normal
1613080641288:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080641312:# Record the values of the two estimators:
1613080641333:sim$T1[i] <- T1(thesample)
1613080641359:sim$T2[i] <- T2(thesample)
1613080641382:}
1613080641420:#Bias
1613080641459:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080641481:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080641521:#Variance
1613080641560:Var_T1 <- var(sim$T1)
1613080641582:Var_T2 <- var(sim$T2)
1613080641639:#MSE
1613080641661:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080641686:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080641738:mse1[i] = MSE_T1
1613080641760:mse2[i] = MSE_T2
1613080641783:}
1613080665423:mse1 = numeric(100)
1613080665448:mse2 = numeric(100)
1613080665538:for(i in 1:100){
1613080665560:sigma_sq = i
1613080665582:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080665603:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080665647:n <- 100
1613080665669:M <- 1000
1613080665731:sim <- list(
1613080665753:T1 = numeric(M),
1613080665777:T2 = numeric(M)
1613080665798:)
1613080665817:for (i in 1:M) {
1613080665836:# Sample from Normal
1613080665863:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080665884:# Record the values of the two estimators:
1613080665909:sim$T1[i] <- T1(thesample)
1613080665936:sim$T2[i] <- T2(thesample)
1613080665958:}
1613080666004:#Bias
1613080666059:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080666088:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080666132:#Variance
1613080666172:Var_T1 <- var(sim$T1)
1613080666194:Var_T2 <- var(sim$T2)
1613080666260:#MSE
1613080666284:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080666307:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080666344:mse1[i] = MSE_T1
1613080666365:mse2[i] = MSE_T2
1613080666387:}
1613080716933:mse1 = numeric(2)
1613080716977:mse2 = numeric(2)
1613080717053:for(i in 1:2){
1613080717077:sigma_sq = i
1613080717099:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080717123:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080717164:n <- 100
1613080717188:M <- 1000
1613080717246:sim <- list(
1613080717269:T1 = numeric(M),
1613080717294:T2 = numeric(M)
1613080717334:)
1613080717357:for (i in 1:M) {
1613080717387:# Sample from Normal
1613080717413:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080717434:# Record the values of the two estimators:
1613080717454:sim$T1[i] <- T1(thesample)
1613080717477:sim$T2[i] <- T2(thesample)
1613080717499:}
1613080717539:#Bias
1613080717584:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080717609:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080717652:#Variance
1613080717701:Var_T1 <- var(sim$T1)
1613080717724:Var_T2 <- var(sim$T2)
1613080717791:#MSE
1613080717815:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080717839:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080717878:mse1[i] = MSE_T1
1613080717899:mse2[i] = MSE_T2
1613080717928:}
1613080824046:mse1 = numeric(2)
1613080824072:mse2 = numeric(2)
1613080824116:for(i in 1:2){
1613080824150:sigma_sq = i
1613080824173:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080824196:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080824241:n <- 100
1613080824263:M <- 1000
1613080824316:sim <- list(
1613080824336:T1 = numeric(M),
1613080824360:T2 = numeric(M)
1613080824382:)
1613080824408:for (j in 1:M) {
1613080824434:# Sample from Normal
1613080824459:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080824483:# Record the values of the two estimators:
1613080824508:sim$T1[j] <- T1(thesample)
1613080824537:sim$T2[j] <- T2(thesample)
1613080824563:}
1613080824605:#Bias
1613080824651:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080824674:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080824716:#Variance
1613080824755:Var_T1 <- var(sim$T1)
1613080824780:Var_T2 <- var(sim$T2)
1613080824839:#MSE
1613080824862:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080824888:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080824927:mse1[i] = MSE_T1
1613080824948:mse2[i] = MSE_T2
1613080824970:}
1613080845644:mse1 = numeric(10)
1613080845669:mse2 = numeric(10)
1613080845719:for(i in 1:10){
1613080845743:sigma_sq = i
1613080845767:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080845793:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080845838:n <- 100
1613080845861:M <- 1000
1613080845918:sim <- list(
1613080845946:T1 = numeric(M),
1613080845970:T2 = numeric(M)
1613080845997:)
1613080846022:for (j in 1:M) {
1613080846043:# Sample from Normal
1613080846066:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080846091:# Record the values of the two estimators:
1613080846115:sim$T1[j] <- T1(thesample)
1613080846140:sim$T2[j] <- T2(thesample)
1613080846162:}
1613080846206:#Bias
1613080846259:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080846282:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080846330:#Variance
1613080846371:Var_T1 <- var(sim$T1)
1613080846398:Var_T2 <- var(sim$T2)
1613080846453:#MSE
1613080846472:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080846492:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080846538:mse1[i] = MSE_T1
1613080846560:mse2[i] = MSE_T2
1613080846581:}
1613080853326:mse1 = numeric(100)
1613080853352:mse2 = numeric(100)
1613080853380:for(i in 1:100){
1613080853401:x = MSE_T1(i)
1613080853431:mse1[i] = x[1]
1613080853453:mse2[i] = x[2]
1613080853482:}
1613080858926:## Create your plots below. (I recommend using ggplot)
1613080858968:leftplot <- tibble(T1 = mse1) %>%
1613080858990:ggplot(aes(x = T1)) +
1613080859015:theme_classic() +
1613080859045:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080859419:rightplot <- tibble(T2 = mse2) %>%
1613080859443:ggplot(aes(x = T2)) +
1613080859471:theme_classic() +
1613080859493:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080859846:leftplot | rightplot
1613080905406:mse1 = numeric(10)
1613080905433:mse2 = numeric(10)
1613080905477:for(i in 1:10){
1613080905509:sigma_sq = i
1613080905535:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080905560:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080905599:n <- 100
1613080905623:M <- 1000
1613080905681:sim <- list(
1613080905703:T1 = numeric(M),
1613080905728:T2 = numeric(M)
1613080905751:)
1613080905775:for (j in 1:M) {
1613080905798:# Sample from Normal
1613080905820:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080905846:# Record the values of the two estimators:
1613080905868:sim$T1[j] <- T1(thesample)
1613080905897:sim$T2[j] <- T2(thesample)
1613080905924:}
1613080905969:#Bias
1613080906014:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080906036:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080906078:#Variance
1613080906115:Var_T1 <- var(sim$T1)
1613080906139:Var_T2 <- var(sim$T2)
1613080906203:#MSE
1613080906227:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080906252:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080906297:mse1[i] = MSE_T1
1613080906321:mse2[i] = MSE_T2
1613080906345:}
1613080910187:## Create your plots below. (I recommend using ggplot)
1613080910223:leftplot <- tibble(T1 = mse1) %>%
1613080910245:ggplot(aes(x = T1)) +
1613080910268:theme_classic() +
1613080910290:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080910601:rightplot <- tibble(T2 = mse2) %>%
1613080910625:ggplot(aes(x = T2)) +
1613080910653:theme_classic() +
1613080910675:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080910996:leftplot | rightplot
1613080980484:mse1 = numeric(10)
1613080980519:mse2 = numeric(10)
1613080980572:for(i in 1:10){
1613080980595:sigma_sq = i
1613080980619:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613080980647:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613080980688:n <- 100
1613080980712:M <- 1000
1613080980777:sim <- list(
1613080980798:T1 = numeric(M),
1613080980822:T2 = numeric(M)
1613080980846:)
1613080980869:for (j in 1:M) {
1613080980891:# Sample from Normal
1613080980914:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613080980942:# Record the values of the two estimators:
1613080980969:sim$T1[j] <- T1(thesample)
1613080980991:sim$T2[j] <- T2(thesample)
1613080981013:}
1613080981052:#Bias
1613080981099:Bias_T1 <- mean(sim$T1) - sigma_sq
1613080981122:Bias_T2 <- mean(sim$T2) - sigma_sq
1613080981162:#Variance
1613080981210:Var_T1 <- var(sim$T1)
1613080981234:Var_T2 <- var(sim$T2)
1613080981293:#MSE
1613080981317:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613080981338:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613080981378:mse1[i] = MSE_T1
1613080981402:mse2[i] = MSE_T2
1613080981423:}
1613080985218:## Create your plots below. (I recommend using ggplot)
1613080985309:leftplot <- tibble(T1 = mse1) %>%
1613080985329:ggplot(aes(x = T1)) +
1613080985349:theme_classic() +
1613080985371:xlab("")
1613080985657:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080985786:rightplot <- tibble(T2 = mse2) %>%
1613080985806:ggplot(aes(x = T2)) +
1613080985825:theme_classic() +
1613080985850:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613080986190:leftplot | rightplot
1613081003101:## Create your plots below. (I recommend using ggplot)
1613081003144:leftplot <- tibble(T1 = mse1) %>%
1613081003167:ggplot(aes(x = T1)) +
1613081003191:theme_classic() +
1613081003217:xlab("")
1613081003522:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081003676:rightplot <- tibble(T2 = mse2) %>%
1613081003697:ggplot(aes(x = T2)) +
1613081003726:theme_classic() +
1613081003750:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081004065:leftplot | rightplot
1613081004340:hist(mse1)
1613081057187:## Create your plots below. (I recommend using ggplot)
1613081057224:leftplot <- tibble(mse1 = mse1) %>%
1613081057244:ggplot(aes(x = mse1)) +
1613081057269:theme_classic() +
1613081057291:xlab("")
1613081057585:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081057731:rightplot <- tibble(T2 = mse2) %>%
1613081057755:ggplot(aes(x = T2)) +
1613081057782:theme_classic() +
1613081057805:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081058133:leftplot | rightplot
1613081058370:hist(mse1)
1613081083603:## Create your plots below. (I recommend using ggplot)
1613081083647:leftplot <- tibble(mse1) %>%
1613081083671:ggplot(aes(x = mse1)) +
1613081083694:theme_classic() +
1613081083717:xlab("")
1613081084022:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081084162:rightplot <- tibble(T2 = mse2) %>%
1613081084185:ggplot(aes(x = T2)) +
1613081084206:theme_classic() +
1613081084235:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081084556:leftplot | rightplot
1613081084804:hist(mse1)
1613081096581:## Create your plots below. (I recommend using ggplot)
1613081096629:leftplot <- tibble(mse1) %>%
1613081096652:ggplot(aes(x = mse1)) +
1613081096675:theme_classic() +
1613081096705:xlab("")+
1613081096727:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081097049:rightplot <- tibble(T2 = mse2) %>%
1613081097072:ggplot(aes(x = T2)) +
1613081097094:theme_classic() +
1613081097114:geom_histogram(aes(y = ..density..),bins = 30,colour = "black",fill = "light blue")
1613081097439:leftplot | rightplot
1613081097746:hist(mse1)
1613081135677:## Create your plots below. (I recommend using ggplot)
1613081135716:leftplot <- tibble(mse1) %>%
1613081135744:ggplot(aes(x = mse1)) +
1613081135767:theme_classic() +
1613081135791:xlab("")+
1613081135812:geom_histogram(aes(y = ..count..),bins = 3,colour = "black",fill = "light blue")
1613081136143:rightplot <- tibble(T2 = mse2) %>%
1613081136168:ggplot(aes(x = T2)) +
1613081136191:theme_classic() +
1613081136218:geom_histogram(aes(y = ..count..),bins = 3,colour = "black",fill = "light blue")
1613081136569:leftplot | rightplot
1613081136831:hist(mse1)
1613089744588:install.packages(c("opendatatoronto", "patchwork"))
1613089851319:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613089851358:library(openintro)
1613089852104:library(opendatatoronto)
1613089852256:library(dplyr)
1613089852338:library(patchwork)
1613089852406:library(tidyverse)
1613089853820:## Here you can code your simulation and create the 3 plots.
1613089853863:## Here is some starter code for the simulation:
1613089853902:set.seed(898)
1613089853924:sigma_sq = 1
1613089853946:# Functions to compute the estimators
1613089853974:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613089854004:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613089854081:n <- 100
1613089854112:M <- 1000
1613089854176:sim <- list(
1613089854199:T1 = numeric(M),
1613089854226:T2 = numeric(M)
1613089854247:)
1613089854276:for (i in 1:M) {
1613089854299:# Sample from Normal
1613089854320:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613089854342:# Record the values of the two estimators:
1613089854366:sim$T1[i] <- T1(thesample)
1613089854386:sim$T2[i] <- T2(thesample)
1613089854406:}
1613089854513:#Bias
1613089854558:Bias_T1 <- mean(sim$T1) - sigma_sq
1613089854585:Bias_T2 <- mean(sim$T2) - sigma_sq
1613089854630:#Variance
1613089854675:Var_T1 <- var(sim$T1)
1613089854699:Var_T2 <- var(sim$T2)
1613089854763:#MSE
1613089854786:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613089854813:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613089854885:mse1 = numeric(10)
1613089854919:mse2 = numeric(10)
1613089854961:for(i in 1:10){
1613089854984:sigma_sq = i
1613089855007:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613089855032:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613089855074:n <- 100
1613089855101:M <- 1000
1613089855159:sim <- list(
1613089855183:T1 = numeric(M),
1613089855210:T2 = numeric(M)
1613089855236:)
1613089855260:for (j in 1:M) {
1613089855283:# Sample from Normal
1613089855314:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613089855340:# Record the values of the two estimators:
1613089855364:sim$T1[j] <- T1(thesample)
1613089855389:sim$T2[j] <- T2(thesample)
1613089855411:}
1613089855452:#Bias
1613089855492:Bias_T1 <- mean(sim$T1) - sigma_sq
1613089855517:Bias_T2 <- mean(sim$T2) - sigma_sq
1613089855560:#Variance
1613089855598:Var_T1 <- var(sim$T1)
1613089855622:Var_T2 <- var(sim$T2)
1613089855691:#MSE
1613089855712:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613089855735:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613089855776:mse1[i] = MSE_T1
1613089855798:mse2[i] = MSE_T2
1613089855819:}
1613089856238:## Create your plots below. (I recommend using ggplot)
1613089856276:leftplot <- tibble(mse1) %>%
1613089856302:ggplot(aes(x = mse1)) +
1613089856326:theme_classic() +
1613089856354:xlab("")+
1613089856377:geom_histogram(aes(y = ..count..),bins = 3,colour = "black",fill = "light blue")
1613089856715:rightplot <- tibble(T2 = mse2) %>%
1613089856746:ggplot(aes(x = T2)) +
1613089856768:theme_classic() +
1613089856790:geom_histogram(aes(y = ..count..),bins = 3,colour = "black",fill = "light blue")
1613089857119:leftplot | rightplot
1613089857523:hist(mse1)
1613089857814:mean(sim$T1) - sigma_sq
1613089857853:mean(sim$T2) - sigma_sq
1613089857906:var(sim$T1)
1613089857947:var(sim$T2)
1613089858004:mse <- function(x) var(x) + (mean(x) - sigma_sq)^2
1613089858030:mse(sim$T1)
1613089858070:mse(sim$T2)
1613089858155:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613089858202:# You may need additional chunks.
1613089858242:# I would recommend not including any of the Cleaning process output here.
1613089858287:# get package
1613089858309:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613089858603:package
1613089858677:# get all resources for this package
1613089858701:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613089858790:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613089858811:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613089858863:# load the first datastore resource as a sample
1613089858890:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613089860460:data
1613089860807:data %>%
1613089860835:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613089860857:geom_point(col = "blue")
1613089861109:# Here you can run a linear regression on your two variables of interest.
1613089861153:lm(AutoTheft_AVG ~ Population, data = data)
1613089861314:# Use this to calculate generate a scatterplot of your variables.
1613089861347:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613089861388:data %>%
1613089861410:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613089861434:geom_point(col = "blue")+
1613089861457:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613089915889:## Create your plots below. (I recommend using ggplot)
1613089915927:leftplot <- tibble(mse1) %>%
1613089915953:ggplot(aes(x = mse1)) +
1613089915976:theme_classic() +
1613089915997:xlab("")+
1613089916022:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613089916383:rightplot <- tibble(T2 = mse2) %>%
1613089916417:ggplot(aes(x = T2)) +
1613089916440:theme_classic() +
1613089916467:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613089916811:leftplot | rightplot
1613089929561:mse1 = numeric(100)
1613089929589:mse2 = numeric(100)
1613089929629:for(i in 1:100){
1613089929653:sigma_sq = i
1613089929677:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613089929702:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613089929743:n <- 100
1613089929766:M <- 1000
1613089929829:sim <- list(
1613089929852:T1 = numeric(M),
1613089929876:T2 = numeric(M)
1613089929898:)
1613089929923:for (j in 1:M) {
1613089929944:# Sample from Normal
1613089929969:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613089929995:# Record the values of the two estimators:
1613089930024:sim$T1[j] <- T1(thesample)
1613089930047:sim$T2[j] <- T2(thesample)
1613089930070:}
1613089930112:#Bias
1613089930163:Bias_T1 <- mean(sim$T1) - sigma_sq
1613089930191:Bias_T2 <- mean(sim$T2) - sigma_sq
1613089930238:#Variance
1613089930279:Var_T1 <- var(sim$T1)
1613089930306:Var_T2 <- var(sim$T2)
1613089930367:#MSE
1613089930392:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613089930414:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613089930452:mse1[i] = MSE_T1
1613089930475:mse2[i] = MSE_T2
1613089930498:}
1613089935754:## Create your plots below. (I recommend using ggplot)
1613089935792:leftplot <- tibble(mse1) %>%
1613089935816:ggplot(aes(x = mse1)) +
1613089935838:theme_classic() +
1613089935860:xlab("")+
1613089935884:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613089936176:rightplot <- tibble(T2 = mse2) %>%
1613089936203:ggplot(aes(x = T2)) +
1613089936226:theme_classic() +
1613089936251:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613089936570:leftplot | rightplot
1613090700685:mse1 = numeric(100)
1613090700711:mse2 = numeric(100)
1613090700749:for(i in 1:100){
1613090700770:sigma_sq = i
1613090700791:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613090700813:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613090700850:n <- 100
1613090700871:M <- 1000
1613090700923:sim <- list(
1613090700944:T1 = numeric(M),
1613090700971:T2 = numeric(M)
1613090700994:)
1613090701024:for (j in 1:M) {
1613090701048:# Sample from Normal
1613090701071:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613090701098:# Record the values of the two estimators:
1613090701122:sim$T1[j] <- T1(thesample)
1613090701143:sim$T2[j] <- T2(thesample)
1613090701163:}
1613090701200:#Bias
1613090701240:Bias_T1 <- mean(sim$T1) - sigma_sq
1613090701262:Bias_T2 <- mean(sim$T2) - sigma_sq
1613090701306:#Variance
1613090701349:Var_T1 <- var(sim$T1)
1613090701369:Var_T2 <- var(sim$T2)
1613090701432:#MSE
1613090701454:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613090701483:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613090701524:mse1[i] = MSE_T1
1613090701545:mse2[i] = MSE_T2
1613090701566:}
1613090708709:## Create your plots below. (I recommend using ggplot)
1613090708747:leftplot <- tibble(mse1) %>%
1613090708766:ggplot(aes(x = mse1)) +
1613090708794:theme_classic() +
1613090708815:xlab("")+
1613090708837:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613090709153:rightplot <- tibble(T2 = mse2) %>%
1613090709174:ggplot(aes(x = T2)) +
1613090709197:theme_classic() +
1613090709231:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613090709552:leftplot | rightplot
1613090740164:set.seed(898)
1613090740187:mse1 = numeric(100)
1613090740213:mse2 = numeric(100)
1613090740256:for(i in 1:100){
1613090740280:sigma_sq = i
1613090740308:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613090740330:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613090740367:n <- 100
1613090740387:M <- 1000
1613090740442:sim <- list(
1613090740462:T1 = numeric(M),
1613090740482:T2 = numeric(M)
1613090740515:)
1613090740540:for (j in 1:M) {
1613090740564:# Sample from Normal
1613090740586:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613090740608:# Record the values of the two estimators:
1613090740633:sim$T1[j] <- T1(thesample)
1613090740653:sim$T2[j] <- T2(thesample)
1613090740674:}
1613090740711:#Bias
1613090740754:Bias_T1 <- mean(sim$T1) - sigma_sq
1613090740777:Bias_T2 <- mean(sim$T2) - sigma_sq
1613090740815:#Variance
1613090740856:Var_T1 <- var(sim$T1)
1613090740880:Var_T2 <- var(sim$T2)
1613090740941:#MSE
1613090740964:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613090740985:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613090741022:mse1[i] = MSE_T1
1613090741047:mse2[i] = MSE_T2
1613090741069:}
1613090743577:## Create your plots below. (I recommend using ggplot)
1613090743630:leftplot <- tibble(mse1) %>%
1613090743659:ggplot(aes(x = mse1)) +
1613090743689:theme_classic() +
1613090743713:xlab("")+
1613090743738:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613090744034:rightplot <- tibble(T2 = mse2) %>%
1613090744060:ggplot(aes(x = T2)) +
1613090744085:theme_classic() +
1613090744108:geom_histogram(aes(y = ..count..),bins = 10,colour = "black",fill = "light blue")
1613090744410:leftplot | rightplot
1613090790138:## Create your plots below. (I recommend using ggplot)
1613090790180:leftplot <- tibble(mse1) %>%
1613090790201:ggplot(aes(x = mse1)) +
1613090790221:theme_classic() +
1613090790243:xlab("")+
1613090790266:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090790580:rightplot <- tibble(T2 = mse2) %>%
1613090790607:ggplot(aes(x = T2)) +
1613090790628:theme_classic() +
1613090790651:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090790940:leftplot | rightplot
1613090807580:## Create your plots below. (I recommend using ggplot)
1613090807619:leftplot <- tibble(T1 = mse1) %>%
1613090807641:ggplot(aes(x = mse1)) +
1613090807669:theme_classic() +
1613090807693:xlab("")+
1613090807714:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090808031:rightplot <- tibble(T2 = mse2) %>%
1613090808052:ggplot(aes(x = T2)) +
1613090808073:theme_classic() +
1613090808095:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090808399:leftplot | rightplot
1613090821587:set.seed(898)
1613090821611:mse1 = numeric(100)
1613090821636:mse2 = numeric(100)
1613090821679:for(i in 1:10){
1613090821703:sigma_sq = i
1613090821726:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613090821748:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613090821795:n <- 100
1613090821815:M <- 1000
1613090821869:sim <- list(
1613090821892:T1 = numeric(M),
1613090821913:T2 = numeric(M)
1613090821935:)
1613090821956:for (j in 1:M) {
1613090821975:# Sample from Normal
1613090822003:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613090822033:# Record the values of the two estimators:
1613090822057:sim$T1[j] <- T1(thesample)
1613090822084:sim$T2[j] <- T2(thesample)
1613090822113:}
1613090822158:#Bias
1613090822196:Bias_T1 <- mean(sim$T1) - sigma_sq
1613090822228:Bias_T2 <- mean(sim$T2) - sigma_sq
1613090822268:#Variance
1613090822304:Var_T1 <- var(sim$T1)
1613090822324:Var_T2 <- var(sim$T2)
1613090822377:#MSE
1613090822399:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613090822419:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613090822458:mse1[i] = MSE_T1
1613090822479:mse2[i] = MSE_T2
1613090822500:}
1613090827643:## Create your plots below. (I recommend using ggplot)
1613090827679:leftplot <- tibble(T1 = mse1) %>%
1613090827705:ggplot(aes(x = mse1)) +
1613090827727:theme_classic() +
1613090827746:xlab("")+
1613090827765:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090828066:rightplot <- tibble(T2 = mse2) %>%
1613090828089:ggplot(aes(x = T2)) +
1613090828110:theme_classic() +
1613090828134:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090828440:leftplot | rightplot
1613090848546:set.seed(898)
1613090848567:mse1 = numeric(1000)
1613090848594:mse2 = numeric(1000)
1613090848636:for(i in 1:1000){
1613090848658:sigma_sq = i
1613090848684:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613090848708:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613090848749:n <- 100
1613090848770:M <- 1000
1613090848838:sim <- list(
1613090848860:T1 = numeric(M),
1613090848883:T2 = numeric(M)
1613090848907:)
1613090848928:for (j in 1:M) {
1613090848950:# Sample from Normal
1613090848970:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613090848992:# Record the values of the two estimators:
1613090849017:sim$T1[j] <- T1(thesample)
1613090849040:sim$T2[j] <- T2(thesample)
1613090849066:}
1613090849117:#Bias
1613090849154:Bias_T1 <- mean(sim$T1) - sigma_sq
1613090849175:Bias_T2 <- mean(sim$T2) - sigma_sq
1613090849219:#Variance
1613090849258:Var_T1 <- var(sim$T1)
1613090849283:Var_T2 <- var(sim$T2)
1613090849352:#MSE
1613090849374:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613090849396:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613090849434:mse1[i] = MSE_T1
1613090849465:mse2[i] = MSE_T2
1613090849488:}
1613090873495:## Create your plots below. (I recommend using ggplot)
1613090873535:leftplot <- tibble(T1 = mse1) %>%
1613090873556:ggplot(aes(x = mse1)) +
1613090873578:theme_classic() +
1613090873597:xlab("")+
1613090873623:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090873939:rightplot <- tibble(T2 = mse2) %>%
1613090873963:ggplot(aes(x = T2)) +
1613090873984:theme_classic() +
1613090874005:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090874326:leftplot | rightplot
1613090899967:## Create your plots below. (I recommend using ggplot)
1613090900002:leftplot <- tibble(T1 = mse1) %>%
1613090900024:ggplot(aes(x = T1)) +
1613090900046:theme_classic() +
1613090900075:xlab("")+
1613090900100:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090900416:rightplot <- tibble(T2 = mse2) %>%
1613090900436:ggplot(aes(x = T2)) +
1613090900456:theme_classic() +
1613090900476:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090900772:leftplot | rightplot
1613090937589:## Create your plots below. (I recommend using ggplot)
1613090937627:leftplot <- tibble(T1 = mse1) %>%
1613090937648:ggplot(aes(x = T1)) +
1613090937678:theme_classic() +
1613090937701:xlab("MSE of estimator T1")+
1613090937725:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090938037:rightplot <- tibble(T2 = mse2) %>%
1613090938058:ggplot(aes(x = T2)) +
1613090938082:theme_classic() +
1613090938103:xlab("MSE of estimator T2")+
1613090938125:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090938432:leftplot | rightplot
1613090956144:## Create your plots below. (I recommend using ggplot)
1613090956194:leftplot <- tibble(T1 = mse1) %>%
1613090956222:ggplot(aes(x = T1)) +
1613090956244:theme_classic() +
1613090956267:xlab("MSE of estimator T1")+
1613090956288:geom_histogram(aes(y = ..Count..),bins = 30,colour = "black",fill = "light blue")
1613090956608:rightplot <- tibble(T2 = mse2) %>%
1613090956633:ggplot(aes(x = T2)) +
1613090956659:theme_classic() +
1613090956680:xlab("MSE of estimator T2")+
1613090956705:geom_histogram(aes(y = ..Count..),bins = 30,colour = "black",fill = "light blue")
1613090957013:leftplot | rightplot
1613090965027:## Create your plots below. (I recommend using ggplot)
1613090965065:leftplot <- tibble(T1 = mse1) %>%
1613090965086:ggplot(aes(x = T1)) +
1613090965108:theme_classic() +
1613090965130:xlab("MSE of estimator T1")+
1613090965151:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090965462:rightplot <- tibble(T2 = mse2) %>%
1613090965484:ggplot(aes(x = T2)) +
1613090965511:theme_classic() +
1613090965533:xlab("MSE of estimator T2")+
1613090965553:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613090965860:leftplot | rightplot
1613091144134:set.seed(898)
1613091144155:mse1 = numeric(10)
1613091144178:mse2 = numeric(10)
1613091144214:for(i in 1:1000){
1613091144235:sigma_sq = i
1613091144253:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091144272:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091144308:n <- 100
1613091144330:M <- 1000
1613091144385:sim <- list(
1613091144407:T1 = numeric(M),
1613091144431:T2 = numeric(M)
1613091144455:)
1613091144474:for (j in 1:M) {
1613091144496:# Sample from Normal
1613091144519:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091144543:# Record the values of the two estimators:
1613091144564:sim$T1[j] <- T1(thesample)
1613091144587:sim$T2[j] <- T2(thesample)
1613091144607:}
1613091144643:#Bias
1613091144681:Bias_T1 <- mean(sim$T1) - sigma_sq
1613091144702:Bias_T2 <- mean(sim$T2) - sigma_sq
1613091144739:#Variance
1613091144775:Var_T1 <- var(sim$T1)
1613091144797:Var_T2 <- var(sim$T2)
1613091144858:#MSE
1613091144879:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613091144901:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613091144940:mse1[i] = MSE_T1
1613091144963:mse2[i] = MSE_T2
1613091144990:}
1613091238957:mse1 = numeric(10)
1613091250985:mse1[i]
1613091254363:mse1[i] = MSE_T1
1613091262505:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613091262526:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613091262564:mse1[i] = MSE_T1
1613091262585:mse2[i] = MSE_T2
1613091268463:for (j in 1:M) {
1613091268480:# Sample from Normal
1613091268497:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091268515:# Record the values of the two estimators:
1613091268532:sim$T1[j] <- T1(thesample)
1613091268548:sim$T2[j] <- T2(thesample)
1613091271647:for (j in 1:M) {
1613091271663:# Sample from Normal
1613091271686:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091271704:# Record the values of the two estimators:
1613091271721:sim$T1[j] <- T1(thesample)
1613091271738:sim$T2[j] <- T2(thesample)
1613091271758:}
1613091276270:sim <- list(
1613091276287:T1 = numeric(M),
1613091276302:T2 = numeric(M)
1613091276320:)
1613091276335:for (j in 1:M) {
1613091276359:# Sample from Normal
1613091276375:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091276399:# Record the values of the two estimators:
1613091276421:sim$T1[j] <- T1(thesample)
1613091276447:sim$T2[j] <- T2(thesample)
1613091276463:}
1613091280680:n <- 100
1613091280697:M <- 1000
1613091280739:sim <- list(
1613091280755:T1 = numeric(M),
1613091280774:T2 = numeric(M)
1613091280794:)
1613091280813:for (j in 1:M) {
1613091280832:# Sample from Normal
1613091280850:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091280867:# Record the values of the two estimators:
1613091280883:sim$T1[j] <- T1(thesample)
1613091280899:sim$T2[j] <- T2(thesample)
1613091280915:}
1613091392024:for(i in 1:1000){
1613091392043:sigma_sq = i
1613091392060:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091392077:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091392106:n <- 100
1613091392121:M <- 1000
1613091392161:sim <- list(
1613091392178:T1 = numeric(M),
1613091392195:T2 = numeric(M)
1613091392211:)
1613091392228:for (j in 1:M) {
1613091392246:# Sample from Normal
1613091392264:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091392280:# Record the values of the two estimators:
1613091392296:sim$T1[j] <- T1(thesample)
1613091392314:sim$T2[j] <- T2(thesample)
1613091392336:}
1613091398827:sigma_sq = i
1613091398846:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091398864:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091398895:n <- 100
1613091398910:M <- 1000
1613091398950:sim <- list(
1613091398968:T1 = numeric(M),
1613091398985:T2 = numeric(M)
1613091399003:)
1613091399020:for (j in 1:M) {
1613091399037:# Sample from Normal
1613091399056:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091399077:# Record the values of the two estimators:
1613091399094:sim$T1[j] <- T1(thesample)
1613091399112:sim$T2[j] <- T2(thesample)
1613091399129:}
1613091644111:set.seed(898)
1613091644135:bias1 = numeric(10)
1613091644161:bias2 = numeric(10)
1613091644205:for(i in 1:1000){
1613091644227:sigma_sq = i
1613091644249:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091644275:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091644322:n <- 100
1613091644344:M <- 1000
1613091644404:sim <- list(
1613091644426:T1 = numeric(M),
1613091644448:T2 = numeric(M)
1613091644469:)
1613091644493:for (j in 1:M) {
1613091644516:# Sample from Normal
1613091644545:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091644567:# Record the values of the two estimators:
1613091644593:sim$T1[j] <- T1(thesample)
1613091644616:sim$T2[j] <- T2(thesample)
1613091644644:}
1613091644689:#Bias
1613091644730:Bias_T1 <- mean(sim$T1) - sigma_sq
1613091644753:Bias_T2 <- mean(sim$T2) - sigma_sq
1613091644797:bias1[i] = Bias_T1
1613091644826:bias2[i] = Bias_T2
1613091644848:}
1613091668167:set.seed(898)
1613091668188:bias1 = numeric(10)
1613091668212:bias2 = numeric(10)
1613091668252:for(i in 1:10){
1613091668275:sigma_sq = i
1613091668298:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091668320:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091668358:n <- 100
1613091668381:M <- 1000
1613091668433:sim <- list(
1613091668454:T1 = numeric(M),
1613091668476:T2 = numeric(M)
1613091668500:)
1613091668521:for (j in 1:M) {
1613091668544:# Sample from Normal
1613091668565:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091668588:# Record the values of the two estimators:
1613091668611:sim$T1[j] <- T1(thesample)
1613091668632:sim$T2[j] <- T2(thesample)
1613091668654:}
1613091668689:#Bias
1613091668727:Bias_T1 <- mean(sim$T1) - sigma_sq
1613091668748:Bias_T2 <- mean(sim$T2) - sigma_sq
1613091668790:bias1[i] = Bias_T1
1613091668811:bias2[i] = Bias_T2
1613091668833:}
1613091677691:set.seed(898)
1613091677716:mse1 = numeric(10)
1613091677742:mse2 = numeric(10)
1613091677784:for(i in 1:10){
1613091677806:sigma_sq = i
1613091677835:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091677876:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091677922:n <- 100
1613091677951:M <- 1000
1613091678011:sim <- list(
1613091678040:T1 = numeric(M),
1613091678063:T2 = numeric(M)
1613091678088:)
1613091678116:for (j in 1:M) {
1613091678139:# Sample from Normal
1613091678163:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091678185:# Record the values of the two estimators:
1613091678207:sim$T1[j] <- T1(thesample)
1613091678235:sim$T2[j] <- T2(thesample)
1613091678258:}
1613091678297:#MSE
1613091678332:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613091678356:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613091678396:mse1[i] = MSE_T1
1613091678418:mse2[i] = MSE_T2
1613091678441:}
1613091682369:## Create your plots below. (I recommend using ggplot)
1613091682404:leftplot <- tibble(T1 = mse1) %>%
1613091682426:ggplot(aes(x = T1)) +
1613091682446:theme_classic() +
1613091682469:xlab("MSE of estimator T1")+
1613091682491:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091682799:rightplot <- tibble(T2 = mse2) %>%
1613091682826:ggplot(aes(x = T2)) +
1613091682850:theme_classic() +
1613091682871:xlab("MSE of estimator T2")+
1613091682894:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091683206:leftplot | rightplot
1613091776256:set.seed(898)
1613091776278:bias1 = numeric(10)
1613091776303:bias2 = numeric(10)
1613091776348:for(a in 1:10){
1613091776370:sigma_sq = a
1613091776392:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091776413:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091776451:n <- 100
1613091776471:M <- 1000
1613091776527:sim <- list(
1613091776553:T1 = numeric(M),
1613091776574:T2 = numeric(M)
1613091776597:)
1613091776620:for (b in 1:M) {
1613091776643:# Sample from Normal
1613091776665:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091776688:# Record the values of the two estimators:
1613091776712:sim$T1[b] <- T1(thesample)
1613091776735:sim$T2[b] <- T2(thesample)
1613091776757:}
1613091776794:#Bias
1613091776830:Bias_T1 <- mean(sim$T1) - sigma_sq
1613091776852:Bias_T2 <- mean(sim$T2) - sigma_sq
1613091776891:bias1[a] = Bias_T1
1613091776914:bias2[a] = Bias_T2
1613091776936:}
1613091853807:leftplotbias <- tibble(T1 = mse1) %>%
1613091853831:ggplot(aes(x = T1)) +
1613091853853:theme_classic() +
1613091853876:xlab("MSE of estimator T1")+
1613091853901:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091854219:rightplotbias <- tibble(T2 = mse2) %>%
1613091854240:ggplot(aes(x = T2)) +
1613091854262:theme_classic() +
1613091854283:xlab("MSE of estimator T2")+
1613091854306:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091854618:leftplotbias | rightplotbias
1613091867145:leftplotbias <- tibble(T1 = bias1) %>%
1613091867169:ggplot(aes(x = T1)) +
1613091867191:theme_classic() +
1613091867215:xlab("MSE of estimator T1")+
1613091867240:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091867555:rightplotbias <- tibble(T2 = bias2) %>%
1613091867579:ggplot(aes(x = T2)) +
1613091867601:theme_classic() +
1613091867625:xlab("MSE of estimator T2")+
1613091867648:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091867966:leftplotbias | rightplotbias
1613091981221:leftplotbias <- tibble(T1 = bias1) %>%
1613091981247:ggplot(aes(x = bias1)) +
1613091981267:theme_classic() +
1613091981296:xlab("Bias of estimator T1")+
1613091981318:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091981643:rightplotbias <- tibble(T2 = bias2) %>%
1613091981668:ggplot(aes(x = bias2)) +
1613091981692:theme_classic() +
1613091981714:xlab("Bias of estimator T2")+
1613091981744:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613091982051:leftplotbias | rightplotbias
1613091988865:set.seed(898)
1613091988888:bias1 = numeric(10)
1613091988918:bias2 = numeric(10)
1613091988957:for(a in 1:100){
1613091988981:sigma_sq = a
1613091989009:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613091989048:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613091989094:n <- 100
1613091989118:M <- 1000
1613091989183:sim <- list(
1613091989212:T1 = numeric(M),
1613091989237:T2 = numeric(M)
1613091989262:)
1613091989293:for (b in 1:M) {
1613091989317:# Sample from Normal
1613091989345:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613091989368:# Record the values of the two estimators:
1613091989402:sim$T1[b] <- T1(thesample)
1613091989427:sim$T2[b] <- T2(thesample)
1613091989452:}
1613091989496:#Bias
1613091989543:Bias_T1 <- mean(sim$T1) - sigma_sq
1613091989572:Bias_T2 <- mean(sim$T2) - sigma_sq
1613091989612:bias1[a] = Bias_T1
1613091989638:bias2[a] = Bias_T2
1613091989662:}
1613092013473:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613092013510:library(openintro)
1613092013533:library(opendatatoronto)
1613092013556:library(dplyr)
1613092013581:library(patchwork)
1613092013601:library(tidyverse)
1613092013661:## Here you can code your simulation and create the 3 plots.
1613092013716:## Here is some starter code for the simulation:
1613092013807:set.seed(898)
1613092013832:mse1 = numeric(10)
1613092013853:mse2 = numeric(10)
1613092013892:for(i in 1:10){
1613092013918:sigma_sq = i
1613092013939:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092013960:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092014009:n <- 100
1613092014033:M <- 1000
1613092014094:sim <- list(
1613092014121:T1 = numeric(M),
1613092014141:T2 = numeric(M)
1613092014160:)
1613092014180:for (j in 1:M) {
1613092014201:# Sample from Normal
1613092014224:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092014246:# Record the values of the two estimators:
1613092014267:sim$T1[j] <- T1(thesample)
1613092014291:sim$T2[j] <- T2(thesample)
1613092014313:}
1613092014355:#MSE
1613092014379:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613092014399:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613092014443:mse1[i] = MSE_T1
1613092014469:mse2[i] = MSE_T2
1613092014492:}
1613092014905:## Create your plots below. (I recommend using ggplot)
1613092014943:leftplot <- tibble(T1 = mse1) %>%
1613092014964:ggplot(aes(x = T1)) +
1613092014985:theme_classic() +
1613092015012:xlab("MSE of estimator T1")+
1613092015034:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092015341:rightplot <- tibble(T2 = mse2) %>%
1613092015362:ggplot(aes(x = T2)) +
1613092015384:theme_classic() +
1613092015406:xlab("MSE of estimator T2")+
1613092015428:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092015728:leftplot | rightplot
1613092016131:set.seed(898)
1613092016159:bias1 = numeric(10)
1613092016182:bias2 = numeric(10)
1613092016227:for(a in 1:100){
1613092016250:sigma_sq = a
1613092016271:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092016295:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092016333:n <- 100
1613092016355:M <- 1000
1613092016418:sim <- list(
1613092016439:T1 = numeric(M),
1613092016460:T2 = numeric(M)
1613092016481:)
1613092016505:for (b in 1:M) {
1613092016530:# Sample from Normal
1613092016554:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092016578:# Record the values of the two estimators:
1613092016598:sim$T1[b] <- T1(thesample)
1613092016622:sim$T2[b] <- T2(thesample)
1613092016645:}
1613092016689:#Bias
1613092016734:Bias_T1 <- mean(sim$T1) - sigma_sq
1613092016759:Bias_T2 <- mean(sim$T2) - sigma_sq
1613092016800:bias1[a] = Bias_T1
1613092016824:bias2[a] = Bias_T2
1613092016854:}
1613092019369:leftplotbias <- tibble(T1 = bias1) %>%
1613092019396:ggplot(aes(x = bias1)) +
1613092019416:theme_classic() +
1613092019439:xlab("Bias of estimator T1")+
1613092019460:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092019761:rightplotbias <- tibble(T2 = bias2) %>%
1613092019784:ggplot(aes(x = bias2)) +
1613092019813:theme_classic() +
1613092019834:xlab("Bias of estimator T2")+
1613092019856:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092020171:leftplotbias | rightplotbias
1613092020611:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613092020658:# You may need additional chunks.
1613092020698:# I would recommend not including any of the Cleaning process output here.
1613092020741:# get package
1613092020765:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613092020911:package
1613092020972:# get all resources for this package
1613092020997:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613092021081:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613092021104:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613092021147:# load the first datastore resource as a sample
1613092021171:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613092022759:data
1613092022959:data %>%
1613092022987:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613092023010:geom_point(col = "blue")
1613092023259:# Here you can run a linear regression on your two variables of interest.
1613092023306:lm(AutoTheft_AVG ~ Population, data = data)
1613092023455:# Use this to calculate generate a scatterplot of your variables.
1613092023483:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613092023526:data %>%
1613092023554:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613092023580:geom_point(col = "blue")+
1613092023603:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613092031671:leftplotbias <- tibble(T1 = bias1) %>%
1613092031696:ggplot(aes(x = bias1)) +
1613092031719:theme_classic() +
1613092031742:xlab("Bias of estimator T1")+
1613092031771:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092032084:rightplotbias <- tibble(T2 = bias2) %>%
1613092032106:ggplot(aes(x = bias2)) +
1613092032131:theme_classic() +
1613092032153:xlab("Bias of estimator T2")+
1613092032175:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092032484:leftplotbias | rightplotbias
1613092051261:set.seed(898)
1613092051287:bias1 = numeric(10)
1613092051311:bias2 = numeric(10)
1613092051356:for(a in 1:10){
1613092051380:sigma_sq = a
1613092051402:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092051433:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092051468:n <- 100
1613092051489:M <- 1000
1613092051544:sim <- list(
1613092051570:T1 = numeric(M),
1613092051595:T2 = numeric(M)
1613092051630:)
1613092051657:for (b in 1:M) {
1613092051681:# Sample from Normal
1613092051702:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092051734:# Record the values of the two estimators:
1613092051758:sim$T1[b] <- T1(thesample)
1613092051781:sim$T2[b] <- T2(thesample)
1613092051803:}
1613092051841:#Bias
1613092051883:Bias_T1 <- mean(sim$T1) - sigma_sq
1613092051903:Bias_T2 <- mean(sim$T2) - sigma_sq
1613092051937:bias1[a] = Bias_T1
1613092051959:bias2[a] = Bias_T2
1613092051980:}
1613092096616:## Create your plots below. (I recommend using ggplot)
1613092096654:leftplot <- tibble(T1 = mse1) %>%
1613092096674:ggplot(aes(x = T1)) +
1613092096696:theme_classic() +
1613092096716:xlab("MSE of estimator T1")+
1613092096735:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092097048:rightplot <- tibble(T2 = mse2) %>%
1613092097072:ggplot(aes(x = T2)) +
1613092097092:theme_classic() +
1613092097109:xlab("MSE of estimator T2")+
1613092097130:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092097446:leftplot | rightplot
1613092104574:set.seed(898)
1613092104596:mse1 = numeric(10)
1613092104621:mse2 = numeric(10)
1613092104663:for(i in 1:100){
1613092104692:sigma_sq = i
1613092104713:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092104733:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092104772:n <- 100
1613092104793:M <- 1000
1613092104847:sim <- list(
1613092104867:T1 = numeric(M),
1613092104893:T2 = numeric(M)
1613092104916:)
1613092104939:for (j in 1:M) {
1613092104961:# Sample from Normal
1613092104983:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092105009:# Record the values of the two estimators:
1613092105034:sim$T1[j] <- T1(thesample)
1613092105056:sim$T2[j] <- T2(thesample)
1613092105079:}
1613092105127:#MSE
1613092105150:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613092105171:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613092105209:mse1[i] = MSE_T1
1613092105232:mse2[i] = MSE_T2
1613092105253:}
1613092120963:## Create your plots below. (I recommend using ggplot)
1613092121001:leftplot <- tibble(T1 = mse1) %>%
1613092121025:ggplot(aes(x = T1)) +
1613092121045:theme_classic() +
1613092121065:xlab("MSE of estimator T1")+
1613092121087:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092121399:rightplot <- tibble(T2 = mse2) %>%
1613092121426:ggplot(aes(x = T2)) +
1613092121447:theme_classic() +
1613092121468:xlab("MSE of estimator T2")+
1613092121487:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613092121812:leftplot | rightplot
1613092255035:set.seed(898)
1613092255057:bias1 = numeric(10)
1613092255086:bias2 = numeric(10)
1613092255127:for(a in 1:10){
1613092255149:sigma_sq = a
1613092255170:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092255193:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092255233:n <- 100
1613092255256:M <- 1000
1613092255314:sim <- list(
1613092255336:T1 = numeric(M),
1613092255357:T2 = numeric(M)
1613092255379:)
1613092255403:for (b in 1:M) {
1613092255426:# Sample from Normal
1613092255451:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092255476:# Record the values of the two estimators:
1613092255500:sim$T1[b] <- T1(thesample)
1613092255528:sim$T2[b] <- T2(thesample)
1613092255551:}
1613092255596:#Bias
1613092255641:Bias_T1 <- mean(sim$T1) - sigma_sq
1613092255663:Bias_T2 <- mean(sim$T2) - sigma_sq
1613092255702:bias1[a] = Bias_T1
1613092255724:bias2[a] = Bias_T2
1613092255748:}
1613092257451:leftplotbias <- tibble(T1 = bias1) %>%
1613092257479:ggplot(aes(x = bias1)) +
1613092257502:theme_classic() +
1613092257528:xlab("Bias of estimator T1")+
1613092257551:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092257876:rightplotbias <- tibble(T2 = bias2) %>%
1613092257899:ggplot(aes(x = bias2)) +
1613092257927:theme_classic() +
1613092257952:xlab("Bias of estimator T2")+
1613092257976:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092258317:leftplotbias | rightplotbias
1613092265243:set.seed(898)
1613092265273:bias1 = numeric(10)
1613092265308:bias2 = numeric(10)
1613092265357:for(a in 1:100){
1613092265379:sigma_sq = a
1613092265403:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092265423:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092265467:n <- 100
1613092265491:M <- 1000
1613092265546:sim <- list(
1613092265568:T1 = numeric(M),
1613092265595:T2 = numeric(M)
1613092265617:)
1613092265645:for (b in 1:M) {
1613092265677:# Sample from Normal
1613092265708:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092265730:# Record the values of the two estimators:
1613092265755:sim$T1[b] <- T1(thesample)
1613092265778:sim$T2[b] <- T2(thesample)
1613092265801:}
1613092265848:#Bias
1613092265886:Bias_T1 <- mean(sim$T1) - sigma_sq
1613092265909:Bias_T2 <- mean(sim$T2) - sigma_sq
1613092265947:bias1[a] = Bias_T1
1613092265969:bias2[a] = Bias_T2
1613092265992:}
1613092269699:leftplotbias <- tibble(T1 = bias1) %>%
1613092269735:ggplot(aes(x = bias1)) +
1613092269756:theme_classic() +
1613092269787:xlab("Bias of estimator T1")+
1613092269810:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092270115:rightplotbias <- tibble(T2 = bias2) %>%
1613092270143:ggplot(aes(x = bias2)) +
1613092270174:theme_classic() +
1613092270194:xlab("Bias of estimator T2")+
1613092270216:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092270541:leftplotbias | rightplotbias
1613092435060:set.seed(898)
1613092435083:var1 = numeric(10)
1613092435110:var2 = numeric(10)
1613092435149:for(c in 1:100){
1613092435170:sigma_sq = c
1613092435194:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092435219:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092435255:n <- 100
1613092435277:M <- 1000
1613092435330:sim <- list(
1613092435351:T1 = numeric(M),
1613092435371:T2 = numeric(M)
1613092435391:)
1613092435413:for (d in 1:M) {
1613092435440:# Sample from Normal
1613092435467:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092435489:# Record the values of the two estimators:
1613092435511:sim$T1[d] <- T1(thesample)
1613092435532:sim$T2[d] <- T2(thesample)
1613092435554:}
1613092435592:#Bias
1613092435633:Bias_T1 <- mean(sim$T1) - sigma_sq
1613092435658:Bias_T2 <- mean(sim$T2) - sigma_sq
1613092435695:bias1[c] = Bias_T1
1613092435717:bias2[c] = Bias_T2
1613092435741:}
1613092439840:leftplotvar <- tibble(T1 = bias1) %>%
1613092439860:ggplot(aes(x = bias1)) +
1613092439884:theme_classic() +
1613092439908:xlab("Bias of estimator T1")+
1613092439929:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092440268:rightplotvar <- tibble(T2 = bias2) %>%
1613092440292:ggplot(aes(x = bias2)) +
1613092440314:theme_classic() +
1613092440336:xlab("Bias of estimator T2")+
1613092440363:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092440704:leftplotvar | rightplotvar
1613092575599:set.seed(898)
1613092575623:var1 = numeric(10)
1613092575654:var2 = numeric(10)
1613092575694:for(c in 1:100){
1613092575716:sigma_sq = c
1613092575744:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613092575777:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613092575814:n <- 100
1613092575836:M <- 1000
1613092575893:sim <- list(
1613092575913:T1 = numeric(M),
1613092575937:T2 = numeric(M)
1613092575958:)
1613092575983:for (d in 1:M) {
1613092576005:# Sample from Normal
1613092576028:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613092576050:# Record the values of the two estimators:
1613092576074:sim$T1[d] <- T1(thesample)
1613092576104:sim$T2[d] <- T2(thesample)
1613092576130:}
1613092576166:#Bias
1613092576214:Var_T1 <- var(sim$T1)
1613092576240:Var_T2 <- var(sim$T2)
1613092576278:var1[c] = Var_T1
1613092576299:var2[c] = Var_T2
1613092576328:}
1613092579762:leftplotvar <- tibble(T1 = bias1) %>%
1613092579784:ggplot(aes(x = bias1)) +
1613092579811:theme_classic() +
1613092579833:xlab("Bias of estimator T1")+
1613092579855:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092580206:rightplotvar <- tibble(T2 = bias2) %>%
1613092580228:ggplot(aes(x = bias2)) +
1613092580261:theme_classic() +
1613092580283:xlab("Bias of estimator T2")+
1613092580309:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092580614:leftplotvar | rightplotvar
1613092602787:leftplotvar <- tibble(T1 = var1) %>%
1613092602810:ggplot(aes(x = var1)) +
1613092602837:theme_classic() +
1613092602860:xlab("Bias of estimator T1")+
1613092602885:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092603199:rightplotvar <- tibble(T2 = var2) %>%
1613092603223:ggplot(aes(x = var2)) +
1613092603248:theme_classic() +
1613092603275:xlab("Bias of estimator T2")+
1613092603302:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613092603602:leftplotvar | rightplotvar
1613093344823:leftplotvar <- tibble(T1 = var1) %>%
1613093344843:ggplot(aes(x = var1)) +
1613093344864:theme_classic() +
1613093344884:xlab("Bias of estimator T1")+
1613093344907:title("hello")+
1613093344934:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093351762:leftplotvar <- tibble(T1 = var1) %>%
1613093351783:ggplot(aes(x = var1)) +
1613093351803:theme_classic() +
1613093351824:xlab("Bias of estimator T1")+
1613093351844:main("hello")+
1613093351865:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093386501:leftplotvar <- tibble(T1 = var1) %>%
1613093386523:ggplot(aes(x = var1)) +
1613093386547:theme_classic() +
1613093386569:xlab("Bias of estimator T1")+
1613093386590:ggtitle("hello")+
1613093386622:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093386985:rightplotvar <- tibble(T2 = var2) %>%
1613093387009:ggplot(aes(x = var2)) +
1613093387031:theme_classic() +
1613093387051:xlab("Bias of estimator T2")+
1613093387072:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093387368:leftplotvar | rightplotvar
1613093430121:leftplotvar <- tibble(T1 = var1) %>%
1613093430143:ggplot(aes(x = var1)) +
1613093430164:theme_classic() +
1613093430186:xlab("Bias of estimator T1")+
1613093430211:ggtitle("Histogram of variance for multiple sigma squared values")+
1613093430234:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093430543:rightplotvar <- tibble(T2 = var2) %>%
1613093430581:ggplot(aes(x = var2)) +
1613093430603:theme_classic() +
1613093430628:xlab("Bias of estimator T2")+
1613093430656:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093430971:leftplotvar | rightplotvar
1613093508449:leftplotvar <- tibble(T1 = var1) %>%
1613093508472:ggplot(aes(x = var1)) +
1613093508494:theme_classic() +
1613093508518:xlab("Bias of estimator T1")+
1613093508546:ggtitle("Histogram of variance for multiple sigma squared values")+
1613093508571:geom_fit_text()+
1613093508593:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093512628:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613093512677:library(openintro)
1613093512701:library(opendatatoronto)
1613093512726:library(dplyr)
1613093512749:library(patchwork)
1613093512771:library(tidyverse)
1613093512795:library(ggfittext)
1613093530574:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613093530614:library(openintro)
1613093530638:library(opendatatoronto)
1613093530662:library(dplyr)
1613093530686:library(patchwork)
1613093530709:library(tidyverse)
1613093530732:library(ggfittext)
1613093540227:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613093540266:library(openintro)
1613093540290:library(opendatatoronto)
1613093540311:library(dplyr)
1613093540336:library(patchwork)
1613093540360:library(tidyverse)
1613093540385:library(ggfittext)
1613093560190:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613093560231:library(openintro)
1613093560256:library(opendatatoronto)
1613093560279:library(dplyr)
1613093560301:library(patchwork)
1613093560330:library(tidyverse)
1613093560356:library(ggplot2)
1613093560382:library(ggfittext)
1613093721569:## Create your plots below. (I recommend using ggplot)
1613093721613:leftplot <- tibble(T1 = mse1) %>%
1613093721639:ggplot(aes(x = T1)) +
1613093721665:theme_classic() +
1613093721693:xlab("MSE of estimator T1")+
1613093721714:theme(plot.title = element_text(size=22))+
1613093721737:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613093722136:rightplot <- tibble(T2 = mse2) %>%
1613093722158:ggplot(aes(x = T2)) +
1613093722180:theme_classic() +
1613093722203:xlab("MSE of estimator T2")+
1613093722224:geom_histogram(aes(y = ..count..),bins = 30,colour = "black",fill = "light blue")
1613093722532:leftplot | rightplot
1613093737918:leftplotvar <- tibble(T1 = var1) %>%
1613093737941:ggplot(aes(x = var1)) +
1613093737962:theme_classic() +
1613093737984:xlab("Bias of estimator T1")+
1613093738009:ggtitle("Histogram of variance for multiple sigma squared values")+
1613093738031:theme(plot.title = element_text(size=22))+
1613093738060:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093738379:rightplotvar <- tibble(T2 = var2) %>%
1613093738398:ggplot(aes(x = var2)) +
1613093738418:theme_classic() +
1613093738441:xlab("Bias of estimator T2")+
1613093738463:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093738785:leftplotvar | rightplotvar
1613093744135:leftplotvar <- tibble(T1 = var1) %>%
1613093744156:ggplot(aes(x = var1)) +
1613093744178:theme_classic() +
1613093744199:xlab("Bias of estimator T1")+
1613093744220:ggtitle("Histogram of variance for multiple sigma squared values")+
1613093744241:theme(plot.title = element_text(size=10))+
1613093744261:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093744580:rightplotvar <- tibble(T2 = var2) %>%
1613093744603:ggplot(aes(x = var2)) +
1613093744624:theme_classic() +
1613093744646:xlab("Bias of estimator T2")+
1613093744668:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093744989:leftplotvar | rightplotvar
1613093818086:leftplotvar <- tibble(T1 = var1) %>%
1613093818107:ggplot(aes(x = var1)) +
1613093818126:theme_classic() +
1613093818147:xlab("Bias of estimator T1")+
1613093818168:ggtitle("Histogram of variance for multiple sigma squared values")+
1613093818187:theme(plot.title = element_text(size=8))+
1613093818208:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093818532:rightplotvar <- tibble(T2 = var2) %>%
1613093818554:ggplot(aes(x = var2)) +
1613093818574:theme_classic() +
1613093818598:xlab("Bias of estimator T2")+
1613093818620:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613093818955:leftplotvar | rightplotvar
1613094240719:leftplotvar <- tibble(T1 = var1) %>%
1613094240740:ggplot(aes(x = var1)) +
1613094240762:theme_classic() +
1613094240782:xlab("Variance of estimator T1")+
1613094240801:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094240819:theme(plot.title = element_text(size=8))+
1613094240843:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094241154:rightplotvar <- tibble(T2 = var2) %>%
1613094241176:ggplot(aes(x = var2)) +
1613094241196:theme_classic() +
1613094241216:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094241236:theme(plot.title = element_text(size=8))+
1613094241257:xlab("Variance of estimator T2")+
1613094241277:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094241638:leftplotvar | rightplotvar
1613094264119:set.seed(898)
1613094264143:mse1 = numeric(10)
1613094264165:mse2 = numeric(10)
1613094264205:for(i in 1:100){
1613094264227:sigma_sq = i
1613094264247:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094264269:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094264311:n <- 100
1613094264331:M <- 1000
1613094264390:sim <- list(
1613094264411:T1 = numeric(M),
1613094264431:T2 = numeric(M)
1613094264454:)
1613094264473:for (j in 1:M) {
1613094264495:# Sample from Normal
1613094264517:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094264537:# Record the values of the two estimators:
1613094264560:sim$T1[j] <- T1(thesample)
1613094264583:sim$T2[j] <- T2(thesample)
1613094264604:}
1613094264643:#MSE
1613094264668:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613094264687:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613094264728:mse1[i] = MSE_T1
1613094264747:mse2[i] = MSE_T2
1613094264772:}
1613094267443:## Create your plots below. (I recommend using ggplot)
1613094267481:leftplot <- tibble(T1 = mse1) %>%
1613094267506:ggplot(aes(x = T1)) +
1613094267529:theme_classic() +
1613094267553:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094267576:theme(plot.title = element_text(size=8))+
1613094267603:xlab("MSE of estimator T1")+
1613094267627:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094267948:rightplot <- tibble(T2 = mse2) %>%
1613094267972:ggplot(aes(x = T2)) +
1613094267996:theme_classic() +
1613094268018:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094268043:theme(plot.title = element_text(size=8))+
1613094268067:xlab("MSE of estimator T2")+
1613094268092:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094268413:leftplot | rightplot
1613094464139:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613094464180:library(openintro)
1613094464201:library(opendatatoronto)
1613094464221:library(dplyr)
1613094464242:library(patchwork)
1613094464263:library(tidyverse)
1613094464321:## Here you can code your simulation and create the 3 plots.
1613094464361:## Here is some starter code for the simulation:
1613094464424:set.seed(898)
1613094464450:mse1 = numeric(10)
1613094464473:mse2 = numeric(10)
1613094464513:for(i in 1:100){
1613094464533:sigma_sq = i
1613094464552:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094464572:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094464612:n <- 100
1613094464634:M <- 1000
1613094464689:sim <- list(
1613094464712:T1 = numeric(M),
1613094464737:T2 = numeric(M)
1613094464757:)
1613094464778:for (j in 1:M) {
1613094464798:# Sample from Normal
1613094464827:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094464850:# Record the values of the two estimators:
1613094464872:sim$T1[j] <- T1(thesample)
1613094464894:sim$T2[j] <- T2(thesample)
1613094464915:}
1613094464952:#MSE
1613094464973:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613094464993:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613094465036:mse1[i] = MSE_T1
1613094465058:mse2[i] = MSE_T2
1613094465078:}
1613094467960:## Create your plots below. (I recommend using ggplot)
1613094467999:leftplot <- tibble(T1 = mse1) %>%
1613094468020:ggplot(aes(x = T1)) +
1613094468041:theme_classic() +
1613094468059:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094468081:theme(plot.title = element_text(size=8))+
1613094468107:xlab("MSE of estimator T1")+
1613094468134:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094468453:rightplot <- tibble(T2 = mse2) %>%
1613094468472:ggplot(aes(x = T2)) +
1613094468491:theme_classic() +
1613094468510:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094468535:theme(plot.title = element_text(size=8))+
1613094468556:xlab("MSE of estimator T2")+
1613094468578:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094468896:leftplot | rightplot
1613094469346:set.seed(898)
1613094469371:bias1 = numeric(10)
1613094469396:bias2 = numeric(10)
1613094469438:for(a in 1:100){
1613094469459:sigma_sq = a
1613094469479:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094469500:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094469537:n <- 100
1613094469557:M <- 1000
1613094469737:sim <- list(
1613094469753:T1 = numeric(M),
1613094469791:T2 = numeric(M)
1613094469809:)
1613094469862:for (b in 1:M) {
1613094469879:# Sample from Normal
1613094469894:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094469912:# Record the values of the two estimators:
1613094469929:sim$T1[b] <- T1(thesample)
1613094469947:sim$T2[b] <- T2(thesample)
1613094469963:}
1613094469991:#Bias
1613094470021:Bias_T1 <- mean(sim$T1) - sigma_sq
1613094470039:Bias_T2 <- mean(sim$T2) - sigma_sq
1613094470082:bias1[a] = Bias_T1
1613094470102:bias2[a] = Bias_T2
1613094470120:}
1613094472819:leftplotbias <- tibble(T1 = bias1) %>%
1613094472847:ggplot(aes(x = bias1)) +
1613094472867:theme_classic() +
1613094472887:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613094472908:theme(plot.title = element_text(size=8))+
1613094472928:xlab("Bias of estimator T1")+
1613094472949:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094473270:rightplotbias <- tibble(T2 = bias2) %>%
1613094473291:ggplot(aes(x = bias2)) +
1613094473313:theme_classic() +
1613094473333:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613094473354:theme(plot.title = element_text(size=8))+
1613094473373:xlab("Bias of estimator T2")+
1613094473392:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094473723:leftplotbias | rightplotbias
1613094474123:set.seed(898)
1613094474153:var1 = numeric(10)
1613094474177:var2 = numeric(10)
1613094474220:for(c in 1:100){
1613094474243:sigma_sq = c
1613094474266:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094474293:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094474329:n <- 100
1613094474350:M <- 1000
1613094474404:sim <- list(
1613094474426:T1 = numeric(M),
1613094474447:T2 = numeric(M)
1613094474469:)
1613094474490:for (d in 1:M) {
1613094474511:# Sample from Normal
1613094474532:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094474554:# Record the values of the two estimators:
1613094474576:sim$T1[d] <- T1(thesample)
1613094474596:sim$T2[d] <- T2(thesample)
1613094474617:}
1613094474652:#Bias
1613094474689:Var_T1 <- var(sim$T1)
1613094474712:Var_T2 <- var(sim$T2)
1613094474749:var1[c] = Var_T1
1613094474769:var2[c] = Var_T2
1613094474791:}
1613094477450:leftplotvar <- tibble(T1 = var1) %>%
1613094477476:ggplot(aes(x = var1)) +
1613094477500:theme_classic() +
1613094477521:xlab("Variance of estimator T1")+
1613094477546:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094477569:theme(plot.title = element_text(size=8))+
1613094477591:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094477933:rightplotvar <- tibble(T2 = var2) %>%
1613094477957:ggplot(aes(x = var2)) +
1613094477977:theme_classic() +
1613094477998:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094478019:theme(plot.title = element_text(size=8))+
1613094478039:xlab("Variance of estimator T2")+
1613094478063:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094478389:leftplotvar | rightplotvar
1613094478806:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613094478848:# You may need additional chunks.
1613094478885:# I would recommend not including any of the Cleaning process output here.
1613094478925:# get package
1613094478947:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613094479244:package
1613094479301:# get all resources for this package
1613094479321:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613094479399:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613094479420:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613094479467:# load the first datastore resource as a sample
1613094479485:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613094481388:data
1613094481579:data %>%
1613094481604:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094481624:geom_point(col = "blue")
1613094481877:# Here you can run a linear regression on your two variables of interest.
1613094481917:lm(AutoTheft_AVG ~ Population, data = data)
1613094482045:# Use this to calculate generate a scatterplot of your variables.
1613094482074:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613094482127:data %>%
1613094482149:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094482172:geom_point(col = "blue")+
1613094482202:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613094746675:# Use this to calculate generate a scatterplot of your variables.
1613094746696:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613094746731:data %>%
1613094746752:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094746772:geom_point(col = "blue")+
1613094746794:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613094788643:# Here you can run a linear regression on your two variables of interest.
1613094788686:lm(AutoTheft_AVG ~ Population, data = data)
1613094803652:data %>%
1613094803683:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094803708:geom_point(col = "blue")
1613094916164:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613094916210:library(openintro)
1613094916237:library(opendatatoronto)
1613094916261:library(dplyr)
1613094916287:library(patchwork)
1613094916311:library(tidyverse)
1613094916389:## Here you can code your simulation and create the 3 plots.
1613094916436:## Here is some starter code for the simulation:
1613094916501:set.seed(898)
1613094916528:mse1 = numeric(10)
1613094916555:mse2 = numeric(10)
1613094916593:for(i in 1:100){
1613094916612:sigma_sq = i
1613094916634:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094916656:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094916696:n <- 100
1613094916718:M <- 1000
1613094916775:sim <- list(
1613094916795:T1 = numeric(M),
1613094916817:T2 = numeric(M)
1613094916843:)
1613094916866:for (j in 1:M) {
1613094916891:# Sample from Normal
1613094916912:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094916936:# Record the values of the two estimators:
1613094916959:sim$T1[j] <- T1(thesample)
1613094916982:sim$T2[j] <- T2(thesample)
1613094917003:}
1613094917044:#MSE
1613094917064:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613094917084:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613094917119:mse1[i] = MSE_T1
1613094917143:mse2[i] = MSE_T2
1613094917166:}
1613094920162:## Create your plots below. (I recommend using ggplot)
1613094920202:leftplot <- tibble(T1 = mse1) %>%
1613094920223:ggplot(aes(x = T1)) +
1613094920246:theme_classic() +
1613094920274:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094920298:theme(plot.title = element_text(size=8))+
1613094920327:xlab("MSE of estimator T1")+
1613094920351:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094920652:rightplot <- tibble(T2 = mse2) %>%
1613094920673:ggplot(aes(x = T2)) +
1613094920695:theme_classic() +
1613094920721:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613094920742:theme(plot.title = element_text(size=8))+
1613094920766:xlab("MSE of estimator T2")+
1613094920788:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094921085:leftplot | rightplot
1613094921468:set.seed(898)
1613094921500:bias1 = numeric(10)
1613094921548:bias2 = numeric(10)
1613094921596:for(a in 1:100){
1613094921619:sigma_sq = a
1613094921642:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094921670:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094921713:n <- 100
1613094921736:M <- 1000
1613094921803:sim <- list(
1613094921825:T1 = numeric(M),
1613094921848:T2 = numeric(M)
1613094921872:)
1613094921895:for (b in 1:M) {
1613094921919:# Sample from Normal
1613094921941:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094921964:# Record the values of the two estimators:
1613094921987:sim$T1[b] <- T1(thesample)
1613094922011:sim$T2[b] <- T2(thesample)
1613094922034:}
1613094922076:#Bias
1613094922119:Bias_T1 <- mean(sim$T1) - sigma_sq
1613094922144:Bias_T2 <- mean(sim$T2) - sigma_sq
1613094922187:bias1[a] = Bias_T1
1613094922209:bias2[a] = Bias_T2
1613094922240:}
1613094924669:leftplotbias <- tibble(T1 = bias1) %>%
1613094924697:ggplot(aes(x = bias1)) +
1613094924721:theme_classic() +
1613094924746:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613094924770:theme(plot.title = element_text(size=8))+
1613094924793:xlab("Bias of estimator T1")+
1613094924814:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094925113:rightplotbias <- tibble(T2 = bias2) %>%
1613094925135:ggplot(aes(x = bias2)) +
1613094925155:theme_classic() +
1613094925178:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613094925199:theme(plot.title = element_text(size=8))+
1613094925219:xlab("Bias of estimator T2")+
1613094925239:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094925557:leftplotbias | rightplotbias
1613094925921:set.seed(898)
1613094925951:var1 = numeric(10)
1613094925977:var2 = numeric(10)
1613094926021:for(c in 1:100){
1613094926043:sigma_sq = c
1613094926066:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613094926094:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613094926134:n <- 100
1613094926158:M <- 1000
1613094926222:sim <- list(
1613094926246:T1 = numeric(M),
1613094926267:T2 = numeric(M)
1613094926296:)
1613094926318:for (d in 1:M) {
1613094926340:# Sample from Normal
1613094926362:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613094926386:# Record the values of the two estimators:
1613094926409:sim$T1[d] <- T1(thesample)
1613094926431:sim$T2[d] <- T2(thesample)
1613094926461:}
1613094926500:#Bias
1613094926543:Var_T1 <- var(sim$T1)
1613094926567:Var_T2 <- var(sim$T2)
1613094926615:var1[c] = Var_T1
1613094926639:var2[c] = Var_T2
1613094926662:}
1613094929439:leftplotvar <- tibble(T1 = var1) %>%
1613094929472:ggplot(aes(x = var1)) +
1613094929494:theme_classic() +
1613094929518:xlab("Variance of estimator T1")+
1613094929540:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094929570:theme(plot.title = element_text(size=8))+
1613094929590:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094929895:rightplotvar <- tibble(T2 = var2) %>%
1613094929917:ggplot(aes(x = var2)) +
1613094929939:theme_classic() +
1613094929960:ggtitle("Histogram of variance for multiple sigma squared values")+
1613094929985:theme(plot.title = element_text(size=8))+
1613094930010:xlab("Variance of estimator T2")+
1613094930031:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613094930353:leftplotvar | rightplotvar
1613094930765:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613094930812:# You may need additional chunks.
1613094930851:# I would recommend not including any of the Cleaning process output here.
1613094930891:# get package
1613094930913:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613094931023:package
1613094931086:# get all resources for this package
1613094931110:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613094931180:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613094931203:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613094931252:# load the first datastore resource as a sample
1613094931273:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613094932958:data
1613094933158:data %>%
1613094933188:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094933210:geom_point(col = "blue")
1613094933451:# Here you can run a linear regression on your two variables of interest.
1613094933499:lm(AutoTheft_AVG ~ Population, data = data)
1613094933640:# Use this to calculate generate a scatterplot of your variables.
1613094933668:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613094933710:data %>%
1613094933738:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613094933759:geom_point(col = "blue")+
1613094933782:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613146195101:install.packages(c("opendatatoronto", "patchwork"))
1613146231006:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613146231045:library(openintro)
1613146231800:library(opendatatoronto)
1613146231998:library(dplyr)
1613146232119:library(patchwork)
1613146232195:library(tidyverse)
1613146233648:set.seed(898)
1613146233678:mse1 = numeric(10)
1613146233702:mse2 = numeric(10)
1613146233751:for(i in 1:100){
1613146233775:sigma_sq = i
1613146233799:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146233827:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146233869:n <- 100
1613146233893:M <- 1000
1613146233960:sim <- list(
1613146233989:T1 = numeric(M),
1613146234013:T2 = numeric(M)
1613146234050:)
1613146234124:for (j in 1:M) {
1613146234150:# Sample from Normal
1613146234177:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146234201:# Record the values of the two estimators:
1613146234222:sim$T1[j] <- T1(thesample)
1613146234243:sim$T2[j] <- T2(thesample)
1613146234266:}
1613146234302:#MSE
1613146234326:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613146234347:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613146234388:mse1[i] = MSE_T1
1613146234412:mse2[i] = MSE_T2
1613146234436:}
1613146237052:## Create your plots below. (I recommend using ggplot)
1613146237105:leftplot <- tibble(T1 = mse1) %>%
1613146237130:ggplot(aes(x = T1)) +
1613146237161:theme_classic() +
1613146237185:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613146237206:theme(plot.title = element_text(size=8))+
1613146237230:xlab("MSE of estimator T1")+
1613146237251:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146237631:rightplot <- tibble(T2 = mse2) %>%
1613146237652:ggplot(aes(x = T2)) +
1613146237674:theme_classic() +
1613146237698:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613146237723:theme(plot.title = element_text(size=8))+
1613146237747:xlab("MSE of estimator T2")+
1613146237778:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146238099:leftplot | rightplot
1613146238712:set.seed(898)
1613146238742:bias1 = numeric(10)
1613146238769:bias2 = numeric(10)
1613146238811:for(a in 1:100){
1613146238834:sigma_sq = a
1613146238858:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146238880:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146238922:n <- 100
1613146238949:M <- 1000
1613146239008:sim <- list(
1613146239030:T1 = numeric(M),
1613146239057:T2 = numeric(M)
1613146239078:)
1613146239100:for (b in 1:M) {
1613146239120:# Sample from Normal
1613146239140:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146239161:# Record the values of the two estimators:
1613146239186:sim$T1[b] <- T1(thesample)
1613146239208:sim$T2[b] <- T2(thesample)
1613146239229:}
1613146239268:#Bias
1613146239309:Bias_T1 <- mean(sim$T1) - sigma_sq
1613146239333:Bias_T2 <- mean(sim$T2) - sigma_sq
1613146239374:bias1[a] = Bias_T1
1613146239394:bias2[a] = Bias_T2
1613146239415:}
1613146241994:leftplotbias <- tibble(T1 = bias1) %>%
1613146242030:ggplot(aes(x = bias1)) +
1613146242054:theme_classic() +
1613146242079:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613146242103:theme(plot.title = element_text(size=8))+
1613146242125:xlab("Bias of estimator T1")+
1613146242149:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146242485:rightplotbias <- tibble(T2 = bias2) %>%
1613146242505:ggplot(aes(x = bias2)) +
1613146242526:theme_classic() +
1613146242546:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613146242570:theme(plot.title = element_text(size=8))+
1613146242592:xlab("Bias of estimator T2")+
1613146242615:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146242942:leftplotbias | rightplotbias
1613146243353:set.seed(898)
1613146243384:var1 = numeric(10)
1613146243409:var2 = numeric(10)
1613146243450:for(c in 1:100){
1613146243471:sigma_sq = c
1613146243494:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146243516:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146243563:n <- 100
1613146243585:M <- 1000
1613146243641:sim <- list(
1613146243680:T1 = numeric(M),
1613146243710:T2 = numeric(M)
1613146243732:)
1613146243755:for (d in 1:M) {
1613146243775:# Sample from Normal
1613146243797:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146243819:# Record the values of the two estimators:
1613146243842:sim$T1[d] <- T1(thesample)
1613146243870:sim$T2[d] <- T2(thesample)
1613146243893:}
1613146243936:#Bias
1613146243975:Var_T1 <- var(sim$T1)
1613146244002:Var_T2 <- var(sim$T2)
1613146244053:var1[c] = Var_T1
1613146244076:var2[c] = Var_T2
1613146244104:}
1613146246899:mean(var1)
1613146246968:leftplotvar <- tibble(T1 = var1) %>%
1613146246996:ggplot(aes(x = var1)) +
1613146247015:theme_classic() +
1613146247043:xlab("Variance of estimator T1")+
1613146247071:ggtitle("Histogram of variance for multiple sigma squared values")+
1613146247095:theme(plot.title = element_text(size=8))+
1613146247118:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146247452:rightplotvar <- tibble(T2 = var2) %>%
1613146247474:ggplot(aes(x = var2)) +
1613146247504:theme_classic() +
1613146247526:ggtitle("Histogram of variance for multiple sigma squared values")+
1613146247559:theme(plot.title = element_text(size=8))+
1613146247581:xlab("Variance of estimator T2")+
1613146247604:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146247924:leftplotvar | rightplotvar
1613146248373:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613146248428:# You may need additional chunks.
1613146248480:# I would recommend not including any of the Cleaning process output here.
1613146248522:# get package
1613146248545:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613146248828:package
1613146248911:# get all resources for this package
1613146248941:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613146249031:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613146249054:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613146249109:# load the first datastore resource as a sample
1613146249135:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613146250791:data
1613146251081:data %>%
1613146251111:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613146251135:geom_point(col = "blue")
1613146251370:# Here you can run a linear regression on your two variables of interest.
1613146251420:lm(AutoTheft_AVG ~ Population, data = data)
1613146251590:# Use this to calculate generate a scatterplot of your variables.
1613146251620:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613146251661:data %>%
1613146251686:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613146251710:geom_point(col = "blue")+
1613146251733:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613146290064:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613146290106:library(openintro)
1613146290133:library(opendatatoronto)
1613146290156:library(dplyr)
1613146290177:library(patchwork)
1613146290199:library(tidyverse)
1613146290262:set.seed(898)
1613146290291:mse1 = numeric(10)
1613146290431:mse2 = numeric(10)
1613146290479:for(i in 1:100){
1613146290502:sigma_sq = i
1613146290525:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146290552:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146290592:n <- 100
1613146290615:M <- 1000
1613146290667:sim <- list(
1613146290685:T1 = numeric(M),
1613146290707:T2 = numeric(M)
1613146290726:)
1613146290747:for (j in 1:M) {
1613146290769:# Sample from Normal
1613146290792:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146290817:# Record the values of the two estimators:
1613146290847:sim$T1[j] <- T1(thesample)
1613146290872:sim$T2[j] <- T2(thesample)
1613146290895:}
1613146290935:#MSE
1613146290956:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613146290979:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613146291036:mse1[i] = MSE_T1
1613146291059:mse2[i] = MSE_T2
1613146291081:}
1613146293732:mean(mse1)
1613146293769:mean(mse2)
1613146293842:## Create your plots below. (I recommend using ggplot)
1613146293882:leftplot <- tibble(T1 = mse1) %>%
1613146293904:ggplot(aes(x = T1)) +
1613146293927:theme_classic() +
1613146293948:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613146293969:theme(plot.title = element_text(size=8))+
1613146293994:xlab("MSE of estimator T1")+
1613146294019:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146294359:rightplot <- tibble(T2 = mse2) %>%
1613146294383:ggplot(aes(x = T2)) +
1613146294408:theme_classic() +
1613146294432:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613146294456:theme(plot.title = element_text(size=8))+
1613146294477:xlab("MSE of estimator T2")+
1613146294502:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146294841:leftplot | rightplot
1613146295277:set.seed(898)
1613146295309:bias1 = numeric(10)
1613146295339:bias2 = numeric(10)
1613146295382:for(a in 1:100){
1613146295411:sigma_sq = a
1613146295438:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146295460:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146295504:n <- 100
1613146295528:M <- 1000
1613146295593:sim <- list(
1613146295617:T1 = numeric(M),
1613146295640:T2 = numeric(M)
1613146295663:)
1613146295688:for (b in 1:M) {
1613146295713:# Sample from Normal
1613146295742:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146295767:# Record the values of the two estimators:
1613146295790:sim$T1[b] <- T1(thesample)
1613146295812:sim$T2[b] <- T2(thesample)
1613146295836:}
1613146295876:#Bias
1613146295927:Bias_T1 <- mean(sim$T1) - sigma_sq
1613146295953:Bias_T2 <- mean(sim$T2) - sigma_sq
1613146295996:bias1[a] = Bias_T1
1613146296022:bias2[a] = Bias_T2
1613146296051:}
1613146298775:mean(bias1)
1613146298813:mean(bias2)
1613146298889:leftplotbias <- tibble(T1 = bias1) %>%
1613146298918:ggplot(aes(x = bias1)) +
1613146298940:theme_classic() +
1613146298963:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613146298985:theme(plot.title = element_text(size=8))+
1613146299008:xlab("Bias of estimator T1")+
1613146299034:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146299360:rightplotbias <- tibble(T2 = bias2) %>%
1613146299382:ggplot(aes(x = bias2)) +
1613146299404:theme_classic() +
1613146299425:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613146299448:theme(plot.title = element_text(size=8))+
1613146299472:xlab("Bias of estimator T2")+
1613146299493:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146299828:leftplotbias | rightplotbias
1613146300238:set.seed(898)
1613146300270:var1 = numeric(10)
1613146300294:var2 = numeric(10)
1613146300339:for(c in 1:100){
1613146300362:sigma_sq = c
1613146300386:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613146300408:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613146300448:n <- 100
1613146300473:M <- 1000
1613146300534:sim <- list(
1613146300562:T1 = numeric(M),
1613146300585:T2 = numeric(M)
1613146300612:)
1613146300639:for (d in 1:M) {
1613146300664:# Sample from Normal
1613146300685:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613146300707:# Record the values of the two estimators:
1613146300727:sim$T1[d] <- T1(thesample)
1613146300751:sim$T2[d] <- T2(thesample)
1613146300772:}
1613146300808:#Bias
1613146300844:Var_T1 <- var(sim$T1)
1613146300868:Var_T2 <- var(sim$T2)
1613146300907:var1[c] = Var_T1
1613146300940:var2[c] = Var_T2
1613146300964:}
1613146303602:mean(var1)
1613146303641:mean(var2)
1613146303715:leftplotvar <- tibble(T1 = var1) %>%
1613146303742:ggplot(aes(x = var1)) +
1613146303763:theme_classic() +
1613146303786:xlab("Variance of estimator T1")+
1613146303810:ggtitle("Histogram of variance for multiple sigma squared values")+
1613146303837:theme(plot.title = element_text(size=8))+
1613146303859:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146304207:rightplotvar <- tibble(T2 = var2) %>%
1613146304228:ggplot(aes(x = var2)) +
1613146304256:theme_classic() +
1613146304279:ggtitle("Histogram of variance for multiple sigma squared values")+
1613146304304:theme(plot.title = element_text(size=8))+
1613146304328:xlab("Variance of estimator T2")+
1613146304350:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613146304699:leftplotvar | rightplotvar
1613146305123:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613146305174:# You may need additional chunks.
1613146305221:# I would recommend not including any of the Cleaning process output here.
1613146305264:# get package
1613146305287:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613146305359:package
1613146305440:# get all resources for this package
1613146305463:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613146305539:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613146305563:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613146305614:# load the first datastore resource as a sample
1613146305639:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613146307130:data
1613146307359:data %>%
1613146307386:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613146307407:geom_point(col = "blue")
1613146307679:# Here you can run a linear regression on your two variables of interest.
1613146307723:lm(AutoTheft_AVG ~ Population, data = data)
1613146307870:# Use this to calculate generate a scatterplot of your variables.
1613146307896:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613146307932:data %>%
1613146307956:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613146307978:geom_point(col = "blue")+
1613146308001:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613153122878:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613153122932:library(openintro)
1613153122969:library(opendatatoronto)
1613153123004:library(dplyr)
1613153123036:library(patchwork)
1613153123071:library(tidyverse)
1613153123129:set.seed(898)
1613153123169:mse1 = numeric(10)
1613153123200:mse2 = numeric(10)
1613153123256:for(i in 1:100){
1613153123287:sigma_sq = i
1613153123320:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613153123351:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613153123401:n <- 100
1613153123435:M <- 1000
1613153123509:sim <- list(
1613153123536:T1 = numeric(M),
1613153123570:T2 = numeric(M)
1613153123595:)
1613153123638:for (j in 1:M) {
1613153123665:# Sample from Normal
1613153123703:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613153123726:# Record the values of the two estimators:
1613153123761:sim$T1[j] <- T1(thesample)
1613153123791:sim$T2[j] <- T2(thesample)
1613153123819:}
1613153123871:#MSE
1613153123899:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613153123967:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613153124014:mse1[i] = MSE_T1
1613153124038:mse2[i] = MSE_T2
1613153124069:}
1613153126807:mean(mse1)
1613153126845:mean(mse2)
1613153126913:## Create your plots below. (I recommend using ggplot)
1613153126963:leftplot <- tibble(T1 = mse1) %>%
1613153126988:ggplot(aes(x = T1)) +
1613153127018:theme_classic() +
1613153127042:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613153127083:theme(plot.title = element_text(size=8))+
1613153127112:xlab("MSE of estimator T1")+
1613153127136:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153127458:rightplot <- tibble(T2 = mse2) %>%
1613153127484:ggplot(aes(x = T2)) +
1613153127509:theme_classic() +
1613153127536:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613153127560:theme(plot.title = element_text(size=8))+
1613153127588:xlab("MSE of estimator T2")+
1613153127613:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153127935:leftplot | rightplot
1613153128355:set.seed(898)
1613153128389:bias1 = numeric(10)
1613153128420:bias2 = numeric(10)
1613153128470:for(a in 1:100){
1613153128498:sigma_sq = a
1613153128526:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613153128550:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613153128592:n <- 100
1613153128618:M <- 1000
1613153128689:sim <- list(
1613153128712:T1 = numeric(M),
1613153128740:T2 = numeric(M)
1613153128774:)
1613153128807:for (b in 1:M) {
1613153128834:# Sample from Normal
1613153128859:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613153128885:# Record the values of the two estimators:
1613153128922:sim$T1[b] <- T1(thesample)
1613153128951:sim$T2[b] <- T2(thesample)
1613153128977:}
1613153129027:#Bias
1613153129072:Bias_T1 <- mean(sim$T1) - sigma_sq
1613153129095:Bias_T2 <- mean(sim$T2) - sigma_sq
1613153129148:bias1[a] = Bias_T1
1613153129173:bias2[a] = Bias_T2
1613153129196:}
1613153131679:mean(bias1)
1613153131718:mean(bias2)
1613153131784:leftplotbias <- tibble(T1 = bias1) %>%
1613153131819:ggplot(aes(x = bias1)) +
1613153131852:theme_classic() +
1613153131876:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613153131906:theme(plot.title = element_text(size=8))+
1613153131934:xlab("Bias of estimator T1")+
1613153131958:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153132316:rightplotbias <- tibble(T2 = bias2) %>%
1613153132343:ggplot(aes(x = bias2)) +
1613153132375:theme_classic() +
1613153132405:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613153132439:theme(plot.title = element_text(size=8))+
1613153132468:xlab("Bias of estimator T2")+
1613153132496:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153132808:leftplotbias | rightplotbias
1613153133203:set.seed(898)
1613153133238:var1 = numeric(10)
1613153133277:var2 = numeric(10)
1613153133323:for(c in 1:100){
1613153133347:sigma_sq = c
1613153133378:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613153133407:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613153133459:n <- 100
1613153133488:M <- 1000
1613153133569:sim <- list(
1613153133611:T1 = numeric(M),
1613153133636:T2 = numeric(M)
1613153133663:)
1613153133692:for (d in 1:M) {
1613153133721:# Sample from Normal
1613153133745:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613153133772:# Record the values of the two estimators:
1613153133798:sim$T1[d] <- T1(thesample)
1613153133834:sim$T2[d] <- T2(thesample)
1613153133861:}
1613153133903:#Bias
1613153133947:Var_T1 <- var(sim$T1)
1613153133976:Var_T2 <- var(sim$T2)
1613153134033:var1[c] = Var_T1
1613153134062:var2[c] = Var_T2
1613153134086:}
1613153136634:mean(var1)
1613153136685:mean(var2)
1613153136748:leftplotvar <- tibble(T1 = var1) %>%
1613153136786:ggplot(aes(x = var1)) +
1613153136814:theme_classic() +
1613153136843:xlab("Variance of estimator T1")+
1613153136875:ggtitle("Histogram of variance for multiple sigma squared values")+
1613153136898:theme(plot.title = element_text(size=8))+
1613153136929:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153137272:rightplotvar <- tibble(T2 = var2) %>%
1613153137301:ggplot(aes(x = var2)) +
1613153137333:theme_classic() +
1613153137364:ggtitle("Histogram of variance for multiple sigma squared values")+
1613153137391:theme(plot.title = element_text(size=8))+
1613153137419:xlab("Variance of estimator T2")+
1613153137450:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613153137763:leftplotvar | rightplotvar
1613153138183:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613153138237:# You may need additional chunks.
1613153138287:# I would recommend not including any of the Cleaning process output here.
1613153138338:# get package
1613153138365:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613153138603:package
1613153138686:# get all resources for this package
1613153138718:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613153138810:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613153138837:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613153138903:# load the first datastore resource as a sample
1613153138939:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613153140489:data
1613153140721:data %>%
1613153140761:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613153140788:geom_point(col = "blue")
1613153141052:# Here you can run a linear regression on your two variables of interest.
1613153141119:lm(AutoTheft_AVG ~ Population, data = data)
1613153141306:# Use this to calculate generate a scatterplot of your variables.
1613153141339:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613153141378:data %>%
1613153141407:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613153141433:geom_point(col = "blue")+
1613153141462:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613155362796:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613155362842:library(openintro)
1613155362872:library(opendatatoronto)
1613155362900:library(dplyr)
1613155362927:library(patchwork)
1613155362952:library(tidyverse)
1613155363026:set.seed(899)
1613155363058:mse1 = numeric(10)
1613155363090:mse2 = numeric(10)
1613155363137:for(i in 1:100){
1613155363168:sigma_sq = i
1613155363196:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155363221:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155363268:n <- 100
1613155363293:M <- 1000
1613155363358:sim <- list(
1613155363383:T1 = numeric(M),
1613155363408:T2 = numeric(M)
1613155363431:)
1613155363455:for (j in 1:M) {
1613155363481:# Sample from Normal
1613155363507:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155363536:# Record the values of the two estimators:
1613155363559:sim$T1[j] <- T1(thesample)
1613155363586:sim$T2[j] <- T2(thesample)
1613155363610:}
1613155363654:#MSE
1613155363679:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613155363705:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613155363748:mse1[i] = MSE_T1
1613155363777:mse2[i] = MSE_T2
1613155363804:}
1613155366469:mean(mse1)
1613155366512:mean(mse2)
1613155366598:## Create your plots below. (I recommend using ggplot)
1613155366651:leftplot <- tibble(T1 = mse1) %>%
1613155366674:ggplot(aes(x = T1)) +
1613155366698:theme_classic() +
1613155366725:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613155366749:theme(plot.title = element_text(size=8))+
1613155366774:xlab("MSE of estimator T1")+
1613155366799:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155367143:rightplot <- tibble(T2 = mse2) %>%
1613155367168:ggplot(aes(x = T2)) +
1613155367202:theme_classic() +
1613155367227:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613155367263:theme(plot.title = element_text(size=8))+
1613155367289:xlab("MSE of estimator T2")+
1613155367320:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155367647:leftplot | rightplot
1613155368064:set.seed(899)
1613155368096:bias1 = numeric(10)
1613155368133:bias2 = numeric(10)
1613155368183:for(a in 1:100){
1613155368212:sigma_sq = a
1613155368239:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155368264:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155368310:n <- 100
1613155368335:M <- 1000
1613155368399:sim <- list(
1613155368424:T1 = numeric(M),
1613155368450:T2 = numeric(M)
1613155368475:)
1613155368503:for (b in 1:M) {
1613155368527:# Sample from Normal
1613155368550:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155368573:# Record the values of the two estimators:
1613155368598:sim$T1[b] <- T1(thesample)
1613155368620:sim$T2[b] <- T2(thesample)
1613155368645:}
1613155368693:#Bias
1613155368733:Bias_T1 <- mean(sim$T1) - sigma_sq
1613155368756:Bias_T2 <- mean(sim$T2) - sigma_sq
1613155368797:bias1[a] = Bias_T1
1613155368822:bias2[a] = Bias_T2
1613155368847:}
1613155371551:mean(bias1)
1613155371593:mean(bias2)
1613155371669:leftplotbias <- tibble(T1 = bias1) %>%
1613155371700:ggplot(aes(x = bias1)) +
1613155371727:theme_classic() +
1613155371748:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613155371779:theme(plot.title = element_text(size=8))+
1613155371805:xlab("Bias of estimator T1")+
1613155371827:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155372167:rightplotbias <- tibble(T2 = bias2) %>%
1613155372195:ggplot(aes(x = bias2)) +
1613155372216:theme_classic() +
1613155372239:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613155372265:theme(plot.title = element_text(size=8))+
1613155372299:xlab("Bias of estimator T2")+
1613155372322:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155372648:leftplotbias | rightplotbias
1613155373057:set.seed(899)
1613155373089:var1 = numeric(10)
1613155373119:var2 = numeric(10)
1613155373165:for(c in 1:100){
1613155373187:sigma_sq = c
1613155373216:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155373241:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155373287:n <- 100
1613155373310:M <- 1000
1613155373373:sim <- list(
1613155373398:T1 = numeric(M),
1613155373421:T2 = numeric(M)
1613155373443:)
1613155373468:for (d in 1:M) {
1613155373491:# Sample from Normal
1613155373513:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155373535:# Record the values of the two estimators:
1613155373558:sim$T1[d] <- T1(thesample)
1613155373582:sim$T2[d] <- T2(thesample)
1613155373607:}
1613155373649:#Bias
1613155373693:Var_T1 <- var(sim$T1)
1613155373716:Var_T2 <- var(sim$T2)
1613155373759:var1[c] = Var_T1
1613155373781:var2[c] = Var_T2
1613155373803:}
1613155376416:mean(var1)
1613155376451:mean(var2)
1613155376529:leftplotvar <- tibble(T1 = var1) %>%
1613155376562:ggplot(aes(x = var1)) +
1613155376586:theme_classic() +
1613155376612:xlab("Variance of estimator T1")+
1613155376636:ggtitle("Histogram of variance for multiple sigma squared values")+
1613155376666:theme(plot.title = element_text(size=8))+
1613155376694:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155377049:rightplotvar <- tibble(T2 = var2) %>%
1613155377080:ggplot(aes(x = var2)) +
1613155377108:theme_classic() +
1613155377133:ggtitle("Histogram of variance for multiple sigma squared values")+
1613155377161:theme(plot.title = element_text(size=8))+
1613155377193:xlab("Variance of estimator T2")+
1613155377218:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155377565:leftplotvar | rightplotvar
1613155378008:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613155378062:# You may need additional chunks.
1613155378107:# I would recommend not including any of the Cleaning process output here.
1613155378153:# get package
1613155378183:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613155378463:package
1613155378581:# get all resources for this package
1613155378614:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613155378702:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613155378726:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613155378776:# load the first datastore resource as a sample
1613155378800:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613155380205:data
1613155380419:data %>%
1613155380447:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613155380474:geom_point(col = "blue")
1613155380723:# Here you can run a linear regression on your two variables of interest.
1613155380774:lm(AutoTheft_AVG ~ Population, data = data)
1613155380930:# Use this to calculate generate a scatterplot of your variables.
1613155380959:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613155381004:data %>%
1613155381032:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613155381058:geom_point(col = "blue")+
1613155381079:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613155681755:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613155681802:library(openintro)
1613155681824:library(opendatatoronto)
1613155681853:library(dplyr)
1613155681876:library(patchwork)
1613155681899:library(tidyverse)
1613155681955:set.seed(899)
1613155681988:mse1 = numeric(10)
1613155682014:mse2 = numeric(10)
1613155682061:for(i in 1:100){
1613155682082:sigma_sq = i
1613155682105:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155682136:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155682178:n <- 100
1613155682201:M <- 1000
1613155682260:sim <- list(
1613155682293:T1 = numeric(M),
1613155682317:T2 = numeric(M)
1613155682341:)
1613155682364:for (j in 1:M) {
1613155682392:# Sample from Normal
1613155682416:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155682438:# Record the values of the two estimators:
1613155682462:sim$T1[j] <- T1(thesample)
1613155682485:sim$T2[j] <- T2(thesample)
1613155682515:}
1613155682556:#MSE
1613155682580:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613155682610:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613155682654:mse1[i] = MSE_T1
1613155682678:mse2[i] = MSE_T2
1613155682701:}
1613155685430:mean(mse1)
1613155685469:mean(mse2)
1613155685556:## Create your plots below. (I recommend using ggplot)
1613155685615:leftplot <- tibble(T1 = mse1) %>%
1613155685640:ggplot(aes(x = T1)) +
1613155685669:theme_classic() +
1613155685738:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613155685761:theme(plot.title = element_text(size=8))+
1613155685790:xlab("MSE of estimator T1")+
1613155685814:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155686136:rightplot <- tibble(T2 = mse2) %>%
1613155686166:ggplot(aes(x = T2)) +
1613155686192:theme_classic() +
1613155686216:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613155686241:theme(plot.title = element_text(size=8))+
1613155686267:xlab("MSE of estimator T2")+
1613155686300:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155686617:leftplot | rightplot
1613155687032:set.seed(899)
1613155687069:bias1 = numeric(10)
1613155687095:bias2 = numeric(10)
1613155687144:for(a in 1:100){
1613155687175:sigma_sq = a
1613155687218:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155687243:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155687292:n <- 100
1613155687321:M <- 1000
1613155687389:sim <- list(
1613155687415:T1 = numeric(M),
1613155687442:T2 = numeric(M)
1613155687470:)
1613155687491:for (b in 1:M) {
1613155687514:# Sample from Normal
1613155687543:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155687566:# Record the values of the two estimators:
1613155687588:sim$T1[b] <- T1(thesample)
1613155687610:sim$T2[b] <- T2(thesample)
1613155687634:}
1613155687682:#Bias
1613155687729:Bias_T1 <- mean(sim$T1) - sigma_sq
1613155687753:Bias_T2 <- mean(sim$T2) - sigma_sq
1613155687801:bias1[a] = Bias_T1
1613155687826:bias2[a] = Bias_T2
1613155687849:}
1613155690338:mean(bias1)
1613155690374:mean(bias2)
1613155690447:leftplotbias <- tibble(T1 = bias1) %>%
1613155690473:ggplot(aes(x = bias1)) +
1613155690495:theme_classic() +
1613155690519:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613155690538:theme(plot.title = element_text(size=8))+
1613155690560:xlab("Bias of estimator T1")+
1613155690583:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155690907:rightplotbias <- tibble(T2 = bias2) %>%
1613155690931:ggplot(aes(x = bias2)) +
1613155690954:theme_classic() +
1613155690977:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613155691001:theme(plot.title = element_text(size=8))+
1613155691025:xlab("Bias of estimator T2")+
1613155691056:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155691388:leftplotbias | rightplotbias
1613155691807:set.seed(899)
1613155691841:var1 = numeric(10)
1613155691866:var2 = numeric(10)
1613155691915:for(c in 1:100){
1613155691938:sigma_sq = c
1613155691963:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613155691986:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613155692032:n <- 100
1613155692057:M <- 1000
1613155692124:sim <- list(
1613155692150:T1 = numeric(M),
1613155692174:T2 = numeric(M)
1613155692197:)
1613155692222:for (d in 1:M) {
1613155692247:# Sample from Normal
1613155692277:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613155692305:# Record the values of the two estimators:
1613155692329:sim$T1[d] <- T1(thesample)
1613155692360:sim$T2[d] <- T2(thesample)
1613155692387:}
1613155692433:#Bias
1613155692473:Var_T1 <- var(sim$T1)
1613155692506:Var_T2 <- var(sim$T2)
1613155692551:var1[c] = Var_T1
1613155692579:var2[c] = Var_T2
1613155692603:}
1613155695099:mean(var1)
1613155695139:mean(var2)
1613155695211:leftplotvar <- tibble(T1 = var1) %>%
1613155695247:ggplot(aes(x = var1)) +
1613155695271:theme_classic() +
1613155695304:xlab("Variance of estimator T1")+
1613155695328:ggtitle("Histogram of variance for multiple sigma squared values")+
1613155695353:theme(plot.title = element_text(size=8))+
1613155695377:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155695708:rightplotvar <- tibble(T2 = var2) %>%
1613155695733:ggplot(aes(x = var2)) +
1613155695755:theme_classic() +
1613155695790:ggtitle("Histogram of variance for multiple sigma squared values")+
1613155695811:theme(plot.title = element_text(size=8))+
1613155695833:xlab("Variance of estimator T2")+
1613155695857:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613155696191:leftplotvar | rightplotvar
1613155696628:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613155696683:# You may need additional chunks.
1613155696729:# I would recommend not including any of the Cleaning process output here.
1613155696772:# get package
1613155696795:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613155696887:package
1613155696962:# get all resources for this package
1613155696987:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613155697129:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613155697157:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613155697214:# load the first datastore resource as a sample
1613155697239:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613155698989:data
1613155699210:data %>%
1613155699246:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613155699268:geom_point(col = "blue")
1613155699540:# Here you can run a linear regression on your two variables of interest.
1613155699595:lm(AutoTheft_AVG ~ Population, data = data)
1613155699759:# Use this to calculate generate a scatterplot of your variables.
1613155699785:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613155699825:data %>%
1613155699847:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613155699871:geom_point(col = "blue")+
1613155699893:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613158014108:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613158014153:library(openintro)
1613158014183:library(opendatatoronto)
1613158014207:library(dplyr)
1613158014229:library(patchwork)
1613158014255:library(tidyverse)
1613158014305:set.seed(899)
1613158014335:mse1 = numeric(10)
1613158014361:mse2 = numeric(10)
1613158014407:for(i in 1:100){
1613158014428:sigma_sq = i
1613158014451:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613158014472:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613158014513:n <- 100
1613158014532:M <- 1000
1613158014588:sim <- list(
1613158014610:T1 = numeric(M),
1613158014635:T2 = numeric(M)
1613158014657:)
1613158014679:for (j in 1:M) {
1613158014702:# Sample from Normal
1613158014729:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613158014749:# Record the values of the two estimators:
1613158014777:sim$T1[j] <- T1(thesample)
1613158014797:sim$T2[j] <- T2(thesample)
1613158014819:}
1613158014858:#MSE
1613158014879:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613158014902:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613158014941:mse1[i] = MSE_T1
1613158014967:mse2[i] = MSE_T2
1613158014990:}
1613158017503:## Create your plots below. (I recommend using ggplot)
1613158017553:leftplot <- tibble(T1 = mse1) %>%
1613158017584:ggplot(aes(x = T1)) +
1613158017607:theme_classic() +
1613158017631:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613158017655:theme(plot.title = element_text(size=8))+
1613158017680:xlab("MSE of estimator T1")+
1613158017704:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158018005:rightplot <- tibble(T2 = mse2) %>%
1613158018031:ggplot(aes(x = T2)) +
1613158018055:theme_classic() +
1613158018086:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613158018112:theme(plot.title = element_text(size=8))+
1613158018140:xlab("MSE of estimator T2")+
1613158018168:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158018471:leftplot | rightplot
1613158018864:set.seed(899)
1613158018907:bias1 = numeric(10)
1613158018933:bias2 = numeric(10)
1613158018976:for(a in 1:100){
1613158019003:sigma_sq = a
1613158019025:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613158019047:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613158019086:n <- 100
1613158019115:M <- 1000
1613158019181:sim <- list(
1613158019204:T1 = numeric(M),
1613158019229:T2 = numeric(M)
1613158019264:)
1613158019289:for (b in 1:M) {
1613158019320:# Sample from Normal
1613158019344:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613158019368:# Record the values of the two estimators:
1613158019390:sim$T1[b] <- T1(thesample)
1613158019411:sim$T2[b] <- T2(thesample)
1613158019442:}
1613158019485:#Bias
1613158019528:Bias_T1 <- mean(sim$T1) - sigma_sq
1613158019553:Bias_T2 <- mean(sim$T2) - sigma_sq
1613158019596:bias1[a] = Bias_T1
1613158019617:bias2[a] = Bias_T2
1613158019638:}
1613158022252:leftplotbias <- tibble(T1 = bias1) %>%
1613158022281:ggplot(aes(x = bias1)) +
1613158022305:theme_classic() +
1613158022328:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613158022348:theme(plot.title = element_text(size=8))+
1613158022371:xlab("Bias of estimator T1")+
1613158022393:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158022699:rightplotbias <- tibble(T2 = bias2) %>%
1613158022732:ggplot(aes(x = bias2)) +
1613158022753:theme_classic() +
1613158022785:ggtitle("Histogram of Bias for multiple sigma squared values")+
1613158022818:theme(plot.title = element_text(size=8))+
1613158022843:xlab("Bias of estimator T2")+
1613158022867:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158023166:leftplotbias | rightplotbias
1613158023713:set.seed(899)
1613158023745:var1 = numeric(10)
1613158023771:var2 = numeric(10)
1613158023819:for(c in 1:100){
1613158023842:sigma_sq = c
1613158023867:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613158023891:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613158023941:n <- 100
1613158023964:M <- 1000
1613158024025:sim <- list(
1613158024049:T1 = numeric(M),
1613158024073:T2 = numeric(M)
1613158024098:)
1613158024120:for (d in 1:M) {
1613158024144:# Sample from Normal
1613158024174:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613158024199:# Record the values of the two estimators:
1613158024225:sim$T1[d] <- T1(thesample)
1613158024250:sim$T2[d] <- T2(thesample)
1613158024274:}
1613158024318:#Bias
1613158024359:Var_T1 <- var(sim$T1)
1613158024382:Var_T2 <- var(sim$T2)
1613158024423:var1[c] = Var_T1
1613158024446:var2[c] = Var_T2
1613158024473:}
1613158027408:leftplotvar <- tibble(T1 = var1) %>%
1613158027439:ggplot(aes(x = var1)) +
1613158027460:theme_classic() +
1613158027482:xlab("Variance of estimator T1")+
1613158027506:ggtitle("Histogram of variance for multiple sigma squared values")+
1613158027532:theme(plot.title = element_text(size=8))+
1613158027553:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158027859:rightplotvar <- tibble(T2 = var2) %>%
1613158027885:ggplot(aes(x = var2)) +
1613158027905:theme_classic() +
1613158027926:ggtitle("Histogram of variance for multiple sigma squared values")+
1613158027947:theme(plot.title = element_text(size=8))+
1613158027970:xlab("Variance of estimator T2")+
1613158027994:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613158028317:leftplotvar | rightplotvar
1613158028702:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613158028753:# You may need additional chunks.
1613158028795:# I would recommend not including any of the Cleaning process output here.
1613158028837:# get package
1613158028859:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613158029106:package
1613158029187:# get all resources for this package
1613158029213:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613158029295:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613158029318:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613158029374:# load the first datastore resource as a sample
1613158029398:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613158031327:data
1613158031536:data %>%
1613158031567:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613158031590:geom_point(col = "blue")
1613158031816:# Here you can run a linear regression on your two variables of interest.
1613158031863:lm(AutoTheft_AVG ~ Population, data = data)
1613158032006:# Use this to calculate generate a scatterplot of your variables.
1613158032033:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613158032074:data %>%
1613158032095:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613158032122:geom_point(col = "blue")+
1613158032146:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613159283428:data %>%
1613159283458:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613159283478:ggtitle("Scatterplot of average auto thefts per neighbourhood to population")
1613159283603:geom_point(col = "blue")
1613159290369:data %>%
1613159290400:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613159290420:ggtitle("Scatterplot of average auto thefts per neighbourhood to population")+
1613159290446:geom_point(col = "blue")
1613159297781:data %>%
1613159297804:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613159297823:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613159297845:geom_point(col = "blue")
1613159310296:# Use this to calculate generate a scatterplot of your variables.
1613159310323:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613159310361:data %>%
1613159310385:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613159310407:geom_point(col = "blue")+
1613159310430:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613159310452:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613165620780:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1613165620817:library(openintro)
1613165620837:library(opendatatoronto)
1613165620860:library(dplyr)
1613165620883:library(patchwork)
1613165620902:library(tidyverse)
1613165620947:set.seed(899)
1613165620984:mse1 = numeric(10)
1613165621013:mse2 = numeric(10)
1613165621067:for(i in 1:100){
1613165621094:sigma_sq = i
1613165621120:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613165621142:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613165621189:n <- 100
1613165621211:M <- 1000
1613165621274:sim <- list(
1613165621300:T1 = numeric(M),
1613165621326:T2 = numeric(M)
1613165621351:)
1613165621375:for (j in 1:M) {
1613165621397:# Sample from Normal
1613165621423:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613165621446:# Record the values of the two estimators:
1613165621468:sim$T1[j] <- T1(thesample)
1613165621490:sim$T2[j] <- T2(thesample)
1613165621518:}
1613165621558:#MSE
1613165621613:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1613165621638:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1613165621682:mse1[i] = MSE_T1
1613165621703:mse2[i] = MSE_T2
1613165621735:}
1613165624325:## Create your plots below. (I recommend using ggplot)
1613165624379:leftplot <- tibble(T1 = mse1) %>%
1613165624404:ggplot(aes(x = T1)) +
1613165624428:theme_classic() +
1613165624449:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613165624479:theme(plot.title = element_text(size=8))+
1613165624504:xlab("MSE of estimator T1")+
1613165624528:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165624836:rightplot <- tibble(T2 = mse2) %>%
1613165624859:ggplot(aes(x = T2)) +
1613165624890:theme_classic() +
1613165624918:ggtitle("Histogram of MSE for multiple sigma squared values")+
1613165624946:theme(plot.title = element_text(size=8))+
1613165624969:xlab("MSE of estimator T2")+
1613165624993:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165625314:leftplot | rightplot
1613165625731:set.seed(899)
1613165625765:bias1 = numeric(10)
1613165625792:bias2 = numeric(10)
1613165625832:for(a in 1:100){
1613165625857:sigma_sq = a
1613165625883:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613165625908:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613165625950:n <- 100
1613165625975:M <- 1000
1613165626041:sim <- list(
1613165626071:T1 = numeric(M),
1613165626098:T2 = numeric(M)
1613165626121:)
1613165626143:for (b in 1:M) {
1613165626166:# Sample from Normal
1613165626189:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613165626217:# Record the values of the two estimators:
1613165626242:sim$T1[b] <- T1(thesample)
1613165626266:sim$T2[b] <- T2(thesample)
1613165626301:}
1613165626347:#Bias
1613165626389:Bias_T1 <- mean(sim$T1) - sigma_sq
1613165626419:Bias_T2 <- mean(sim$T2) - sigma_sq
1613165626461:bias1[a] = Bias_T1
1613165626486:bias2[a] = Bias_T2
1613165626519:}
1613165629087:leftplotbias <- tibble(T1 = bias1) %>%
1613165629115:ggplot(aes(x = bias1)) +
1613165629138:theme_classic() +
1613165629165:ggtitle("Histogram of bias for multiple sigma squared values")+
1613165629191:theme(plot.title = element_text(size=8))+
1613165629216:xlab("Bias of estimator T1")+
1613165629240:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165629553:rightplotbias <- tibble(T2 = bias2) %>%
1613165629576:ggplot(aes(x = bias2)) +
1613165629600:theme_classic() +
1613165629623:ggtitle("Histogram of bias for multiple sigma squared values")+
1613165629646:theme(plot.title = element_text(size=8))+
1613165629670:xlab("Bias of estimator T2")+
1613165629692:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165629999:leftplotbias | rightplotbias
1613165630396:set.seed(899)
1613165630436:var1 = numeric(10)
1613165630462:var2 = numeric(10)
1613165630505:for(c in 1:100){
1613165630534:sigma_sq = c
1613165630558:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1613165630582:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1613165630623:n <- 100
1613165630648:M <- 1000
1613165630716:sim <- list(
1613165630742:T1 = numeric(M),
1613165630772:T2 = numeric(M)
1613165630794:)
1613165630819:for (d in 1:M) {
1613165630845:# Sample from Normal
1613165630868:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1613165630895:# Record the values of the two estimators:
1613165630918:sim$T1[d] <- T1(thesample)
1613165630944:sim$T2[d] <- T2(thesample)
1613165630976:}
1613165631028:#Bias
1613165631072:Var_T1 <- var(sim$T1)
1613165631100:Var_T2 <- var(sim$T2)
1613165631143:var1[c] = Var_T1
1613165631166:var2[c] = Var_T2
1613165631190:}
1613165633698:leftplotvar <- tibble(T1 = var1) %>%
1613165633731:ggplot(aes(x = var1)) +
1613165633753:theme_classic() +
1613165633778:xlab("Variance of estimator T1")+
1613165633802:ggtitle("Histogram of variance for multiple sigma squared values")+
1613165633824:theme(plot.title = element_text(size=7))+
1613165633846:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165634155:rightplotvar <- tibble(T2 = var2) %>%
1613165634177:ggplot(aes(x = var2)) +
1613165634197:theme_classic() +
1613165634218:ggtitle("Histogram of variance for multiple sigma squared values")+
1613165634239:theme(plot.title = element_text(size=7))+
1613165634260:xlab("Variance of estimator T2")+
1613165634283:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1613165634592:leftplotvar | rightplotvar
1613165634996:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1613165635042:# You may need additional chunks.
1613165635080:# I would recommend not including any of the Cleaning process output here.
1613165635118:# get package
1613165635143:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613165635362:package
1613165635437:# get all resources for this package
1613165635465:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1613165635550:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1613165635576:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1613165635627:# load the first datastore resource as a sample
1613165635650:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1613165637342:data
1613165637547:data %>%
1613165637578:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613165637603:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613165637626:geom_point(col = "blue")
1613165637875:# Here you can run a linear regression on your two variables of interest.
1613165637930:lm(AutoTheft_AVG ~ Population, data = data)
1613165638064:# Use this to calculate generate a scatterplot of your variables.
1613165638092:# Don't forget to use abline to overlay the scatterplot with the regression line.
1613165638132:data %>%
1613165638156:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613165638180:geom_point(col = "blue")+
1613165638205:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613165638228:geom_abline(slope = 0.001457, intercept = -0.598671, col="red")
1613166128391:data %>%
1613166128416:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613166128447:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613166128471:theme(plot.title = element_text(size=7))+
1613166128494:geom_point(col = "blue")
1613166133923:data %>%
1613166133948:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613166133971:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613166133994:theme(plot.title = element_text(size=20))+
1613166134015:geom_point(col = "blue")
1613166141086:data %>%
1613166141105:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1613166141127:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1613166141146:theme(plot.title = element_text(size=12))+
1613166141167:geom_point(col = "blue")
1613184565833:install.packages(c("opendatatoronto", "patchwork"))
1614887511917:install.packages("patchwork")
1614890136838:library(tidyverse)
1614890139446:prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614890139471:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614890139513:data_frame(x = c(0.01,0.99)) %>%
1614890139537:ggplot(aes(x = x)) +
1614890139581:theme_classic() +
1614890139605:stat_function(fun = prior,
1614890139630:colour = "blue") +
1614890139651:stat_function(fun = posterior,
1614890139679:args = list(sumx = 5,n = 10),
1614890139703:colour = "purple") +
1614890139776:stat_function(fun = posterior,
1614890139797:args = list(sumx = 0,n = 10),
1614890139821:colour = "red") +
1614890139870:stat_function(fun = posterior,
1614890139901:args = list(sumx = 10,n = 10),
1614890139922:colour = "orange") +
1614890139946:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614890139969:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614890139993:x = "Theta",
1614890140015:y = "Density") +
1614890140042:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614891584317:library(tidyverse)
1614891584342:prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614891584368:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614891584412:data_frame(x = c(0.01,0.99)) %>%
1614891584442:ggplot(aes(x = x)) +
1614891584468:theme_classic() +
1614891584494:stat_function(fun = prior,
1614891584522:colour = "blue") +
1614891584551:stat_function(fun = posterior,
1614891584580:args = list(sumx = 5,n = 10),
1614891584606:colour = "purple") +
1614891584637:stat_function(fun = posterior,
1614891584664:args = list(sumx = 0,n = 10),
1614891584689:colour = "red") +
1614891584715:stat_function(fun = posterior,
1614891584738:args = list(sumx = 10,n = 10),
1614891584765:colour = "orange") +
1614891584791:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614891584817:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614891584843:x = "Theta",
1614891584866:y = "Density") +
1614891584893:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614892626628:library(tidyverse)
1614892626670:prior <- function(lambda) dexp(lambda, rate = 20)
1614892626719:prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614892626745:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614892626791:data_frame(x = c(0.01,0.99)) %>%
1614892626820:ggplot(aes(x = x)) +
1614892626847:theme_classic() +
1614892626872:stat_function(fun = prior,
1614892626896:colour = "blue") +
1614892626920:stat_function(fun = posterior,
1614892626944:args = list(sumx = 5,n = 10),
1614892626965:colour = "purple") +
1614892626989:stat_function(fun = posterior,
1614892627013:args = list(sumx = 0,n = 10),
1614892627038:colour = "red") +
1614892627067:stat_function(fun = posterior,
1614892627093:args = list(sumx = 10,n = 10),
1614892627120:colour = "orange") +
1614892627144:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614892627170:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614892627197:x = "Theta",
1614892627224:y = "Density") +
1614892627249:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614892636546:library(tidyverse)
1614892636589:prior <- function(lambda) dexp(lambda, rate = 20)
1614892636632:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614892636660:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614892636707:data_frame(x = c(0.01,0.99)) %>%
1614892636732:ggplot(aes(x = x)) +
1614892636763:theme_classic() +
1614892636788:stat_function(fun = prior,
1614892636809:colour = "blue") +
1614892636831:stat_function(fun = posterior,
1614892636854:args = list(sumx = 5,n = 10),
1614892636879:colour = "purple") +
1614892636902:stat_function(fun = posterior,
1614892636923:args = list(sumx = 0,n = 10),
1614892636946:colour = "red") +
1614892636970:stat_function(fun = posterior,
1614892636994:args = list(sumx = 10,n = 10),
1614892637015:colour = "orange") +
1614892637035:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614892637058:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614892637082:x = "Theta",
1614892637104:y = "Density") +
1614892637127:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614892643372:library(tidyverse)
1614892643414:prior <- function(lambda) dexp(lambda, rate = 50)
1614892643461:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614892643486:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614892643534:data_frame(x = c(0.01,0.99)) %>%
1614892643570:ggplot(aes(x = x)) +
1614892643597:theme_classic() +
1614892643629:stat_function(fun = prior,
1614892643655:colour = "blue") +
1614892643684:stat_function(fun = posterior,
1614892643713:args = list(sumx = 5,n = 10),
1614892643739:colour = "purple") +
1614892643767:stat_function(fun = posterior,
1614892643792:args = list(sumx = 0,n = 10),
1614892643821:colour = "red") +
1614892643849:stat_function(fun = posterior,
1614892643873:args = list(sumx = 10,n = 10),
1614892643897:colour = "orange") +
1614892643920:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614892643944:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614892643970:x = "Theta",
1614892643996:y = "Density") +
1614892644022:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614892651909:library(tidyverse)
1614892651956:prior <- function(lambda) dexp(lambda, rate = 10)
1614892652004:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614892652027:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614892652077:data_frame(x = c(0.01,0.99)) %>%
1614892652107:ggplot(aes(x = x)) +
1614892652132:theme_classic() +
1614892652159:stat_function(fun = prior,
1614892652189:colour = "blue") +
1614892652222:stat_function(fun = posterior,
1614892652246:args = list(sumx = 5,n = 10),
1614892652268:colour = "purple") +
1614892652290:stat_function(fun = posterior,
1614892652314:args = list(sumx = 0,n = 10),
1614892652339:colour = "red") +
1614892652363:stat_function(fun = posterior,
1614892652385:args = list(sumx = 10,n = 10),
1614892652410:colour = "orange") +
1614892652433:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614892652458:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614892652486:x = "Theta",
1614892652510:y = "Density") +
1614892652532:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614893471370:library(tidyverse)
1614893471414:prior <- function(lambda) dexp(lambda, rate = 10)
1614893471438:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614893471489:#posterior <- function(lambda,sumx, n) dgamma(lambda, shape1 = )
1614893471514:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 102 + sumx,shape2 = 102 + n - sumx)
1614893471560:data_frame(x = c(0.01,0.99)) %>%
1614893471588:ggplot(aes(x = x)) +
1614893471614:theme_classic() +
1614893471643:stat_function(fun = prior,
1614893471673:colour = "blue") +
1614893471696:stat_function(fun = posterior,
1614893471720:args = list(sumx = 5,n = 10),
1614893471747:colour = "purple") +
1614893471774:stat_function(fun = posterior,
1614893471804:args = list(sumx = 0,n = 10),
1614893471828:colour = "red") +
1614893471852:stat_function(fun = posterior,
1614893471875:args = list(sumx = 10,n = 10),
1614893471899:colour = "orange") +
1614893471927:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614893471950:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614893471979:x = "Theta",
1614893472005:y = "Density") +
1614893472035:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614893481185:library(tidyverse)
1614893481231:prior <- function(lambda) dexp(lambda, rate = 10)
1614893481260:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614893481301:#posterior <- function(lambda,sumx, n) dgamma(lambda, shape1 = )
1614893481326:posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614893481375:data_frame(x = c(0.01,0.99)) %>%
1614893481398:ggplot(aes(x = x)) +
1614893481419:theme_classic() +
1614893481441:stat_function(fun = prior,
1614893481469:colour = "blue") +
1614893481495:stat_function(fun = posterior,
1614893481522:args = list(sumx = 5,n = 10),
1614893481548:colour = "purple") +
1614893481576:stat_function(fun = posterior,
1614893481602:args = list(sumx = 0,n = 10),
1614893481627:colour = "red") +
1614893481655:stat_function(fun = posterior,
1614893481684:args = list(sumx = 10,n = 10),
1614893481709:colour = "orange") +
1614893481740:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614893481762:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614893481792:x = "Theta",
1614893481814:y = "Density") +
1614893481841:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614894280157:library(tidyverse)
1614894280205:prior <- function(lambda) dexp(lambda, rate = 10)
1614894280232:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614894280297:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 1/10))
1614894280330:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614894280407:data_frame(x = c(0.01,0.99)) %>%
1614894280430:ggplot(aes(x = x)) +
1614894280455:theme_classic() +
1614894280483:stat_function(fun = prior,
1614894280514:colour = "blue") +
1614894280541:stat_function(fun = posterior,
1614894280570:args = list(sumx = 5,n = 10),
1614894280591:colour = "purple") +
1614894280617:stat_function(fun = posterior,
1614894280642:args = list(sumx = 0,n = 10),
1614894280681:colour = "red") +
1614894280707:stat_function(fun = posterior,
1614894280735:args = list(sumx = 10,n = 10),
1614894280761:colour = "orange") +
1614894280790:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614894280817:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614894280849:x = "Theta",
1614894280875:y = "Density") +
1614894280902:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614894671833:library(tidyverse)
1614894671875:prior <- function(lambda) dexp(lambda, rate = 10)
1614894671901:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614894671952:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 1/10))
1614894671991:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614894672029:data_frame(x = c(0.01,0.99)) %>%
1614894672051:ggplot(aes(x = x)) +
1614894672075:theme_classic() +
1614894672099:stat_function(fun = prior,
1614894672123:colour = "blue") +
1614894672148:stat_function(fun = posterior,
1614894672172:args = list(sumx = 5,n = 10),
1614894672199:colour = "purple") +
1614894672224:stat_function(fun = posterior,
1614894672247:args = list(sumx = 0,n = 10),
1614894672273:colour = "red") +
1614894672299:stat_function(fun = posterior,
1614894672323:args = list(sumx = 10,n = 10),
1614894672346:colour = "orange") +
1614894672370:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614894672393:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614894672420:x = "Theta",
1614894672443:y = "Density") +
1614894672466:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614894686114:library(tidyverse)
1614894686153:prior <- function(lambda) dexp(lambda, rate = 10)
1614894686184:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614894686228:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 1/10))
1614894686257:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614894686302:data_frame(x = c(0.01,0.99)) %>%
1614894686327:ggplot(aes(x = x)) +
1614894686348:theme_classic() +
1614894686370:stat_function(fun = prior,
1614894686394:colour = "blue") +
1614894686419:stat_function(fun = posterior,
1614894686444:args = list(sumx = 5,n = 10),
1614894686472:colour = "purple") +
1614894686501:stat_function(fun = posterior,
1614894686534:args = list(sumx = 0,n = 10),
1614894686557:colour = "red") +
1614894686585:stat_function(fun = posterior,
1614894686609:args = list(sumx = 10,n = 10),
1614894686633:colour = "orange") +
1614894686661:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614894686688:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614894686712:x = "Theta",
1614894686737:y = "Density") +
1614894686762:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614894696380:library(tidyverse)
1614894696418:prior <- function(lambda) dexp(lambda, rate = 10)
1614894696442:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614894696485:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614894696514:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614894696555:data_frame(x = c(0.01,0.99)) %>%
1614894696578:ggplot(aes(x = x)) +
1614894696602:theme_classic() +
1614894696622:stat_function(fun = prior,
1614894696647:colour = "blue") +
1614894696669:stat_function(fun = posterior,
1614894696693:args = list(sumx = 5,n = 10),
1614894696718:colour = "purple") +
1614894696740:stat_function(fun = posterior,
1614894696763:args = list(sumx = 0,n = 10),
1614894696783:colour = "red") +
1614894696804:stat_function(fun = posterior,
1614894696827:args = list(sumx = 10,n = 10),
1614894696848:colour = "orange") +
1614894696868:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614894696902:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614894696923:x = "Theta",
1614894696943:y = "Density") +
1614894696964:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896132934:library(tidyverse)
1614896132978:prior <- function(lambda) dexp(lambda, rate = 10)
1614896133003:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896133044:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896133069:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896133112:data_frame(x = c(0.01,0.99)) %>%
1614896133138:ggplot(aes(x = x)) +
1614896133160:theme_classic() +
1614896133185:stat_function(fun = prior,
1614896133209:colour = "blue") +
1614896133231:stat_function(fun = posterior,
1614896133275:args = list(sumx = 5,n = 10),
1614896133301:colour = "purple") +
1614896133324:stat_function(fun = posterior,
1614896133347:args = list(sumx = 0,n = 10),
1614896133377:colour = "red") +
1614896133399:stat_function(fun = posterior,
1614896133423:args = list(sumx = 10,n = 10),
1614896133448:colour = "orange") +
1614896133472:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896133503:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896133527:x = "Lambda",
1614896133554:y = "Density") +
1614896133576:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896147777:library(tidyverse)
1614896147819:prior <- function(lambda) dexp(lambda, rate = 10)
1614896147844:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896147886:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896147910:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896147964:data_frame(x = c(0.01,0.99)) %>%
1614896147989:ggplot(aes(x = x)) +
1614896148013:theme_classic() +
1614896148037:stat_function(fun = prior,
1614896148058:colour = "blue") +
1614896148082:stat_function(fun = posterior,
1614896148109:args = list(sumx = 5,n = 10),
1614896148132:colour = "purple") +
1614896148155:stat_function(fun = posterior,
1614896148176:args = list(sumx = 1000,n = 10),
1614896148199:colour = "red") +
1614896148229:stat_function(fun = posterior,
1614896148250:args = list(sumx = 10,n = 10),
1614896148274:colour = "orange") +
1614896148298:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896148321:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896148350:x = "Lambda",
1614896148373:y = "Density") +
1614896148394:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896160344:library(tidyverse)
1614896160386:prior <- function(lambda) dexp(lambda, rate = 10)
1614896160412:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896160455:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896160479:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896160520:data_frame(x = c(0.01,0.99)) %>%
1614896160542:ggplot(aes(x = x)) +
1614896160565:theme_classic() +
1614896160594:stat_function(fun = prior,
1614896160616:colour = "blue") +
1614896160643:stat_function(fun = posterior,
1614896160666:args = list(sumx = 5,n = 10),
1614896160689:colour = "purple") +
1614896160720:stat_function(fun = posterior,
1614896160746:args = list(sumx = 100,n = 10),
1614896160768:colour = "red") +
1614896160796:stat_function(fun = posterior,
1614896160821:args = list(sumx = 10,n = 10),
1614896160846:colour = "orange") +
1614896160869:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896160895:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896160920:x = "Lambda",
1614896160946:y = "Density") +
1614896160972:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896172315:library(tidyverse)
1614896172361:prior <- function(lambda) dexp(lambda, rate = 10)
1614896172387:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896172427:posterior <- function(lambda,sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896172449:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896172495:data_frame(x = c(0.01,0.99)) %>%
1614896172525:ggplot(aes(x = x)) +
1614896172550:theme_classic() +
1614896172573:stat_function(fun = prior,
1614896172595:colour = "blue") +
1614896172617:stat_function(fun = posterior,
1614896172640:args = list(sumx = 5,n = 10),
1614896172663:colour = "purple") +
1614896172683:stat_function(fun = posterior,
1614896172707:args = list(sumx = 100,n = 10),
1614896172730:colour = "red") +
1614896172753:stat_function(fun = posterior,
1614896172773:args = list(sumx = 2,n = 10),
1614896172793:colour = "orange") +
1614896172816:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896172838:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896172861:x = "Lambda",
1614896172882:y = "Density") +
1614896172902:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896303217:library(tidyverse)
1614896303255:prior <- function(lambda) dexp(lambda, rate = 10)
1614896303282:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896303320:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896303346:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896303385:data_frame(x = c(0.01,0.99)) %>%
1614896303407:ggplot(aes(x = x)) +
1614896303438:theme_classic() +
1614896303461:stat_function(fun = prior,
1614896303483:colour = "blue") +
1614896303506:stat_function(fun = posterior,
1614896303529:args = list(sumx = 5,n = 10),
1614896303557:colour = "purple") +
1614896303581:stat_function(fun = posterior,
1614896303602:args = list(sumx = 100,n = 10),
1614896303624:colour = "red") +
1614896303655:stat_function(fun = posterior,
1614896303674:args = list(sumx = 2,n = 10),
1614896303695:colour = "orange") +
1614896303721:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896303744:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896303772:x = "Lambda",
1614896303799:y = "Density") +
1614896303822:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896547064:library(tidyverse)
1614896547103:prior <- function(lambda) dexp(lambda, rate = 10)
1614896547132:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896547177:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( sumx + 0.1))
1614896547208:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896547246:data_frame(x = c(0.01,0.99)) %>%
1614896547272:ggplot(aes(x = x)) +
1614896547296:theme_classic() +
1614896547320:stat_function(fun = prior,
1614896547352:colour = "blue") +
1614896547374:stat_function(fun = posterior,
1614896547396:args = list(sumx = 5,n = 10),
1614896547425:colour = "purple") +
1614896547448:stat_function(fun = posterior,
1614896547470:args = list(sumx = 100,n = 10),
1614896547493:colour = "red") +
1614896547521:stat_function(fun = posterior,
1614896547545:args = list(sumx = 2,n = 10),
1614896547571:colour = "orange") +
1614896547595:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896547617:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896547640:x = "Lambda",
1614896547668:y = "Density") +
1614896547689:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896555529:library(tidyverse)
1614896555577:prior <- function(lambda) dexp(lambda, rate = 10)
1614896555603:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896555647:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + n * sumx, scale = 1/( n + 0.1))
1614896555673:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896555718:data_frame(x = c(0.01,0.99)) %>%
1614896555740:ggplot(aes(x = x)) +
1614896555767:theme_classic() +
1614896555790:stat_function(fun = prior,
1614896555816:colour = "blue") +
1614896555838:stat_function(fun = posterior,
1614896555864:args = list(sumx = 5,n = 10),
1614896555890:colour = "purple") +
1614896555914:stat_function(fun = posterior,
1614896555936:args = list(sumx = 100,n = 10),
1614896555961:colour = "red") +
1614896555984:stat_function(fun = posterior,
1614896556012:args = list(sumx = 2,n = 10),
1614896556038:colour = "orange") +
1614896556070:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896556094:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896556118:x = "Lambda",
1614896556138:y = "Density") +
1614896556161:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614896799877:library(tidyverse)
1614896799920:prior <- function(lambda) dexp(lambda, rate = 10)
1614896799948:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614896800005:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/( n + 0.1))
1614896800029:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614896800078:data_frame(x = c(0.01,0.99)) %>%
1614896800106:ggplot(aes(x = x)) +
1614896800132:theme_classic() +
1614896800154:stat_function(fun = prior,
1614896800183:colour = "blue") +
1614896800209:stat_function(fun = posterior,
1614896800233:args = list(sumx = 5,n = 10),
1614896800261:colour = "purple") +
1614896800290:stat_function(fun = posterior,
1614896800319:args = list(sumx = 100,n = 10),
1614896800344:colour = "red") +
1614896800372:stat_function(fun = posterior,
1614896800414:args = list(sumx = 2,n = 10),
1614896800439:colour = "orange") +
1614896800462:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614896800485:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614896800511:x = "Lambda",
1614896800534:y = "Density") +
1614896800558:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898401120:library(tidyverse)
1614898401166:prior <- function(lambda) dexp(lambda, rate = 0.1)
1614898401191:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898401241:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/( n + 0.1))
1614898401272:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898401312:data_frame(x = c(0.01,0.99)) %>%
1614898401336:ggplot(aes(x = x)) +
1614898401362:theme_classic() +
1614898401390:stat_function(fun = prior,
1614898401413:colour = "blue") +
1614898401435:stat_function(fun = posterior,
1614898401459:args = list(sumx = 5,n = 10),
1614898401484:colour = "purple") +
1614898401509:stat_function(fun = posterior,
1614898401535:args = list(sumx = 100,n = 10),
1614898401559:colour = "red") +
1614898401584:stat_function(fun = posterior,
1614898401607:args = list(sumx = 2,n = 10),
1614898401631:colour = "orange") +
1614898401657:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898401683:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898401708:x = "Lambda",
1614898401739:y = "Density") +
1614898401762:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898659099:library(tidyverse)
1614898659146:prior <- function(lambda) dexp(lambda, rate = 0.1)
1614898659176:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898659229:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/( n + 0.1))
1614898659254:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898659298:data_frame(x = c(0.01,0.99)) %>%
1614898659324:ggplot(aes(x = x)) +
1614898659351:theme_classic() +
1614898659377:stat_function(fun = prior,
1614898659404:colour = "blue") +
1614898659430:stat_function(fun = posterior,
1614898659455:args = list(sumx = 5,n = 10),
1614898659478:colour = "purple") +
1614898659502:stat_function(fun = posterior,
1614898659528:args = list(sumx = 100,n = 10),
1614898659553:colour = "red") +
1614898659573:stat_function(fun = posterior,
1614898659598:args = list(sumx = 10,n = 10),
1614898659620:colour = "orange") +
1614898659644:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898659668:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898659692:x = "Lambda",
1614898659717:y = "Density") +
1614898659738:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898688885:library(tidyverse)
1614898688932:prior <- function(lambda) dexp(lambda, rate = 0.1)
1614898688957:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898689000:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898689026:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898689081:data_frame(x = c(0.01,0.99)) %>%
1614898689105:ggplot(aes(x = x)) +
1614898689135:theme_classic() +
1614898689165:stat_function(fun = prior,
1614898689193:colour = "blue") +
1614898689221:stat_function(fun = posterior,
1614898689251:args = list(sumx = 5,n = 10),
1614898689277:colour = "purple") +
1614898689300:stat_function(fun = posterior,
1614898689328:args = list(sumx = 100,n = 10),
1614898689353:colour = "red") +
1614898689378:stat_function(fun = posterior,
1614898689403:args = list(sumx = 10,n = 10),
1614898689430:colour = "orange") +
1614898689457:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898689484:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898689516:x = "Lambda",
1614898689550:y = "Density") +
1614898689582:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898707735:library(tidyverse)
1614898707801:prior <- function(lambda) dexp(lambda, rate = 0.1)
1614898707827:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898707879:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898707905:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898707944:data_frame(x = c(0.01,0.99)) %>%
1614898707974:ggplot(aes(x = x)) +
1614898707999:theme_classic() +
1614898708024:stat_function(fun = prior,
1614898708046:colour = "blue") +
1614898708068:stat_function(fun = posterior,
1614898708091:args = list(sumx = 5,n = 10),
1614898708114:colour = "purple") +
1614898708136:stat_function(fun = posterior,
1614898708162:args = list(sumx = 5,n = 10),
1614898708187:colour = "red") +
1614898708210:stat_function(fun = posterior,
1614898708237:args = list(sumx = 10,n = 10),
1614898708267:colour = "orange") +
1614898708288:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898708310:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898708333:x = "Lambda",
1614898708358:y = "Density") +
1614898708380:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898720311:library(tidyverse)
1614898720353:prior <- function(lambda) dexp(lambda, rate = 0.1)
1614898720377:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898720420:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898720450:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898720494:data_frame(x = c(0.01,0.99)) %>%
1614898720515:ggplot(aes(x = x)) +
1614898720536:theme_classic() +
1614898720562:stat_function(fun = prior,
1614898720585:colour = "blue") +
1614898720610:stat_function(fun = posterior,
1614898720634:args = list(sumx = 7,n = 10),
1614898720661:colour = "purple") +
1614898720685:stat_function(fun = posterior,
1614898720709:args = list(sumx = 5,n = 10),
1614898720735:colour = "red") +
1614898720761:stat_function(fun = posterior,
1614898720785:args = list(sumx = 10,n = 10),
1614898720812:colour = "orange") +
1614898720835:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898720859:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898720885:x = "Lambda",
1614898720910:y = "Density") +
1614898720934:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898740315:library(tidyverse)
1614898740358:prior <- function(lambda) dexp(lambda, rate = 0.5)
1614898740386:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898740434:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898740460:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898740506:data_frame(x = c(0.01,0.99)) %>%
1614898740534:ggplot(aes(x = x)) +
1614898740561:theme_classic() +
1614898740587:stat_function(fun = prior,
1614898740608:colour = "blue") +
1614898740633:stat_function(fun = posterior,
1614898740655:args = list(sumx = 7,n = 10),
1614898740688:colour = "purple") +
1614898740712:stat_function(fun = posterior,
1614898740736:args = list(sumx = 5,n = 10),
1614898740762:colour = "red") +
1614898740793:stat_function(fun = posterior,
1614898740818:args = list(sumx = 10,n = 10),
1614898740842:colour = "orange") +
1614898740867:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898740897:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898740925:x = "Lambda",
1614898740952:y = "Density") +
1614898740978:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898747178:library(tidyverse)
1614898747227:prior <- function(lambda) dexp(lambda, rate = 1)
1614898747257:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898747301:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898747333:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898747380:data_frame(x = c(0.01,0.99)) %>%
1614898747406:ggplot(aes(x = x)) +
1614898747443:theme_classic() +
1614898747465:stat_function(fun = prior,
1614898747488:colour = "blue") +
1614898747510:stat_function(fun = posterior,
1614898747532:args = list(sumx = 7,n = 10),
1614898747566:colour = "purple") +
1614898747589:stat_function(fun = posterior,
1614898747613:args = list(sumx = 5,n = 10),
1614898747638:colour = "red") +
1614898747665:stat_function(fun = posterior,
1614898747693:args = list(sumx = 10,n = 10),
1614898747718:colour = "orange") +
1614898747743:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898747769:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898747797:x = "Lambda",
1614898747820:y = "Density") +
1614898747842:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898754262:library(tidyverse)
1614898754304:prior <- function(lambda) dexp(lambda, rate = 5)
1614898754329:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898754374:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898754409:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898754455:data_frame(x = c(0.01,0.99)) %>%
1614898754482:ggplot(aes(x = x)) +
1614898754506:theme_classic() +
1614898754528:stat_function(fun = prior,
1614898754553:colour = "blue") +
1614898754580:stat_function(fun = posterior,
1614898754603:args = list(sumx = 7,n = 10),
1614898754628:colour = "purple") +
1614898754653:stat_function(fun = posterior,
1614898754676:args = list(sumx = 5,n = 10),
1614898754701:colour = "red") +
1614898754727:stat_function(fun = posterior,
1614898754751:args = list(sumx = 10,n = 10),
1614898754774:colour = "orange") +
1614898754809:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898754832:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898754853:x = "Lambda",
1614898754874:y = "Density") +
1614898754896:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898775244:library(tidyverse)
1614898775294:prior <- function(lambda) dexp(lambda, rate = 5)
1614898775320:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898775365:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898775391:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898775431:data_frame(x = c(0.01,0.99)) %>%
1614898775454:ggplot(aes(x = x)) +
1614898775479:theme_classic() +
1614898775503:stat_function(fun = prior,
1614898775539:colour = "blue") +
1614898775570:stat_function(fun = posterior,
1614898775597:args = list(sumx = 5,n = 10),
1614898775624:colour = "purple") +
1614898775646:stat_function(fun = posterior,
1614898775674:args = list(sumx = 10,n = 10),
1614898775699:colour = "red") +
1614898775725:stat_function(fun = posterior,
1614898775749:args = list(sumx = 20,n = 10),
1614898775775:colour = "orange") +
1614898775797:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898775825:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898775852:x = "Lambda",
1614898775879:y = "Density") +
1614898775906:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614898783622:library(tidyverse)
1614898783672:prior <- function(lambda) dexp(lambda, rate = 5)
1614898783698:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614898783739:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614898783766:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614898783810:data_frame(x = c(0.01,0.99)) %>%
1614898783833:ggplot(aes(x = x)) +
1614898783858:theme_classic() +
1614898783883:stat_function(fun = prior,
1614898783911:colour = "blue") +
1614898783934:stat_function(fun = posterior,
1614898783960:args = list(sumx = 5,n = 10),
1614898783994:colour = "purple") +
1614898784021:stat_function(fun = posterior,
1614898784047:args = list(sumx = 10,n = 10),
1614898784079:colour = "red") +
1614898784106:stat_function(fun = posterior,
1614898784133:args = list(sumx = 15,n = 10),
1614898784156:colour = "orange") +
1614898784178:labs(title = "Beta Prior vs Posterior for Theta, 10 coin flips",
1614898784203:subtitle = "Blue: Prior. Purple: 5 heads. Red: 0 heads. Orange: 10 heads",
1614898784227:x = "Lambda",
1614898784250:y = "Density") +
1614898784274:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899382563:library(tidyverse)
1614899382607:prior <- function(lambda) dexp(lambda, rate = 5)
1614899382630:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614899382673:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614899382694:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614899382730:data_frame(x = c(0.01,0.99)) %>%
1614899382754:ggplot(aes(x = x)) +
1614899382779:theme_classic() +
1614899382807:stat_function(fun = prior,
1614899382831:colour = "blue") +
1614899382855:stat_function(fun = posterior,
1614899382877:args = list(sumx = 5,n = 10),
1614899382901:colour = "purple") +
1614899382922:stat_function(fun = posterior,
1614899382946:args = list(sumx = 10,n = 10),
1614899382969:colour = "red") +
1614899382997:stat_function(fun = posterior,
1614899383019:args = list(sumx = 15,n = 10),
1614899383041:colour = "orange") +
1614899383065:labs(title = "Beta Prior vs Posterior for Lambda, 10 website users per hour",
1614899383091:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899383115:x = "Lambda",
1614899383137:y = "Density") +
1614899383167:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899383345:data_frame(x = c(0.01,0.99)) %>%
1614899383370:ggplot(aes(x = x)) +
1614899383393:theme_classic() +
1614899383419:stat_function(fun = prior,
1614899383443:colour = "blue") +
1614899383468:stat_function(fun = posterior,
1614899383491:args = list(sumx = 5,n = 100),
1614899383515:colour = "purple") +
1614899383536:stat_function(fun = posterior,
1614899383559:args = list(sumx = 10,n = 100),
1614899383587:colour = "red") +
1614899383620:stat_function(fun = posterior,
1614899383648:args = list(sumx = 15,n = 100),
1614899383674:colour = "orange") +
1614899383700:labs(title = "Beta Prior vs Posterior for Lambda, 10 website users per hour",
1614899383724:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899383747:x = "Lambda",
1614899383774:y = "Density") +
1614899383797:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899421802:library(tidyverse)
1614899421860:prior <- function(lambda) dexp(lambda, rate = 5)
1614899421891:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614899421945:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614899421981:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614899422034:data_frame(x = c(0.01,0.99)) %>%
1614899422063:ggplot(aes(x = x)) +
1614899422090:theme_classic() +
1614899422116:stat_function(fun = prior,
1614899422145:colour = "blue") +
1614899422168:stat_function(fun = posterior,
1614899422193:args = list(sumx = 5,n = 10),
1614899422220:colour = "purple") +
1614899422244:stat_function(fun = posterior,
1614899422270:args = list(sumx = 10,n = 10),
1614899422292:colour = "red") +
1614899422316:stat_function(fun = posterior,
1614899422338:args = list(sumx = 15,n = 10),
1614899422360:colour = "orange") +
1614899422384:labs(title = "Beta Prior vs Posterior for Lambda, 10 website users per hour",
1614899422409:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899422430:x = "Lambda",
1614899422454:y = "Density") +
1614899422484:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899422710:data_frame(x = c(0.01,0.99)) %>%
1614899422730:ggplot(aes(x = x)) +
1614899422753:theme_classic() +
1614899422774:stat_function(fun = prior,
1614899422793:colour = "blue") +
1614899422815:stat_function(fun = posterior,
1614899422835:args = list(sumx = 5,n = 100),
1614899422856:colour = "purple") +
1614899422878:stat_function(fun = posterior,
1614899422899:args = list(sumx = 10,n = 100),
1614899422924:colour = "red") +
1614899422944:stat_function(fun = posterior,
1614899422969:args = list(sumx = 15,n = 100),
1614899422991:colour = "orange") +
1614899423012:labs(title = "Beta Prior vs Posterior for Lambda, \n 10 website users per hour",
1614899423036:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899423064:x = "Lambda",
1614899423085:y = "Density") +
1614899423109:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899438488:library(tidyverse)
1614899438525:prior <- function(lambda) dexp(lambda, rate = 5)
1614899438548:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614899438587:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 10))
1614899438612:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614899438649:data_frame(x = c(0.01,0.99)) %>%
1614899438682:ggplot(aes(x = x)) +
1614899438708:theme_classic() +
1614899438731:stat_function(fun = prior,
1614899438754:colour = "blue") +
1614899438786:stat_function(fun = posterior,
1614899438810:args = list(sumx = 5,n = 10),
1614899438833:colour = "purple") +
1614899438859:stat_function(fun = posterior,
1614899438884:args = list(sumx = 10,n = 10),
1614899438909:colour = "red") +
1614899438934:stat_function(fun = posterior,
1614899438959:args = list(sumx = 15,n = 10),
1614899438994:colour = "orange") +
1614899439020:labs(title = "Beta Prior vs Posterior for Lambda, 10 website users per hour",
1614899439045:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899439071:x = "Lambda",
1614899439095:y = "Density") +
1614899439122:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614899439348:data_frame(x = c(0.01,0.99)) %>%
1614899439374:ggplot(aes(x = x)) +
1614899439400:theme_classic() +
1614899439429:stat_function(fun = prior,
1614899439453:colour = "blue") +
1614899439475:stat_function(fun = posterior,
1614899439503:args = list(sumx = 5,n = 100),
1614899439525:colour = "purple") +
1614899439549:stat_function(fun = posterior,
1614899439573:args = list(sumx = 10,n = 100),
1614899439595:colour = "red") +
1614899439620:stat_function(fun = posterior,
1614899439649:args = list(sumx = 15,n = 100),
1614899439673:colour = "orange") +
1614899439697:labs(title = "Beta Prior vs Posterior for Lambda, \n 100 website users per hour",
1614899439722:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614899439742:x = "Lambda",
1614899439776:y = "Density") +
1614899439804:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900514502:library(tidyverse)
1614900514552:prior <- function(lambda) dexp(lambda, rate = 5)
1614900514582:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614900514623:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 0.2))
1614900514650:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614900514705:data_frame(x = c(0.01,0.99)) %>%
1614900514728:ggplot(aes(x = x)) +
1614900514754:theme_classic() +
1614900514782:stat_function(fun = prior,
1614900514806:colour = "blue") +
1614900514839:stat_function(fun = posterior,
1614900514865:args = list(sumx = 5,n = 10),
1614900514890:colour = "purple") +
1614900514912:stat_function(fun = posterior,
1614900514934:args = list(sumx = 10,n = 10),
1614900514972:colour = "red") +
1614900515009:stat_function(fun = posterior,
1614900515031:args = list(sumx = 15,n = 10),
1614900515054:colour = "orange") +
1614900515079:labs(title = "Beta Prior vs Posterior for Lambda, 10 website users per hour",
1614900515105:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900515132:x = "Lambda",
1614900515158:y = "Density") +
1614900515187:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900515409:data_frame(x = c(0.01,0.99)) %>%
1614900515439:ggplot(aes(x = x)) +
1614900515465:theme_classic() +
1614900515490:stat_function(fun = prior,
1614900515517:colour = "blue") +
1614900515547:stat_function(fun = posterior,
1614900515578:args = list(sumx = 5,n = 100),
1614900515613:colour = "purple") +
1614900515639:stat_function(fun = posterior,
1614900515665:args = list(sumx = 10,n = 100),
1614900515692:colour = "red") +
1614900515721:stat_function(fun = posterior,
1614900515746:args = list(sumx = 15,n = 100),
1614900515772:colour = "orange") +
1614900515797:labs(title = "Beta Prior vs Posterior for Lambda, \n 100 website users per hour",
1614900515822:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900515846:x = "Lambda",
1614900515872:y = "Density") +
1614900515897:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900702554:library(tidyverse)
1614900702598:prior <- function(lambda) dexp(lambda, rate = 5)
1614900702622:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614900702667:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614900702694:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614900702735:data_frame(x = c(0.01,0.99)) %>%
1614900702755:ggplot(aes(x = x)) +
1614900702778:theme_classic() +
1614900702801:stat_function(fun = prior,
1614900702823:colour = "blue") +
1614900702849:stat_function(fun = posterior,
1614900702872:args = list(sumx = 5,n = 10),
1614900702897:colour = "purple") +
1614900702923:stat_function(fun = posterior,
1614900702947:args = list(sumx = 10,n = 10),
1614900702971:colour = "red") +
1614900702995:stat_function(fun = posterior,
1614900703017:args = list(sumx = 15,n = 10),
1614900703040:colour = "orange") +
1614900703062:labs(title = "Exponential Prior vs Posterior for Lambda, \n 10 website users per hour",
1614900703090:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900703115:x = "Lambda",
1614900703142:y = "Density") +
1614900703170:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900703406:data_frame(x = c(0.01,0.99)) %>%
1614900703436:ggplot(aes(x = x)) +
1614900703460:theme_classic() +
1614900703491:stat_function(fun = prior,
1614900703518:colour = "blue") +
1614900703545:stat_function(fun = posterior,
1614900703571:args = list(sumx = 5,n = 100),
1614900703596:colour = "purple") +
1614900703616:stat_function(fun = posterior,
1614900703639:args = list(sumx = 10,n = 100),
1614900703665:colour = "red") +
1614900703692:stat_function(fun = posterior,
1614900703715:args = list(sumx = 15,n = 100),
1614900703741:colour = "orange") +
1614900703766:labs(title = "Exponential Prior vs Posterior for Lambda, \n 100 website users per hour",
1614900703790:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900703815:x = "Lambda",
1614900703841:y = "Density") +
1614900703869:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900980660:library(tidyverse)
1614900980704:prior <- function(lambda) dexp(lambda, rate = 5)
1614900980729:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614900980769:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614900980792:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614900980828:data_frame(x = c(0.01,0.99)) %>%
1614900980855:ggplot(aes(x = x)) +
1614900980875:theme_classic() +
1614900980895:stat_function(fun = prior,
1614900980917:colour = "blue") +
1614900980939:stat_function(fun = posterior,
1614900980971:args = list(sumx = 5,n = 10),
1614900980995:colour = "purple") +
1614900981017:stat_function(fun = posterior,
1614900981038:args = list(sumx = 10,n = 10),
1614900981095:colour = "red") +
1614900981121:stat_function(fun = posterior,
1614900981144:args = list(sumx = 15,n = 10),
1614900981166:colour = "orange") +
1614900981189:labs(title = "Exponential Prior vs Posterior for Lambda, \n 10 n = 10 data points",
1614900981212:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900981234:x = "Lambda",
1614900981254:y = "Density") +
1614900981275:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614900981513:data_frame(x = c(0.01,0.99)) %>%
1614900981536:ggplot(aes(x = x)) +
1614900981563:theme_classic() +
1614900981587:stat_function(fun = prior,
1614900981612:colour = "blue") +
1614900981636:stat_function(fun = posterior,
1614900981663:args = list(sumx = 5,n = 100),
1614900981685:colour = "purple") +
1614900981707:stat_function(fun = posterior,
1614900981733:args = list(sumx = 10,n = 100),
1614900981757:colour = "red") +
1614900981781:stat_function(fun = posterior,
1614900981806:args = list(sumx = 15,n = 100),
1614900981829:colour = "orange") +
1614900981854:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 100 data points",
1614900981877:subtitle = "Blue: Prior. Purple: 5  Red: 0 heads. Orange: 10 heads",
1614900981900:x = "Lambda",
1614900981921:y = "Density") +
1614900981944:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901545798:library(tidyverse)
1614901545837:prior <- function(lambda) dexp(lambda, rate = 5)
1614901545856:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614901545894:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614901545928:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614901545965:data_frame(x = c(0.01,0.99)) %>%
1614901545987:ggplot(aes(x = x)) +
1614901546010:theme_classic() +
1614901546033:stat_function(fun = prior,
1614901546055:colour = "blue") +
1614901546076:stat_function(fun = posterior,
1614901546100:args = list(sumx = 5,n = 10),
1614901546125:colour = "purple") +
1614901546148:stat_function(fun = posterior,
1614901546169:args = list(sumx = 10,n = 10),
1614901546190:colour = "red") +
1614901546215:stat_function(fun = posterior,
1614901546240:args = list(sumx = 15,n = 10),
1614901546265:colour = "orange") +
1614901546288:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 10 hours",
1614901546312:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614901546346:x = "Lambda",
1614901546368:y = "Density") +
1614901546392:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901546602:data_frame(x = c(0.01,0.99)) %>%
1614901546622:ggplot(aes(x = x)) +
1614901546644:theme_classic() +
1614901546674:stat_function(fun = prior,
1614901546699:colour = "blue") +
1614901546720:stat_function(fun = posterior,
1614901546742:args = list(sumx = 5,n = 100),
1614901546768:colour = "purple") +
1614901546796:stat_function(fun = posterior,
1614901546814:args = list(sumx = 10,n = 100),
1614901546835:colour = "red") +
1614901546858:stat_function(fun = posterior,
1614901546883:args = list(sumx = 15,n = 100),
1614901546908:colour = "orange") +
1614901546929:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 100 hours",
1614901546949:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614901546969:x = "Lambda",
1614901546993:y = "Density") +
1614901547018:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901566146:library(tidyverse)
1614901566192:prior <- function(lambda) dexp(lambda, rate = 5)
1614901566216:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614901566254:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614901566277:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614901566314:data_frame(x = c(0.01,0.99)) %>%
1614901566336:ggplot(aes(x = x)) +
1614901566359:theme_classic() +
1614901566382:stat_function(fun = prior,
1614901566404:colour = "blue") +
1614901566423:stat_function(fun = posterior,
1614901566452:args = list(sumx = 5,n = 10),
1614901566474:colour = "purple") +
1614901566495:stat_function(fun = posterior,
1614901566517:args = list(sumx = 10,n = 10),
1614901566541:colour = "red") +
1614901566563:stat_function(fun = posterior,
1614901566596:args = list(sumx = 15,n = 10),
1614901566617:colour = "orange") +
1614901566646:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 10 hours",
1614901566667:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. \nOrange: 15 users/hour",
1614901566689:x = "Lambda",
1614901566712:y = "Density") +
1614901566737:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901566959:data_frame(x = c(0.01,0.99)) %>%
1614901566981:ggplot(aes(x = x)) +
1614901567004:theme_classic() +
1614901567024:stat_function(fun = prior,
1614901567054:colour = "blue") +
1614901567076:stat_function(fun = posterior,
1614901567097:args = list(sumx = 5,n = 100),
1614901567117:colour = "purple") +
1614901567142:stat_function(fun = posterior,
1614901567163:args = list(sumx = 10,n = 100),
1614901567184:colour = "red") +
1614901567208:stat_function(fun = posterior,
1614901567229:args = list(sumx = 15,n = 100),
1614901567262:colour = "orange") +
1614901567283:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 100 hours",
1614901567305:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. \nOrange: 15 users/hour",
1614901567326:x = "Lambda",
1614901567348:y = "Density") +
1614901567374:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901574789:library(tidyverse)
1614901574831:prior <- function(lambda) dexp(lambda, rate = 5)
1614901574858:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614901574904:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614901574929:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614901574977:data_frame(x = c(0.01,0.99)) %>%
1614901575002:ggplot(aes(x = x)) +
1614901575029:theme_classic() +
1614901575055:stat_function(fun = prior,
1614901575078:colour = "blue") +
1614901575101:stat_function(fun = posterior,
1614901575125:args = list(sumx = 5,n = 10),
1614901575148:colour = "purple") +
1614901575171:stat_function(fun = posterior,
1614901575192:args = list(sumx = 10,n = 10),
1614901575216:colour = "red") +
1614901575244:stat_function(fun = posterior,
1614901575270:args = list(sumx = 15,n = 10),
1614901575294:colour = "orange") +
1614901575318:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 10 hours",
1614901575348:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. \nOrange: 15 users/hour",
1614901575370:x = "Lambda",
1614901575393:y = "Density") +
1614901575419:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614901575666:data_frame(x = c(0.01,0.99)) %>%
1614901575695:ggplot(aes(x = x)) +
1614901575719:theme_classic() +
1614901575746:stat_function(fun = prior,
1614901575772:colour = "blue") +
1614901575796:stat_function(fun = posterior,
1614901575820:args = list(sumx = 5,n = 100),
1614901575846:colour = "purple") +
1614901575874:stat_function(fun = posterior,
1614901575902:args = list(sumx = 10,n = 100),
1614901575923:colour = "red") +
1614901575947:stat_function(fun = posterior,
1614901575971:args = list(sumx = 15,n = 100),
1614901576004:colour = "orange") +
1614901576030:labs(title = "Exponential Prior vs Posterior for Lambda, \n n = 100 hours",
1614901576052:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. \nOrange: 15 users/hour",
1614901576075:x = "Lambda",
1614901576118:y = "Density") +
1614901576140:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902203839:library(tidyverse)
1614902203884:prior <- function(lambda) dexp(lambda, rate = 5)
1614902203911:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614902203949:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614902203979:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614902204025:data_frame(x = c(0.01,0.99)) %>%
1614902204050:ggplot(aes(x = x)) +
1614902204073:theme_classic() +
1614902204097:stat_function(fun = prior,
1614902204122:colour = "blue") +
1614902204145:stat_function(fun = posterior,
1614902204166:args = list(sumx = 5,n = 10),
1614902204194:colour = "purple") +
1614902204217:stat_function(fun = posterior,
1614902204239:args = list(sumx = 10,n = 10),
1614902204261:colour = "red") +
1614902204281:stat_function(fun = posterior,
1614902204312:args = list(sumx = 15,n = 10),
1614902204333:colour = "orange") +
1614902204356:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614902204380:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902204405:x = "Lambda",
1614902204430:y = "Density") +
1614902204453:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902204647:data_frame(x = c(0.01,0.99)) %>%
1614902204669:ggplot(aes(x = x)) +
1614902204692:theme_classic() +
1614902204717:stat_function(fun = prior,
1614902204743:colour = "blue") +
1614902204765:stat_function(fun = posterior,
1614902204789:args = list(sumx = 5,n = 50),
1614902204812:colour = "purple") +
1614902204834:stat_function(fun = posterior,
1614902204857:args = list(sumx = 10,n = 50),
1614902204877:colour = "red") +
1614902204898:stat_function(fun = posterior,
1614902204920:args = list(sumx = 15,n = 50),
1614902204940:colour = "orange") +
1614902204963:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614902204984:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902205007:x = "Lambda",
1614902205029:y = "Density") +
1614902205052:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902230300:library(tidyverse)
1614902230340:prior <- function(lambda) dexp(lambda, rate = 0.2)
1614902230362:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614902230405:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614902230430:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614902230470:data_frame(x = c(0.01,0.99)) %>%
1614902230492:ggplot(aes(x = x)) +
1614902230513:theme_classic() +
1614902230532:stat_function(fun = prior,
1614902230554:colour = "blue") +
1614902230575:stat_function(fun = posterior,
1614902230597:args = list(sumx = 5,n = 10),
1614902230619:colour = "purple") +
1614902230642:stat_function(fun = posterior,
1614902230666:args = list(sumx = 10,n = 10),
1614902230689:colour = "red") +
1614902230714:stat_function(fun = posterior,
1614902230737:args = list(sumx = 15,n = 10),
1614902230765:colour = "orange") +
1614902230787:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614902230811:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902230835:x = "Lambda",
1614902230864:y = "Density") +
1614902230890:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902231098:data_frame(x = c(0.01,0.99)) %>%
1614902231119:ggplot(aes(x = x)) +
1614902231140:theme_classic() +
1614902231161:stat_function(fun = prior,
1614902231181:colour = "blue") +
1614902231206:stat_function(fun = posterior,
1614902231228:args = list(sumx = 5,n = 50),
1614902231253:colour = "purple") +
1614902231276:stat_function(fun = posterior,
1614902231298:args = list(sumx = 10,n = 50),
1614902231320:colour = "red") +
1614902231341:stat_function(fun = posterior,
1614902231366:args = list(sumx = 15,n = 50),
1614902231391:colour = "orange") +
1614902231418:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614902231445:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902231469:x = "Lambda",
1614902231491:y = "Density") +
1614902231514:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902238896:library(tidyverse)
1614902238936:prior <- function(lambda) dexp(lambda, rate = 0.2)
1614902238960:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614902239004:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 0.2))
1614902239035:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614902239084:data_frame(x = c(0.01,0.99)) %>%
1614902239108:ggplot(aes(x = x)) +
1614902239134:theme_classic() +
1614902239173:stat_function(fun = prior,
1614902239200:colour = "blue") +
1614902239222:stat_function(fun = posterior,
1614902239244:args = list(sumx = 5,n = 10),
1614902239268:colour = "purple") +
1614902239292:stat_function(fun = posterior,
1614902239318:args = list(sumx = 10,n = 10),
1614902239341:colour = "red") +
1614902239366:stat_function(fun = posterior,
1614902239395:args = list(sumx = 15,n = 10),
1614902239425:colour = "orange") +
1614902239450:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614902239473:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902239497:x = "Lambda",
1614902239529:y = "Density") +
1614902239554:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902239756:data_frame(x = c(0.01,0.99)) %>%
1614902239780:ggplot(aes(x = x)) +
1614902239803:theme_classic() +
1614902239830:stat_function(fun = prior,
1614902239856:colour = "blue") +
1614902239877:stat_function(fun = posterior,
1614902239901:args = list(sumx = 5,n = 50),
1614902239923:colour = "purple") +
1614902239948:stat_function(fun = posterior,
1614902239978:args = list(sumx = 10,n = 50),
1614902239998:colour = "red") +
1614902240018:stat_function(fun = posterior,
1614902240040:args = list(sumx = 15,n = 50),
1614902240065:colour = "orange") +
1614902240085:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614902240107:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902240130:x = "Lambda",
1614902240158:y = "Density") +
1614902240188:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902256188:library(tidyverse)
1614902256225:prior <- function(lambda) dexp(lambda, rate = 5)
1614902256248:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614902256289:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614902256312:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614902256352:data_frame(x = c(0.01,0.99)) %>%
1614902256379:ggplot(aes(x = x)) +
1614902256400:theme_classic() +
1614902256420:stat_function(fun = prior,
1614902256442:colour = "blue") +
1614902256468:stat_function(fun = posterior,
1614902256495:args = list(sumx = 5,n = 10),
1614902256517:colour = "purple") +
1614902256537:stat_function(fun = posterior,
1614902256563:args = list(sumx = 10,n = 10),
1614902256589:colour = "red") +
1614902256615:stat_function(fun = posterior,
1614902256638:args = list(sumx = 15,n = 10),
1614902256660:colour = "orange") +
1614902256683:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614902256714:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902256737:x = "Lambda",
1614902256761:y = "Density") +
1614902256782:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614902257003:data_frame(x = c(0.01,0.99)) %>%
1614902257030:ggplot(aes(x = x)) +
1614902257051:theme_classic() +
1614902257075:stat_function(fun = prior,
1614902257097:colour = "blue") +
1614902257118:stat_function(fun = posterior,
1614902257140:args = list(sumx = 5,n = 50),
1614902257163:colour = "purple") +
1614902257184:stat_function(fun = posterior,
1614902257210:args = list(sumx = 10,n = 50),
1614902257234:colour = "red") +
1614902257263:stat_function(fun = posterior,
1614902257289:args = list(sumx = 15,n = 50),
1614902257314:colour = "orange") +
1614902257337:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614902257375:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614902257399:x = "Lambda",
1614902257421:y = "Density") +
1614902257445:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614903528281:install.packages("opendatatoronto")
1614905011934:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614905011975:# You may need additional chunks, in case you want to include some of the cleaning output.
1614905011997:# get package
1614905012020:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614905033940:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614905033965:library(openintro)
1614905034058:library(opendatatoronto)
1614905034095:library(dplyr)
1614905034117:library(patchwork)
1614905034177:library(tidyverse)
1614905040310:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614905040334:library(openintro)
1614905041187:library(opendatatoronto)
1614905041374:library(dplyr)
1614905041432:library(patchwork)
1614905041495:library(tidyverse)
1614905044124:## Here you can code your simulation and create the 3 plots.
1614905044177:## Here is some starter code for the simulation:
1614905044224:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614905044248:n1 = 10
1614905044281:n2 = 50 #pre-specify your sample size
1614905044363:## Create your plots below. (I recommend using ggplot)
1614905044423:## Remember the patchwork package might be helpful.
1614905044509:library(tidyverse)
1614905044557:prior <- function(lambda) dexp(lambda, rate = 5)
1614905044580:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614905044620:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614905044646:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614905044703:data_frame(x = c(0.01,0.99)) %>%
1614905044727:ggplot(aes(x = x)) +
1614905044763:theme_classic() +
1614905044787:stat_function(fun = prior,
1614905044815:colour = "blue") +
1614905044840:stat_function(fun = posterior,
1614905044865:args = list(sumx = 5,n = 10),
1614905044889:colour = "purple") +
1614905044912:stat_function(fun = posterior,
1614905044936:args = list(sumx = 10,n = 10),
1614905044961:colour = "red") +
1614905044983:stat_function(fun = posterior,
1614905045007:args = list(sumx = 15,n = 10),
1614905045032:colour = "orange") +
1614905045055:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614905045081:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614905045104:x = "Lambda",
1614905045129:y = "Density") +
1614905045154:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614905045533:data_frame(x = c(0.01,0.99)) %>%
1614905045557:ggplot(aes(x = x)) +
1614905045585:theme_classic() +
1614905045607:stat_function(fun = prior,
1614905045633:colour = "blue") +
1614905045658:stat_function(fun = posterior,
1614905045686:args = list(sumx = 5,n = 50),
1614905045709:colour = "purple") +
1614905045731:stat_function(fun = posterior,
1614905045752:args = list(sumx = 10,n = 50),
1614905045773:colour = "red") +
1614905045796:stat_function(fun = posterior,
1614905045817:args = list(sumx = 15,n = 50),
1614905045837:colour = "orange") +
1614905045859:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614905045881:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614905045909:x = "Lambda",
1614905045934:y = "Density") +
1614905045961:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614905046413:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614905046463:# You may need additional chunks, in case you want to include some of the cleaning output.
1614905046486:# get package
1614905046509:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614905047060:package
1614905047132:# get all resources for this package
1614905047156:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614905047261:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614905047285:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614905047344:# load the first datastore resource as a sample
1614905047366:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614905049153:data
1614905049506:# Use this to calculate some summary measures.
1614905049603:# Use this to create some plots.
1614905049699:# Here you can run a your bootstrap.
1614905049749:# Here you can derive the CIs of interest.
1614905049885:# Here you can include some relevant visualizations.
1614905054352:View(data)
1614905568248:# Use this to calculate some summary measures.
1614905568277:summary(data)
1614905587094:# Use this to calculate some summary measures.
1614905587118:summary(data$AutoTheft_AVG)
1614905610159:# Use this to calculate some summary measures.
1614905610188:summary(data$AutoTheft_AVG)
1614906419193:# Use this to create some plots.
1614906419216:data %>%
1614906419238:ggplot(aes(x = AutoTheft_AVG))+
1614906419261:geom_histogram(col = "blue")+
1614906419286:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614906419308:theme(plot.title = element_text(size=12))
1614906726791:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614906726832:# You may need additional chunks, in case you want to include some of the cleaning output.
1614906726855:# get package
1614906726878:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906727210:package
1614906727278:# get all resources for this package
1614906727301:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906727384:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614906727407:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614906727464:# load the first datastore resource as a sample
1614906727487:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614906729044:data
1614906729249:data <- filter(data$Hood_ID == 001)
1614906747758:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614906747810:# You may need additional chunks, in case you want to include some of the cleaning output.
1614906747833:# get package
1614906747859:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906747928:package
1614906748002:# get all resources for this package
1614906748026:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906748108:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614906748132:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614906748180:# load the first datastore resource as a sample
1614906748204:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614906749857:data
1614906750051:data <- filter(data$Hood_ID == "001")
1614906774113:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614906774160:# You may need additional chunks, in case you want to include some of the cleaning output.
1614906774184:# get package
1614906774209:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906774321:package
1614906774393:# get all resources for this package
1614906774416:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906774529:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614906774552:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614906774600:# load the first datastore resource as a sample
1614906774622:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614906775957:data
1614906776136:data <-data %>% <- filter(data$Hood_ID == "001")
1614906778325:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614906778365:# You may need additional chunks, in case you want to include some of the cleaning output.
1614906778389:# get package
1614906778418:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906778477:package
1614906778554:# get all resources for this package
1614906778576:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906778661:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614906778686:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614906778739:# load the first datastore resource as a sample
1614906778768:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614906780248:data
1614906780431:data <-data %>% filter(data$Hood_ID == "001")
1614906780512:data
1614906787664:# Use this to create some plots.
1614906787688:data %>%
1614906787713:ggplot(aes(x = AutoTheft_AVG))+
1614906787737:geom_histogram(col = "blue")+
1614906787763:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614906787790:theme(plot.title = element_text(size=12))
1614906792955:# Use this to calculate some summary measures.
1614906792981:summary(data$AutoTheft_AVG)
1614906802786:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614906802830:# You may need additional chunks, in case you want to include some of the cleaning output.
1614906802850:# get package
1614906802874:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906802952:package
1614906803027:# get all resources for this package
1614906803053:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614906803146:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614906803172:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614906803232:# load the first datastore resource as a sample
1614906803261:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614906804599:data
1614906804801:data <-data %>% filter(data$Hood_ID != "001")
1614906804834:data
1614906806879:# Use this to calculate some summary measures.
1614906806907:summary(data$AutoTheft_AVG)
1614906810434:# Use this to create some plots.
1614906810460:data %>%
1614906810486:ggplot(aes(x = AutoTheft_AVG))+
1614906810510:geom_histogram(col = "blue")+
1614906810533:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614906810558:theme(plot.title = element_text(size=12))
1614906822564:# Use this to calculate some summary measures.
1614906822593:summary(data$AutoTheft_AVG)
1614906948255:View(datastore_resources)
1614906951189:View(data)
1614907063356:# Use this to create some plots.
1614907063378:data %>%
1614907063403:ggplot(aes(x = AutoTheft_AVG))+
1614907063426:geom_histogram(col = "blue")+
1614907063450:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907063476:theme(plot.title = element_text(size=12))
1614907115349:# Use this to create some plots.
1614907115376:data %>%
1614907115415:ggplot(aes(x = AutoTheft_AVG))+
1614907115438:geom_histogram(col = "blue")+
1614907115463:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907115494:theme(plot.title = element_text(size=12))
1614907121611:# Use this to create some plots.
1614907121639:data %>%
1614907121663:ggplot(aes(x = AutoTheft_AVG))+
1614907121690:geom_histogram(col = "light blue")+
1614907121713:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907121739:theme(plot.title = element_text(size=12))
1614907128885:# Use this to create some plots.
1614907128911:data %>%
1614907128934:ggplot(aes(x = AutoTheft_AVG))+
1614907128958:geom_histogram(color = "light blue")+
1614907128988:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907129019:theme(plot.title = element_text(size=12))
1614907159062:# Use this to create some plots.
1614907159084:data %>%
1614907159108:ggplot(aes(x = AutoTheft_AVG))+
1614907159136:geom_histogram(color = " ")+
1614907159161:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907159186:theme(plot.title = element_text(size=12))
1614907170520:# Use this to create some plots.
1614907170543:data %>%
1614907170563:ggplot(aes(x = AutoTheft_AVG))+
1614907170584:geom_histogram(fill = "light blue")+
1614907170605:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907170624:theme(plot.title = element_text(size=12))
1614907187868:# Use this to create some plots.
1614907187889:data %>%
1614907187913:ggplot(aes(x = AutoTheft_AVG))+
1614907187945:geom_histogram(fill = "light blue", col = "blue")+
1614907187969:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907187992:theme(plot.title = element_text(size=12))
1614907208789:# Use this to create some plots.
1614907208821:data %>%
1614907208847:ggplot(aes(x = AutoTheft_AVG))+
1614907208870:geom_histogram(fill = "light blue", col = "blue", binwidth = 10)+
1614907208896:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907208920:theme(plot.title = element_text(size=12))
1614907216305:# Use this to create some plots.
1614907216334:data %>%
1614907216357:ggplot(aes(x = AutoTheft_AVG))+
1614907216379:geom_histogram(fill = "light blue", col = "blue", binwidth = 15)+
1614907216404:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907216430:theme(plot.title = element_text(size=12))
1614907221759:# Use this to create some plots.
1614907221782:data %>%
1614907221806:ggplot(aes(x = AutoTheft_AVG))+
1614907221829:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614907221857:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1614907221878:theme(plot.title = element_text(size=12))
1614907240137:# Use this to create some plots.
1614907240162:data %>%
1614907240190:ggplot(aes(x = AutoTheft_AVG))+
1614907240216:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614907240244:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614907240269:theme(plot.title = element_text(size=12))
1614908515197:# Use this to create some plots.
1614908515226:data %>%
1614908515248:ggplot(aes(x = AutoTheft_AVG))+
1614908515269:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614908515291:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614908515317:xlab("Average Auto Theft")
1614908515494:theme(plot.title = element_text(size=12))
1614908645168:# Use this to create some plots.
1614908645195:data %>%
1614908645219:ggplot(aes(x = AutoTheft_AVG))+
1614908645242:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614908645269:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614908645294:xlab("Average Auto Thefts")+
1614908645318:ylab("Count")
1614908645532:theme(plot.title = element_text(size=12))
1614908714221:# Use this to create some plots.
1614908714245:data %>%
1614908714273:ggplot(aes(x = AutoTheft_AVG))+
1614908714293:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614908714315:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614908714340:xlab("Average Auto Thefts")+
1614908714364:ylab("Number of Neighbourhoods")
1614908714533:theme(plot.title = element_text(size=12))
1614961962210:install.packages(c("opendatatoronto", "patchwork"))
1614962064417:# Use this to create some plots.
1614962064439:data %>%
1614962064462:ggplot(aes(x = AutoTheft_AVG))+
1614962064486:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614962064508:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614962064532:xlab("Average Auto Thefts")+
1614962064556:ylab("Number of Neighbourhoods")
1614962068053:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614962068077:library(openintro)
1614962068750:library(opendatatoronto)
1614962068895:library(dplyr)
1614962068939:library(patchwork)
1614962069013:library(tidyverse)
1614962070281:## Here you can code your simulation and create the 3 plots.
1614962070322:## Here is some starter code for the simulation:
1614962070360:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614962070380:n1 = 10
1614962070401:n2 = 50 #pre-specify your sample size
1614962070481:## Create your plots below. (I recommend using ggplot)
1614962070541:## Remember the patchwork package might be helpful.
1614962070641:library(tidyverse)
1614962070680:prior <- function(lambda) dexp(lambda, rate = 5)
1614962070739:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614962070773:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614962070794:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614962070831:data_frame(x = c(0.01,0.99)) %>%
1614962070855:ggplot(aes(x = x)) +
1614962070880:theme_classic() +
1614962070900:stat_function(fun = prior,
1614962070921:colour = "blue") +
1614962070945:stat_function(fun = posterior,
1614962070972:args = list(sumx = 5,n = 10),
1614962070996:colour = "purple") +
1614962071017:stat_function(fun = posterior,
1614962071037:args = list(sumx = 10,n = 10),
1614962071058:colour = "red") +
1614962071079:stat_function(fun = posterior,
1614962071100:args = list(sumx = 15,n = 10),
1614962071120:colour = "orange") +
1614962071140:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614962071158:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614962071179:x = "Lambda",
1614962071202:y = "Density") +
1614962071229:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614962071578:data_frame(x = c(0.01,0.99)) %>%
1614962071599:ggplot(aes(x = x)) +
1614962071627:theme_classic() +
1614962071646:stat_function(fun = prior,
1614962071668:colour = "blue") +
1614962071691:stat_function(fun = posterior,
1614962071712:args = list(sumx = 5,n = 50),
1614962071734:colour = "purple") +
1614962071757:stat_function(fun = posterior,
1614962071789:args = list(sumx = 10,n = 50),
1614962071812:colour = "red") +
1614962071834:stat_function(fun = posterior,
1614962071854:args = list(sumx = 15,n = 50),
1614962071878:colour = "orange") +
1614962071901:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614962071924:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614962071954:x = "Lambda",
1614962071981:y = "Density") +
1614962072008:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614962072491:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614962072531:# You may need additional chunks, in case you want to include some of the cleaning output.
1614962072552:# get package
1614962072572:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614962073052:package
1614962073114:# get all resources for this package
1614962073137:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614962073224:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614962073245:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614962073300:# load the first datastore resource as a sample
1614962073328:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614962075942:data
1614962076131:data <-data %>% filter(data$Hood_ID != "001")
1614962076157:data
1614962076357:# Use this to calculate some summary measures.
1614962076389:summary(data$AutoTheft_AVG)
1614962076557:# Use this to create some plots.
1614962076583:data %>%
1614962076602:ggplot(aes(x = AutoTheft_AVG))+
1614962076622:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614962076644:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614962076665:xlab("Average Auto Thefts")+
1614962076685:ylab("Number of Neighbourhoods")
1614962076841:theme(plot.title = element_text(size=12))
1614962077755:# Here you can run a your bootstrap.
1614962077796:# Here you can derive the CIs of interest.
1614962077895:# Here you can include some relevant visualizations.
1614962213743:# Here you can run a your bootstrap.
1614962213785:# Here you can derive the CIs of interest.
1614962213827:df <- data %>% filter(AutoTheft_AVG)
1614962302197:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614962302225:library(openintro)
1614962302252:library(opendatatoronto)
1614962302276:library(dplyr)
1614962302301:library(patchwork)
1614962302321:library(tidyverse)
1614962302383:## Here you can code your simulation and create the 3 plots.
1614962302428:## Here is some starter code for the simulation:
1614962302468:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614962302489:n1 = 10
1614962302512:n2 = 50 #pre-specify your sample size
1614962302590:## Create your plots below. (I recommend using ggplot)
1614962302645:## Remember the patchwork package might be helpful.
1614962302718:library(tidyverse)
1614962302777:prior <- function(lambda) dexp(lambda, rate = 5)
1614962302799:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614962302844:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614962302866:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614962302907:data_frame(x = c(0.01,0.99)) %>%
1614962302929:ggplot(aes(x = x)) +
1614962302952:theme_classic() +
1614962302975:stat_function(fun = prior,
1614962302999:colour = "blue") +
1614962303023:stat_function(fun = posterior,
1614962303053:args = list(sumx = 5,n = 10),
1614962303075:colour = "purple") +
1614962303095:stat_function(fun = posterior,
1614962303118:args = list(sumx = 10,n = 10),
1614962303141:colour = "red") +
1614962303168:stat_function(fun = posterior,
1614962303192:args = list(sumx = 15,n = 10),
1614962303217:colour = "orange") +
1614962303241:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614962303265:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614962303289:x = "Lambda",
1614962303313:y = "Density") +
1614962303333:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614962303529:data_frame(x = c(0.01,0.99)) %>%
1614962303550:ggplot(aes(x = x)) +
1614962303573:theme_classic() +
1614962303594:stat_function(fun = prior,
1614962303615:colour = "blue") +
1614962303635:stat_function(fun = posterior,
1614962303654:args = list(sumx = 5,n = 50),
1614962303676:colour = "purple") +
1614962303700:stat_function(fun = posterior,
1614962303725:args = list(sumx = 10,n = 50),
1614962303749:colour = "red") +
1614962303771:stat_function(fun = posterior,
1614962303792:args = list(sumx = 15,n = 50),
1614962303817:colour = "orange") +
1614962303842:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614962303867:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614962303890:x = "Lambda",
1614962303911:y = "Density") +
1614962303931:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614962304370:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614962304411:# You may need additional chunks, in case you want to include some of the cleaning output.
1614962304434:# get package
1614962304458:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614962304605:package
1614962304669:# get all resources for this package
1614962304697:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614962304768:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614962304799:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614962304846:# load the first datastore resource as a sample
1614962304867:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614962306707:data
1614962306875:data <-data %>% filter(data$Hood_ID != "001")
1614962306905:data
1614962307109:# Use this to calculate some summary measures.
1614962307142:summary(data$AutoTheft_AVG)
1614962307296:# Use this to create some plots.
1614962307323:data %>%
1614962307343:ggplot(aes(x = AutoTheft_AVG))+
1614962307364:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614962307386:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614962307410:xlab("Average Auto Thefts")+
1614962307432:ylab("Number of Neighbourhoods")
1614962307605:theme(plot.title = element_text(size=12))
1614962308514:# Here you can run a your bootstrap.
1614962308560:# Here you can derive the CIs of interest.
1614962308602:df <- data %>% filter(AutoTheft_AVG) %>% group_by(AutoTheft_AVG)
1614962415447:# Here you can run a your bootstrap.
1614962415480:# Here you can derive the CIs of interest.
1614962415513:df <- data %>% select(AutoTheft_AVG)
1614962415540:df
1614962418690:View(df)
1614962738116:# Here you can run a your bootstrap.
1614962738151:# Here you can derive the CIs of interest.
1614962738186:df <- data %>% select(AutoTheft_AVG)
1614962738213:df
1614962738345:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614962752665:# Here you can run a your bootstrap.
1614962752707:# Here you can derive the CIs of interest.
1614962752747:df <- data %>% select(AutoTheft_AVG)
1614962752772:df
1614962752892:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614962781399:# Here you can run a your bootstrap.
1614962781442:# Here you can derive the CIs of interest.
1614962781486:df <- data %>% select(AutoTheft_AVG)
1614962781513:df
1614962781655:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614962782097:population_mean <- as.numeric(population_mean)
1614963128100:# Here you can run a your bootstrap.
1614963128141:# Here you can derive the CIs of interest.
1614963128186:df <- data %>% select(AutoTheft_AVG)
1614963128216:df
1614963128355:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614963128787:population_mean <- as.numeric(population_mean)
1614963128832:sample_means <- rep(NA, 1000)
1614963128875:for (i in 1: 1000){
1614963128901:sample_15 <- df %>% sample_n(size = 15)
1614963128922:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614963128961:}
1614963205421:# Here you can run a your bootstrap.
1614963205460:# Here you can derive the CIs of interest.
1614963205495:df <- data %>% select(AutoTheft_AVG)
1614963205519:df
1614963205653:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614963206142:population_mean <- as.numeric(population_mean)
1614963206190:sample_means <- rep(NA, 1000)
1614963206234:for (i in 1: 1000){
1614963206256:sample_15 <- df %>% sample_n(size = 15)
1614963206278:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614963206298:}
1614963237034:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614963316200:# Here you can run a your bootstrap.
1614963316242:# Here you can derive the CIs of interest.
1614963316282:df <- data %>% select(AutoTheft_AVG)
1614963316308:df
1614963316460:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614963316912:population_mean <- as.numeric(population_mean)
1614963316950:sample_means <- rep(NA, 1000)
1614963316989:for (i in 1: 1000){
1614963317011:sample_15 <- df %>% sample_n(size = 15)
1614963317036:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614963317064:}
1614963349672:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614963349716:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963349741:geom_histogram(binwidth = 5)+
1614963349768:labs(x = "okokokkkk", y = "wow")
1614963370735:# Here you can run a your bootstrap.
1614963370774:# Here you can derive the CIs of interest.
1614963370815:df <- data %>% select(AutoTheft_AVG)
1614963370841:df
1614963370970:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614963371413:population_mean <- as.numeric(population_mean)
1614963371457:sample_means <- rep(NA, 1000)
1614963371505:for (i in 1: 1000){
1614963371532:sample_15 <- df %>% sample_n(size = 15)
1614963371555:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614963371580:}
1614963385683:# Here you can run a your bootstrap.
1614963385726:# Here you can derive the CIs of interest.
1614963385772:df <- data %>% select(AutoTheft_AVG)
1614963385803:df
1614963385952:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614963386434:population_mean <- as.numeric(population_mean)
1614963386479:sample_means <- rep(NA, 1000)
1614963386532:for (i in 1: 1000){
1614963386557:sample_15 <- df %>% sample_n(size = 15)
1614963386584:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614963386607:}
1614963416800:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614963416846:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963416878:geom_histogram(binwidth = 5)+
1614963416903:labs(x = "okokokkkk", y = "wow")
1614963508792:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963508810:geom_histogram(binwidth = 3)+
1614963508832:labs(x = "okokokkkk", y = "wow")
1614963536914:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963536939:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614963536980:labs(x = "okokokkkk", y = "wow")
1614963581595:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963581618:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614963581657:theme(classic)+
1614963581680:labs(x = "okokokkkk", y = "wow")
1614963615641:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614963615669:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614963615692:theme_classic()+
1614963615716:labs(x = "okokokkkk", y = "wow")
1614965242575:# Here you can run a your bootstrap.
1614965242631:# Here you can derive the CIs of interest.
1614965242689:df <- data %>% select(AutoTheft_AVG)
1614965242724:df
1614965242875:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614965243333:population_mean <- as.numeric(population_mean)
1614965243487:boot_means <- rep(NA, 5000){ # where we'll store the means for(i in 1:5000){
1614965260370:# Here you can run a your bootstrap.
1614965260420:# Here you can derive the CIs of interest.
1614965260459:df <- data %>% select(AutoTheft_AVG)
1614965260485:df
1614965260612:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614965261038:population_mean <- as.numeric(population_mean)
1614965261170:boot_means <- rep(NA, 5000) # where we'll store the means
1614965261201:for(i in 1:5000){
1614965261227:boot_samp <- observed_data %>% sample_n(size=200, replace=TRUE)
1614965261255:boot_means[i] <-
1614965261283:as.numeric(boot_samp %>%
1614965261310:summarize(mean_theft = mean(AutoTheft_AVG)))
1614965261334:}
1614965298290:# Here you can run a your bootstrap.
1614965298332:# Here you can derive the CIs of interest.
1614965298376:df <- data %>% select(AutoTheft_AVG)
1614965298405:df
1614965298553:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614965299004:population_mean <- as.numeric(population_mean)
1614965299046:sample_means <- rep(NA, 1000)
1614965299090:for (i in 1: 1000){
1614965299114:sample_15 <- df %>% sample_n(size = 15)
1614965299137:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614965299160:}
1614965330351:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614965330424:observed_data <- SF %>%
1614965330448:sample_n(size=200)
1614965393373:# Here you can run a your bootstrap.
1614965393423:# Here you can derive the CIs of interest.
1614965393464:df <- data %>% select(AutoTheft_AVG)
1614965393492:df
1614965393622:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614965394060:population_mean <- as.numeric(population_mean)
1614965394104:sample_means <- rep(NA, 1000)
1614965394151:for (i in 1: 1000){
1614965394173:sample_15 <- df %>% sample_n(size = 15)
1614965394199:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614965394221:}
1614965425525:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614965425593:observed_data <- df %>%
1614965425616:sample_n(size=200)
1614965532447:observed_data <- df %>%
1614965532466:sample_n(size=200, replace = TRUE)
1614965532513:obs_mean <- observed_data %>%
1614965532536:summarize(mean(AutoTheft_AVG))
1614965533183:as.numeric(obs_mean)
1614965533256:boot_means <- rep(NA, 5000) # where we'll store the means
1614965533311:for(i in 1:5000){
1614965533335:boot_samp <- observed_data %>% sample_n(size=200, replace=TRUE)
1614965533358:boot_means[i] <-
1614965533394:as.numeric(boot_samp %>%
1614965533419:summarize(mean_theft = mean(AutoTheft_AVG)))
1614965533446:}
1614965925924:observed_data <- df %>%
1614965925947:sample_n(size=200, replace = TRUE)
1614965925997:obs_mean <- observed_data %>%
1614965926018:summarize(mean(AutoTheft_AVG))
1614965926899:as.numeric(obs_mean)
1614965926966:boot_means <- rep(NA, 1000) # where we'll store the means
1614965927005:for(i in 1:1000){
1614965927029:boot_samp <- observed_data %>% sample_n(size=200, replace=TRUE)
1614965927053:boot_means[i] <-
1614965927073:as.numeric(boot_samp %>%
1614965927093:summarize(mean_theft = mean(AutoTheft_AVG)))
1614965927114:}
1614966815426:observed_data <- df %>%
1614966815447:sample_n(size=50, replace = TRUE)
1614966815506:obs_mean <- observed_data %>%
1614966815527:summarize(mean(AutoTheft_AVG))
1614966815692:as.numeric(obs_mean)
1614966815759:boot_means <- rep(NA, 100)
1614966815801:for(i in 1:100){
1614966815821:boot_samp <- observed_data %>% sample_n(size=50, replace=TRUE)
1614966815844:boot_means[i] <-
1614966815865:as.numeric(boot_samp %>%
1614966815888:summarize(mean_theft = mean(AutoTheft_AVG)))
1614966815910:}
1614966831828:boot_means <- data_frame(mean_theft = boot_means)
1614966870751:observed_data <- df %>%
1614966870772:sample_n(size=25, replace = TRUE)
1614966870821:obs_mean <- observed_data %>%
1614966870841:summarize(mean(AutoTheft_AVG))
1614966870934:as.numeric(obs_mean)
1614966871000:boot_means <- rep(NA, 100)
1614966871039:for(i in 1:100){
1614966871061:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614966871083:boot_means[i] <-
1614966871104:as.numeric(boot_samp %>%
1614966871127:summarize(mean_theft = mean(AutoTheft_AVG)))
1614966871148:}
1614966879828:boot_means <- data_frame(mean_theft = boot_means)
1614966897361:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614966897383:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614966897404:theme_classic()+
1614966897427:labs(x = "okokokkkk", y = "wow")
1614966897585:quantile(boot_means$mean_theft, c(0.025, 0.4, 0.57))
1614966925782:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614966925801:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614966925821:theme_classic()+
1614966925846:labs(x = "okokokkkk", y = "wow")
1614966926018:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614966938968:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614966938991:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614966939011:theme_classic()+
1614966939032:labs(x = "okokokkkk", y = "wow")
1614966939205:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614966939251:as.numeric(population_mean)
1614967064456:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614967064483:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614967064507:theme_classic()+
1614967064532:labs(x = "okokokkkk", y = "wow")+
1614967064558:geom_vline(xintercept = 22.2971)+
1614967064585:geom_vline(xintercept = 37.7114)
1614967064801:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614967064858:as.numeric(population_mean)
1614967962772:observed_data <- df %>%
1614967962794:sample_n(size=25, replace = TRUE)
1614967962843:obs_mean <- observed_data %>%
1614967962865:summarize(mean(AutoTheft_AVG))
1614967962952:as.numeric(obs_mean)
1614967963028:boot_means <- rep(NA, 500)
1614967963069:for(i in 1:500){
1614967963089:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614967963111:boot_means[i] <-
1614967963129:as.numeric(boot_samp %>%
1614967963150:summarize(mean_theft = mean(AutoTheft_AVG)))
1614967963169:}
1614967992951:boot_means <- data_frame(mean_theft = boot_means)
1614968092420:observed_data <- df %>%
1614968092440:sample_n(size=25, replace = TRUE)
1614968092486:obs_mean <- observed_data %>%
1614968092504:summarize(mean(AutoTheft_AVG))
1614968092584:as.numeric(obs_mean)
1614968092645:boot_means <- rep(NA, 1000)
1614968092690:for(i in 1:1000){
1614968092718:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614968092740:boot_means[i] <-
1614968092763:as.numeric(boot_samp %>%
1614968092788:summarize(mean_theft = mean(AutoTheft_AVG)))
1614968092813:}
1614968177817:boot_means <- data_frame(mean_theft = boot_means)
1614970095305:library(tidyverse)
1614970095346:prior <- function(lambda) dexp(lambda, rate = 5)
1614970095375:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970095411:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614970095433:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970095470:data_frame(x = c(0.01,0.99)) %>%
1614970095491:ggplot(aes(x = x)) +
1614970095510:theme_classic() +
1614970095531:stat_function(fun = prior,
1614970095551:colour = "blue") +
1614970095573:stat_function(fun = posterior,
1614970095596:args = list(sumx = 1,n = 10),
1614970095617:colour = "purple") +
1614970095637:stat_function(fun = posterior,
1614970095660:args = list(sumx = 10,n = 10),
1614970095684:colour = "red") +
1614970095709:stat_function(fun = posterior,
1614970095734:args = list(sumx = 15,n = 10),
1614970095758:colour = "orange") +
1614970095784:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970095809:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970095834:x = "Lambda",
1614970095858:y = "Density") +
1614970095881:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970096063:data_frame(x = c(0.01,0.99)) %>%
1614970096087:ggplot(aes(x = x)) +
1614970096111:theme_classic() +
1614970096138:stat_function(fun = prior,
1614970096156:colour = "blue") +
1614970096175:stat_function(fun = posterior,
1614970096197:args = list(sumx = 5,n = 50),
1614970096218:colour = "purple") +
1614970096242:stat_function(fun = posterior,
1614970096264:args = list(sumx = 10,n = 50),
1614970096288:colour = "red") +
1614970096317:stat_function(fun = posterior,
1614970096343:args = list(sumx = 15,n = 50),
1614970096366:colour = "orange") +
1614970096388:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970096408:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970096431:x = "Lambda",
1614970096454:y = "Density") +
1614970096476:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970105427:library(tidyverse)
1614970105468:prior <- function(lambda) dexp(lambda, rate = 5)
1614970105499:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970105542:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614970105570:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970105614:data_frame(x = c(0.01,0.99)) %>%
1614970105644:ggplot(aes(x = x)) +
1614970105665:theme_classic() +
1614970105688:stat_function(fun = prior,
1614970105719:colour = "blue") +
1614970105749:stat_function(fun = posterior,
1614970105773:args = list(sumx = 5,n = 10),
1614970105798:colour = "purple") +
1614970105823:stat_function(fun = posterior,
1614970105845:args = list(sumx = 10,n = 10),
1614970105867:colour = "red") +
1614970105904:stat_function(fun = posterior,
1614970105935:args = list(sumx = 15,n = 10),
1614970105958:colour = "orange") +
1614970105984:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970106005:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970106028:x = "Lambda",
1614970106049:y = "Density") +
1614970106073:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970106267:data_frame(x = c(0.01,0.99)) %>%
1614970106293:ggplot(aes(x = x)) +
1614970106316:theme_classic() +
1614970106339:stat_function(fun = prior,
1614970106363:colour = "blue") +
1614970106389:stat_function(fun = posterior,
1614970106415:args = list(sumx = 5,n = 50),
1614970106440:colour = "purple") +
1614970106465:stat_function(fun = posterior,
1614970106489:args = list(sumx = 10,n = 50),
1614970106517:colour = "red") +
1614970106557:stat_function(fun = posterior,
1614970106579:args = list(sumx = 15,n = 50),
1614970106602:colour = "orange") +
1614970106623:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970106645:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970106670:x = "Lambda",
1614970106692:y = "Density") +
1614970106713:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970203031:library(tidyverse)
1614970203069:prior <- function(lambda) dexp(lambda, rate = 0.2)
1614970203088:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970203124:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 0.2))
1614970203150:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970203185:data_frame(x = c(0.01,0.99)) %>%
1614970203208:ggplot(aes(x = x)) +
1614970203231:theme_classic() +
1614970203252:stat_function(fun = prior,
1614970203275:colour = "blue") +
1614970203298:stat_function(fun = posterior,
1614970203326:args = list(sumx = 5,n = 10),
1614970203354:colour = "purple") +
1614970203377:stat_function(fun = posterior,
1614970203398:args = list(sumx = 10,n = 10),
1614970203422:colour = "red") +
1614970203452:stat_function(fun = posterior,
1614970203478:args = list(sumx = 15,n = 10),
1614970203500:colour = "orange") +
1614970203522:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970203547:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970203581:x = "Lambda",
1614970203609:y = "Density") +
1614970203629:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970203837:data_frame(x = c(0.01,0.99)) %>%
1614970203865:ggplot(aes(x = x)) +
1614970203889:theme_classic() +
1614970203914:stat_function(fun = prior,
1614970203938:colour = "blue") +
1614970203961:stat_function(fun = posterior,
1614970203983:args = list(sumx = 5,n = 50),
1614970204005:colour = "purple") +
1614970204031:stat_function(fun = posterior,
1614970204055:args = list(sumx = 10,n = 50),
1614970204078:colour = "red") +
1614970204100:stat_function(fun = posterior,
1614970204123:args = list(sumx = 15,n = 50),
1614970204150:colour = "orange") +
1614970204175:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970204204:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970204230:x = "Lambda",
1614970204252:y = "Density") +
1614970204272:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970216282:library(tidyverse)
1614970216326:prior <- function(lambda) dexp(lambda, rate = 5)
1614970216351:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970216393:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614970216420:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970216461:data_frame(x = c(0.01,0.99)) %>%
1614970216486:ggplot(aes(x = x)) +
1614970216508:theme_classic() +
1614970216532:stat_function(fun = prior,
1614970216555:colour = "blue") +
1614970216578:stat_function(fun = posterior,
1614970216601:args = list(sumx = 5,n = 10),
1614970216623:colour = "purple") +
1614970216648:stat_function(fun = posterior,
1614970216677:args = list(sumx = 10,n = 10),
1614970216705:colour = "red") +
1614970216726:stat_function(fun = posterior,
1614970216753:args = list(sumx = 15,n = 10),
1614970216777:colour = "orange") +
1614970216801:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970216822:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970216844:x = "Lambda",
1614970216865:y = "Density") +
1614970216885:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970217071:data_frame(x = c(0.01,0.99)) %>%
1614970217100:ggplot(aes(x = x)) +
1614970217135:theme_classic() +
1614970217160:stat_function(fun = prior,
1614970217179:colour = "blue") +
1614970217203:stat_function(fun = posterior,
1614970217223:args = list(sumx = 5,n = 50),
1614970217252:colour = "purple") +
1614970217275:stat_function(fun = posterior,
1614970217301:args = list(sumx = 10,n = 50),
1614970217327:colour = "red") +
1614970217350:stat_function(fun = posterior,
1614970217373:args = list(sumx = 15,n = 50),
1614970217399:colour = "orange") +
1614970217425:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970217451:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970217474:x = "Lambda",
1614970217495:y = "Density") +
1614970217516:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970363173:library(tidyverse)
1614970363220:prior <- function(lambda) dexp(lambda, rate = 5)
1614970363247:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970363290:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614970363316:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970363354:data_frame(x = c(0.01,0.99)) %>%
1614970363380:ggplot(aes(x = x)) +
1614970363407:theme_classic() +
1614970363428:stat_function(fun = prior,
1614970363450:colour = "blue") +
1614970363482:stat_function(fun = posterior,
1614970363507:args = list(sumx = 5,n = 10),
1614970363544:colour = "purple") +
1614970363564:stat_function(fun = posterior,
1614970363585:args = list(sumx = 10,n = 10),
1614970363608:colour = "red") +
1614970363630:stat_function(fun = posterior,
1614970363651:args = list(sumx = 15,n = 10),
1614970363675:colour = "orange") +
1614970363700:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970363723:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970363748:x = "Lambda",
1614970363773:y = "Density") +
1614970363796:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970363972:data_frame(x = c(0.01,0.99)) %>%
1614970363994:ggplot(aes(x = x)) +
1614970364023:theme_classic() +
1614970364045:stat_function(fun = prior,
1614970364067:colour = "blue") +
1614970364088:stat_function(fun = posterior,
1614970364111:args = list(sumx = 5,n = 100),
1614970364136:colour = "purple") +
1614970364157:stat_function(fun = posterior,
1614970364179:args = list(sumx = 10,n = 100),
1614970364202:colour = "red") +
1614970364225:stat_function(fun = posterior,
1614970364252:args = list(sumx = 15,n = 100),
1614970364277:colour = "orange") +
1614970364304:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970364327:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970364351:x = "Lambda",
1614970364372:y = "Density") +
1614970364396:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970847631:library(tidyverse)
1614970847669:prior <- function(lambda) dexp(lambda, rate = 5)
1614970847691:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614970847731:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614970847754:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614970847792:data_frame(x = c(0.01,0.99)) %>%
1614970847810:ggplot(aes(x = x)) +
1614970847828:theme_classic() +
1614970847849:stat_function(fun = prior,
1614970847875:colour = "blue") +
1614970847900:stat_function(fun = posterior,
1614970847921:args = list(sumx = 5,n = 10),
1614970847942:colour = "purple") +
1614970847964:stat_function(fun = posterior,
1614970847987:args = list(sumx = 10,n = 10),
1614970848009:colour = "red") +
1614970848031:stat_function(fun = posterior,
1614970848054:args = list(sumx = 15,n = 10),
1614970848074:colour = "orange") +
1614970848096:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614970848118:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970848143:x = "Lambda",
1614970848165:y = "Density") +
1614970848185:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614970848357:data_frame(x = c(0.01,0.99)) %>%
1614970848382:ggplot(aes(x = x)) +
1614970848404:theme_classic() +
1614970848432:stat_function(fun = prior,
1614970848455:colour = "blue") +
1614970848479:stat_function(fun = posterior,
1614970848503:args = list(sumx = 5,n = 100),
1614970848528:colour = "purple") +
1614970848552:stat_function(fun = posterior,
1614970848580:args = list(sumx = 10,n = 100),
1614970848603:colour = "red") +
1614970848623:stat_function(fun = posterior,
1614970848645:args = list(sumx = 15,n = 100),
1614970848668:colour = "orange") +
1614970848701:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614970848726:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614970848750:x = "Lambda",
1614970848779:y = "Density") +
1614970848801:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614971956407:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614971956431:library(openintro)
1614971956453:library(opendatatoronto)
1614971956482:library(dplyr)
1614971956505:library(patchwork)
1614971956527:library(tidyverse)
1614971956597:## Here you can code your simulation and create the 3 plots.
1614971956642:## Here is some starter code for the simulation:
1614971956685:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614971956704:n1 = 10
1614971956727:n2 = 50 #pre-specify your sample size
1614971956804:## Create your plots below. (I recommend using ggplot)
1614971956861:## Remember the patchwork package might be helpful.
1614971956971:library(tidyverse)
1614971957017:prior <- function(lambda) dexp(lambda, rate = 5)
1614971957040:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614971957080:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614971957105:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614971957144:data_frame(x = c(0.01,0.99)) %>%
1614971957168:ggplot(aes(x = x)) +
1614971957190:theme_classic() +
1614971957216:stat_function(fun = prior,
1614971957242:colour = "blue") +
1614971957266:stat_function(fun = posterior,
1614971957291:args = list(sumx = 5,n = 10),
1614971957316:colour = "purple") +
1614971957338:stat_function(fun = posterior,
1614971957362:args = list(sumx = 10,n = 10),
1614971957384:colour = "red") +
1614971957404:stat_function(fun = posterior,
1614971957432:args = list(sumx = 15,n = 10),
1614971957486:colour = "orange") +
1614971957508:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614971957530:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614971957556:x = "Lambda",
1614971957579:y = "Density") +
1614971957601:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614971957824:data_frame(x = c(0.01,0.99)) %>%
1614971957853:ggplot(aes(x = x)) +
1614971957875:theme_classic() +
1614971957896:stat_function(fun = prior,
1614971957918:colour = "blue") +
1614971957940:stat_function(fun = posterior,
1614971957961:args = list(sumx = 5,n = 100),
1614971957988:colour = "purple") +
1614971958009:stat_function(fun = posterior,
1614971958032:args = list(sumx = 10,n = 100),
1614971958057:colour = "red") +
1614971958085:stat_function(fun = posterior,
1614971958109:args = list(sumx = 15,n = 100),
1614971958133:colour = "orange") +
1614971958156:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614971958178:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614971958207:x = "Lambda",
1614971958230:y = "Density") +
1614971958254:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614971958706:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614971958747:# You may need additional chunks, in case you want to include some of the cleaning output.
1614971958773:# get package
1614971958795:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614971959030:package
1614971959107:# get all resources for this package
1614971959130:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614971959201:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614971959227:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614971959276:# load the first datastore resource as a sample
1614971959300:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614971961420:data
1614971961595:data <-data %>% filter(data$Hood_ID != "001")
1614971961622:data
1614971961828:# Use this to calculate some summary measures.
1614971961859:summary(data$AutoTheft_AVG)
1614971961995:# Use this to create some plots.
1614971962029:data %>%
1614971962046:ggplot(aes(x = AutoTheft_AVG))+
1614971962067:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614971962088:ggtitle("Histogram of average auto thefts per neighbourhood to population in Toronto")+
1614971962109:xlab("Average Auto Thefts")+
1614971962130:ylab("Number of Neighbourhoods")
1614971962325:theme(plot.title = element_text(size=12))
1614971963223:# Here you can run a your bootstrap.
1614971963271:# Here you can derive the CIs of interest.
1614971963311:df <- data %>% select(AutoTheft_AVG)
1614971963339:df
1614971963482:population_mean <- df %>% summarise(population_mean_theft = mean(AutoTheft_AVG))
1614971963904:population_mean <- as.numeric(population_mean)
1614971963945:sample_means <- rep(NA, 1000)
1614971963986:for (i in 1: 1000){
1614971964015:sample_15 <- df %>% sample_n(size = 15)
1614971964038:sample_means[i] <- as.numeric(sample_15 %>% summarise(mean(AutoTheft_AVG)))
1614971964060:}
1614971993018:sample_means <- tibble(mean_AutoTheft_AVG = sample_means)
1614971993070:observed_data <- df %>%
1614971993098:sample_n(size=25, replace = TRUE)
1614971993150:obs_mean <- observed_data %>%
1614971993174:summarize(mean(AutoTheft_AVG))
1614971993324:as.numeric(obs_mean)
1614971993396:boot_means <- rep(NA, 1000)
1614971993439:for(i in 1:1000){
1614971993464:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614971993486:boot_means[i] <-
1614971993512:as.numeric(boot_samp %>%
1614971993537:summarize(mean_theft = mean(AutoTheft_AVG)))
1614971993562:}
1614972142336:boot_means <- data_frame(mean_theft = boot_means)
1614972142407:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614972142435:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614972142459:theme_classic()+
1614972142484:labs(x = "okokokkkk", y = "wow")+
1614972142509:geom_vline(xintercept = 22.2971)+
1614972142533:geom_vline(xintercept = 37.7114)
1614972142719:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972142768:as.numeric(population_mean)
1614972142939:# Here you can include some relevant visualizations.
1614972210938:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614972210968:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614972210991:theme_classic()+
1614972211027:labs(x = "okokokkkk", y = "wow")+
1614972211050:geom_vline(xintercept = 22.2971)+
1614972211077:geom_vline(xintercept = 37.7114, col = "blue")
1614972211318:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972211376:as.numeric(population_mean)
1614972221199:ggplot(sample_means, aes(x= mean_AutoTheft_AVG))+
1614972221229:geom_histogram(binwidth = 3, color = "brown", fill = "beige")+
1614972221250:theme_classic()+
1614972221273:labs(x = "okokokkkk", y = "wow")+
1614972221293:geom_vline(xintercept = 22.2971, col = "blue")+
1614972221316:geom_vline(xintercept = 37.7114, col = "blue")
1614972221517:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972221573:as.numeric(population_mean)
1614972265744:ggplot(boot_means, aes(x=mean_delay)) +
1614972265764:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972265785:labs(x="Means from bootstrap samples",
1614972265807:title="Bootstrap sampling distribution for the mean arrival delay")
1614972307079:ggplot(boot_means, aes(x=mean_theft)) +
1614972307101:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972307120:labs(x="Means from bootstrap samples",
1614972307140:title="Bootstrap sampling distribution for the mean arrival delay")
1614972307323:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972307379:as.numeric(population_mean)
1614972430667:ggplot(boot_means, aes(x=mean_theft)) +
1614972430694:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972430718:labs(x="Means from bootstrap samples",
1614972430745:title="Bootstrap sampling distribution for the mean auto thefts average from 2014 to 2019 in Toronto")+
1614972430767:geom_vline()
1614972469213:ggplot(boot_means, aes(x=mean_theft)) +
1614972469236:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972469261:labs(x="Means from bootstrap samples",
1614972469286:title="Bootstrap sampling distribution for the mean auto thefts average from 2014 to 2019 in Toronto")+
1614972469313:geom_vline(xintercept = 1)
1614972469549:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972469602:as.numeric(population_mean)
1614972508742:ggplot(boot_means, aes(x=mean_theft)) +
1614972508765:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972508788:labs(x="Means from bootstrap samples",
1614972508812:title="Bootstrap sampling distribution for the mean auto thefts average from 2014 to 2019 in Toronto")+
1614972508836:geom_vline(xintercept = 17.9224, col ="blue")+
1614972508859:geom_vline(xintercept = 34.0517, col = "blue")
1614972509074:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972509127:as.numeric(population_mean)
1614972532505:ggplot(boot_means, aes(x=mean_theft)) +
1614972532536:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614972532559:labs(x="Means from bootstrap samples",
1614972532583:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614972532605:geom_vline(xintercept = 17.9224, col ="blue")+
1614972532627:geom_vline(xintercept = 34.0517, col = "blue")
1614972532834:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614972532900:as.numeric(population_mean)
1614975971326:observed_data <- df %>%
1614975971347:sample_n(size=25, replace = TRUE)
1614975971401:obs_mean <- observed_data %>%
1614975971424:summarize(mean(AutoTheft_AVG))
1614975971549:as.numeric(obs_mean)
1614975971615:boot_means <- rep(NA, 1000)
1614975971665:for(i in 1:1000){
1614975971687:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614975971711:boot_means[i] <-
1614975971731:as.numeric(boot_samp %>%
1614975971755:summarize(mean_theft = mean(AutoTheft_AVG)))
1614975971780:}
1614975985145:set.seed(899)
1614975985176:observed_data <- df %>%
1614975985200:sample_n(size=25, replace = TRUE)
1614975985256:obs_mean <- observed_data %>%
1614975985281:summarize(mean(AutoTheft_AVG))
1614975985374:as.numeric(obs_mean)
1614975985445:boot_means <- rep(NA, 1000)
1614975985491:for(i in 1:1000){
1614975985518:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614975985542:boot_means[i] <-
1614975985571:as.numeric(boot_samp %>%
1614975985594:summarize(mean_theft = mean(AutoTheft_AVG)))
1614975985616:}
1614976053690:boot_means <- data_frame(mean_theft = boot_means)
1614976145259:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614976145287:library(openintro)
1614976145314:library(opendatatoronto)
1614976145350:library(dplyr)
1614976145374:library(patchwork)
1614976145403:library(tidyverse)
1614976145475:## Here you can code your simulation and create the 3 plots.
1614976145520:## Here is some starter code for the simulation:
1614976145568:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614976145589:n1 = 10
1614976145612:n2 = 50 #pre-specify your sample size
1614976145689:## Create your plots below. (I recommend using ggplot)
1614976145751:## Remember the patchwork package might be helpful.
1614976145855:library(tidyverse)
1614976145908:prior <- function(lambda) dexp(lambda, rate = 5)
1614976145932:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614976145979:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614976146004:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614976146045:data_frame(x = c(0.01,0.99)) %>%
1614976146067:ggplot(aes(x = x)) +
1614976146089:theme_classic() +
1614976146117:stat_function(fun = prior,
1614976146139:colour = "blue") +
1614976146159:stat_function(fun = posterior,
1614976146182:args = list(sumx = 5,n = 10),
1614976146204:colour = "purple") +
1614976146235:stat_function(fun = posterior,
1614976146258:args = list(sumx = 10,n = 10),
1614976146281:colour = "red") +
1614976146301:stat_function(fun = posterior,
1614976146324:args = list(sumx = 15,n = 10),
1614976146351:colour = "orange") +
1614976146371:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614976146394:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614976146415:x = "Lambda",
1614976146440:y = "Density") +
1614976146461:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614976146629:data_frame(x = c(0.01,0.99)) %>%
1614976146657:ggplot(aes(x = x)) +
1614976146680:theme_classic() +
1614976146707:stat_function(fun = prior,
1614976146726:colour = "blue") +
1614976146749:stat_function(fun = posterior,
1614976146772:args = list(sumx = 5,n = 100),
1614976146796:colour = "purple") +
1614976146818:stat_function(fun = posterior,
1614976146844:args = list(sumx = 10,n = 100),
1614976146867:colour = "red") +
1614976146890:stat_function(fun = posterior,
1614976146913:args = list(sumx = 15,n = 100),
1614976146936:colour = "orange") +
1614976146961:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614976146990:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614976147016:x = "Lambda",
1614976147042:y = "Density") +
1614976147066:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614976147540:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614976147585:# You may need additional chunks, in case you want to include some of the cleaning output.
1614976147605:# get package
1614976147625:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614976147873:package
1614976147946:# get all resources for this package
1614976147978:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614976148065:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614976148091:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614976148135:# load the first datastore resource as a sample
1614976148157:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614976149633:data
1614976149818:data <-data %>% filter(data$Hood_ID != "001")
1614976149846:data
1614976150049:# Use this to calculate some summary measures.
1614976150078:summary(data$AutoTheft_AVG)
1614976150240:# Use this to create some plots.
1614976150270:data %>%
1614976150295:ggplot(aes(x = AutoTheft_AVG))+
1614976150319:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614976150345:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614976150367:xlab("Average Auto Thefts")+
1614976150391:ylab("Number of Neighbourhoods")
1614976150534:theme(plot.title = element_text(size=12))
1614976151417:set.seed(899)
1614976151444:observed_data <- df %>%
1614976151465:sample_n(size=25, replace = TRUE)
1614976151515:obs_mean <- observed_data %>%
1614976151537:summarize(mean(AutoTheft_AVG))
1614976151618:as.numeric(obs_mean)
1614976151690:boot_means <- rep(NA, 1000)
1614976151731:for(i in 1:1000){
1614976151752:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976151773:boot_means[i] <-
1614976151793:as.numeric(boot_samp %>%
1614976151821:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976151841:}
1614976220819:boot_means <- data_frame(mean_theft = boot_means)
1614976220904:ggplot(boot_means, aes(x=mean_theft)) +
1614976220935:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614976220955:labs(x="Means from bootstrap samples",
1614976220974:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614976221000:geom_vline(xintercept = 17.9224, col ="blue")+
1614976221023:geom_vline(xintercept = 34.0517, col = "blue")
1614976221250:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614976221303:as.numeric(population_mean)
1614976221509:# Here you can include some relevant visualizations.
1614976577762:set.seed(899)
1614976577783:observed_data <- df %>%
1614976577804:sample_n(size=25, replace = TRUE)
1614976577865:obs_mean <- observed_data %>%
1614976577887:summarize(mean(AutoTheft_AVG))
1614976577980:as.numeric(obs_mean)
1614976578048:boot_means <- rep(NA, 1000)
1614976578092:for(i in 1:1000){
1614976578114:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976578137:boot_means[i] <-
1614976578159:as.numeric(boot_samp %>%
1614976578180:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976578206:}
1614976594807:set.seed(899)
1614976594833:observed_data <- df %>%
1614976594856:sample_n(size=25, replace = TRUE)
1614976594911:obs_mean <- observed_data %>%
1614976594935:summarize(mean(AutoTheft_AVG))
1614976595042:as.numeric(obs_mean)
1614976595110:boot_means <- rep(NA, 1000)
1614976595155:for(i in 1:1000){
1614976595179:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976595207:boot_means[i] <-
1614976595233:as.numeric(boot_samp %>%
1614976595256:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976595282:}
1614976602856:set.seed(899)
1614976602879:observed_data <- df %>%
1614976602900:sample_n(size=25, replace = TRUE)
1614976602953:obs_mean <- observed_data %>%
1614976602975:summarize(mean(AutoTheft_AVG))
1614976603067:as.numeric(obs_mean)
1614976603138:boot_means <- rep(NA, 1000)
1614976603181:for(i in 1:1000){
1614976603211:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976603239:boot_means[i] <-
1614976603266:as.numeric(boot_samp %>%
1614976603287:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976603309:}
1614976605931:set.seed(899)
1614976605953:observed_data <- df %>%
1614976605973:sample_n(size=25, replace = TRUE)
1614976606022:obs_mean <- observed_data %>%
1614976606043:summarize(mean(AutoTheft_AVG))
1614976606123:as.numeric(obs_mean)
1614976606190:boot_means <- rep(NA, 1000)
1614976606227:for(i in 1:1000){
1614976606255:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976606275:boot_means[i] <-
1614976606296:as.numeric(boot_samp %>%
1614976606318:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976606340:}
1614976668292:boot_means <- data_frame(mean_theft = boot_means)
1614976668358:set.seed(899)
1614976668388:observed_data <- df %>%
1614976668409:sample_n(size=25, replace = TRUE)
1614976668456:obs_mean <- observed_data %>%
1614976668476:summarize(mean(AutoTheft_AVG))
1614976668577:as.numeric(obs_mean)
1614976668643:boot_means <- rep(NA, 1000)
1614976668680:for(i in 1:1000){
1614976668704:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976668729:boot_means[i] <-
1614976668749:as.numeric(boot_samp %>%
1614976668771:summarize(mean_theft = mean(AutoTheft_AVG)))
1614976668795:}
1614976738837:boot_means <- data_frame(mean_theft = boot_means)
1614976738920:ggplot(boot_means, aes(x=mean_theft)) +
1614976738952:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614976738976:labs(x="Means from bootstrap samples",
1614976739000:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614976739023:geom_vline(xintercept = 17.9224, col ="blue")+
1614976739047:geom_vline(xintercept = 34.0517, col = "blue")
1614976739281:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614976739335:as.numeric(population_mean)
1614976834230:set.seed(899)
1614976834251:observed_data <- df %>%
1614976834272:sample_n(size=25, replace = TRUE)
1614976834335:obs_mean <- observed_data %>%
1614976834357:summarize(mean(AutoTheft_AVG))
1614976834444:as.numeric(obs_mean)
1614976834513:boot_means <- rep(NA, 1000)
1614976834558:for(i in 1:1000){
1614976834585:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614976834608:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614976834627:}
1614976903371:boot_means <- data_frame(mean_theft = boot_means)
1614976903399:boot_means
1614976921888:ggplot(boot_means, aes(x=mean_theft)) +
1614976921913:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614976921936:labs(x="Means from bootstrap samples",
1614976921962:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614976921985:geom_vline(xintercept = 17.9224, col ="blue")+
1614976922012:geom_vline(xintercept = 34.0517, col = "blue")
1614976922209:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614977061652:View(df)
1614977090223:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614977090250:library(openintro)
1614977090273:library(opendatatoronto)
1614977090303:library(dplyr)
1614977090332:library(patchwork)
1614977090360:library(tidyverse)
1614977090460:## Here you can code your simulation and create the 3 plots.
1614977090514:## Here is some starter code for the simulation:
1614977090554:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614977090577:n1 = 10
1614977090603:n2 = 50 #pre-specify your sample size
1614977090684:## Create your plots below. (I recommend using ggplot)
1614977090750:## Remember the patchwork package might be helpful.
1614977090834:library(tidyverse)
1614977090875:prior <- function(lambda) dexp(lambda, rate = 5)
1614977090899:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614977090942:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614977090967:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614977091017:data_frame(x = c(0.01,0.99)) %>%
1614977091041:ggplot(aes(x = x)) +
1614977091070:theme_classic() +
1614977091099:stat_function(fun = prior,
1614977091130:colour = "blue") +
1614977091156:stat_function(fun = posterior,
1614977091182:args = list(sumx = 5,n = 10),
1614977091207:colour = "purple") +
1614977091231:stat_function(fun = posterior,
1614977091262:args = list(sumx = 10,n = 10),
1614977091295:colour = "red") +
1614977091325:stat_function(fun = posterior,
1614977091353:args = list(sumx = 15,n = 10),
1614977091377:colour = "orange") +
1614977091402:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614977091429:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977091454:x = "Lambda",
1614977091481:y = "Density") +
1614977091506:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977091706:data_frame(x = c(0.01,0.99)) %>%
1614977091731:ggplot(aes(x = x)) +
1614977091761:theme_classic() +
1614977091792:stat_function(fun = prior,
1614977091815:colour = "blue") +
1614977091839:stat_function(fun = posterior,
1614977091861:args = list(sumx = 5,n = 100),
1614977091884:colour = "purple") +
1614977091909:stat_function(fun = posterior,
1614977091947:args = list(sumx = 10,n = 100),
1614977091981:colour = "red") +
1614977092004:stat_function(fun = posterior,
1614977092030:args = list(sumx = 15,n = 100),
1614977092054:colour = "orange") +
1614977092077:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614977092102:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977092124:x = "Lambda",
1614977092148:y = "Density") +
1614977092174:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977092605:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614977092663:# You may need additional chunks, in case you want to include some of the cleaning output.
1614977092686:# get package
1614977092717:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977092885:package
1614977092965:# get all resources for this package
1614977092998:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977093076:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614977093102:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614977093161:# load the first datastore resource as a sample
1614977093189:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614977094530:data
1614977094717:data <-data %>% filter(data$Hood_ID != "001")
1614977094747:data
1614977094955:# Use this to calculate some summary measures.
1614977094983:summary(data$AutoTheft_AVG)
1614977095125:# Use this to create some plots.
1614977095156:data %>%
1614977095180:ggplot(aes(x = AutoTheft_AVG))+
1614977095203:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614977095225:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614977095248:xlab("Average Auto Thefts")+
1614977095274:ylab("Number of Neighbourhoods")
1614977095432:theme(plot.title = element_text(size=12))
1614977096374:set.seed(899)
1614977096397:observed_data <- df %>%
1614977096418:sample_n(size=25, replace = TRUE)
1614977096467:obs_mean <- observed_data %>%
1614977096489:summarize(mean(AutoTheft_AVG))
1614977096567:as.numeric(obs_mean)
1614977096633:boot_means <- rep(NA, 1000)
1614977096685:for(i in 1:1000){
1614977096709:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977096733:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977096761:}
1614977105846:View(df)
1614977116530:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614977116553:library(openintro)
1614977116575:library(opendatatoronto)
1614977116596:library(dplyr)
1614977116617:library(patchwork)
1614977116637:library(tidyverse)
1614977116705:## Here you can code your simulation and create the 3 plots.
1614977116750:## Here is some starter code for the simulation:
1614977116786:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614977116809:n1 = 10
1614977116831:n2 = 50 #pre-specify your sample size
1614977116906:## Create your plots below. (I recommend using ggplot)
1614977116962:## Remember the patchwork package might be helpful.
1614977117058:library(tidyverse)
1614977117107:prior <- function(lambda) dexp(lambda, rate = 5)
1614977117130:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614977117174:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614977117197:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614977117232:data_frame(x = c(0.01,0.99)) %>%
1614977117254:ggplot(aes(x = x)) +
1614977117287:theme_classic() +
1614977117308:stat_function(fun = prior,
1614977117330:colour = "blue") +
1614977117358:stat_function(fun = posterior,
1614977117380:args = list(sumx = 5,n = 10),
1614977117403:colour = "purple") +
1614977117427:stat_function(fun = posterior,
1614977117449:args = list(sumx = 10,n = 10),
1614977117475:colour = "red") +
1614977117497:stat_function(fun = posterior,
1614977117518:args = list(sumx = 15,n = 10),
1614977117540:colour = "orange") +
1614977117563:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614977117582:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977117602:x = "Lambda",
1614977117623:y = "Density") +
1614977117647:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977117826:data_frame(x = c(0.01,0.99)) %>%
1614977117845:ggplot(aes(x = x)) +
1614977117868:theme_classic() +
1614977117890:stat_function(fun = prior,
1614977117914:colour = "blue") +
1614977117936:stat_function(fun = posterior,
1614977117956:args = list(sumx = 5,n = 100),
1614977117977:colour = "purple") +
1614977118000:stat_function(fun = posterior,
1614977118030:args = list(sumx = 10,n = 100),
1614977118050:colour = "red") +
1614977118072:stat_function(fun = posterior,
1614977118093:args = list(sumx = 15,n = 100),
1614977118113:colour = "orange") +
1614977118132:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614977118153:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977118174:x = "Lambda",
1614977118193:y = "Density") +
1614977118215:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977118694:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614977118731:# You may need additional chunks, in case you want to include some of the cleaning output.
1614977118752:# get package
1614977118773:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977118836:package
1614977118902:# get all resources for this package
1614977118928:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977119001:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614977119027:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614977119074:# load the first datastore resource as a sample
1614977119100:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614977120373:data
1614977120565:data <-data %>% filter(data$Hood_ID != "001")
1614977120590:data
1614977120807:# Use this to calculate some summary measures.
1614977120830:summary(data$AutoTheft_AVG)
1614977120982:# Use this to create some plots.
1614977121011:data %>%
1614977121032:ggplot(aes(x = AutoTheft_AVG))+
1614977121054:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614977121074:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614977121098:xlab("Average Auto Thefts")+
1614977121118:ylab("Number of Neighbourhoods")
1614977121256:theme(plot.title = element_text(size=12))
1614977122143:set.seed(899)
1614977122165:observed_data <- df %>%
1614977122193:sample_n(size=25, replace = TRUE)
1614977147544:View(data)
1614977220000:View(data)
1614977357317:df <- data %>% select(AutoTheft_AVG)
1614977357366:set.seed(899)
1614977357421:observed_data <- df %>%
1614977357446:sample_n(size=25, replace = TRUE)
1614977357500:obs_mean <- observed_data %>%
1614977357521:summarize(mean(AutoTheft_AVG))
1614977357608:as.numeric(obs_mean)
1614977357688:boot_means <- rep(NA, 1000)
1614977357740:for(i in 1:1000){
1614977357761:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977357789:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977357814:}
1614977364510:View(df)
1614977364536:View(df)
1614977366288:View(df)
1614977405369:df <- data %>% select(AutoTheft_AVG) %>% filter(AutoTheft_AVG)
1614977533353:df <- data %>% select(AutoTheft_AVG) %>% select(1)
1614977533397:set.seed(899)
1614977533463:observed_data <- df %>%
1614977533483:sample_n(size=25, replace = TRUE)
1614977533530:obs_mean <- observed_data %>%
1614977533550:summarize(mean(AutoTheft_AVG))
1614977533634:as.numeric(obs_mean)
1614977533707:boot_means <- rep(NA, 1000)
1614977533754:for(i in 1:1000){
1614977533776:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977533803:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977533825:}
1614977543722:View(df)
1614977607407:df <- data %>% select(AutoTheft_AVG, Hood_ID)
1614977607453:set.seed(899)
1614977607509:observed_data <- df %>%
1614977607531:sample_n(size=25, replace = TRUE)
1614977607588:obs_mean <- observed_data %>%
1614977607610:summarize(mean(AutoTheft_AVG))
1614977607691:as.numeric(obs_mean)
1614977607763:boot_means <- rep(NA, 1000)
1614977607803:for(i in 1:1000){
1614977607825:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977607846:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977607869:}
1614977611451:View(df)
1614977612628:View(df)
1614977625529:df <- data %>% select(AutoTheft_AVG, Hood_ID)
1614977630294:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614977630315:library(openintro)
1614977630337:library(opendatatoronto)
1614977630360:library(dplyr)
1614977630384:library(patchwork)
1614977630409:library(tidyverse)
1614977630482:## Here you can code your simulation and create the 3 plots.
1614977630541:## Here is some starter code for the simulation:
1614977630608:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614977630628:n1 = 10
1614977630648:n2 = 50 #pre-specify your sample size
1614977630727:## Create your plots below. (I recommend using ggplot)
1614977630782:## Remember the patchwork package might be helpful.
1614977630881:library(tidyverse)
1614977630931:prior <- function(lambda) dexp(lambda, rate = 5)
1614977630959:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614977631005:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614977631029:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614977631067:data_frame(x = c(0.01,0.99)) %>%
1614977631090:ggplot(aes(x = x)) +
1614977631119:theme_classic() +
1614977631139:stat_function(fun = prior,
1614977631160:colour = "blue") +
1614977631181:stat_function(fun = posterior,
1614977631203:args = list(sumx = 5,n = 10),
1614977631227:colour = "purple") +
1614977631251:stat_function(fun = posterior,
1614977631274:args = list(sumx = 10,n = 10),
1614977631297:colour = "red") +
1614977631319:stat_function(fun = posterior,
1614977631341:args = list(sumx = 15,n = 10),
1614977631363:colour = "orange") +
1614977631383:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614977631404:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977631424:x = "Lambda",
1614977631447:y = "Density") +
1614977631469:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977631679:data_frame(x = c(0.01,0.99)) %>%
1614977631700:ggplot(aes(x = x)) +
1614977631719:theme_classic() +
1614977631738:stat_function(fun = prior,
1614977631757:colour = "blue") +
1614977631777:stat_function(fun = posterior,
1614977631795:args = list(sumx = 5,n = 100),
1614977631813:colour = "purple") +
1614977631834:stat_function(fun = posterior,
1614977631855:args = list(sumx = 10,n = 100),
1614977631880:colour = "red") +
1614977631902:stat_function(fun = posterior,
1614977631926:args = list(sumx = 15,n = 100),
1614977631949:colour = "orange") +
1614977631972:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614977631996:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977632019:x = "Lambda",
1614977632040:y = "Density") +
1614977632061:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977632523:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614977632562:# You may need additional chunks, in case you want to include some of the cleaning output.
1614977632582:# get package
1614977632600:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977632986:package
1614977633051:# get all resources for this package
1614977633079:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977633158:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614977633179:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614977633223:# load the first datastore resource as a sample
1614977633246:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614977634644:data
1614977634813:data <-data %>% filter(data$Hood_ID != "001")
1614977634842:data
1614977635041:# Use this to calculate some summary measures.
1614977635074:summary(data$AutoTheft_AVG)
1614977635218:# Use this to create some plots.
1614977635244:data %>%
1614977635270:ggplot(aes(x = AutoTheft_AVG))+
1614977635290:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614977635310:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614977635330:xlab("Average Auto Thefts")+
1614977635352:ylab("Number of Neighbourhoods")
1614977635503:theme(plot.title = element_text(size=12))
1614977636432:df <- data %>% select(AutoTheft_AVG, Hood_ID)
1614977636481:set.seed(899)
1614977636536:observed_data <- df %>%
1614977636558:sample_n(size=25, replace = TRUE)
1614977636613:obs_mean <- observed_data %>%
1614977636640:summarize(mean(AutoTheft_AVG))
1614977636718:as.numeric(obs_mean)
1614977636785:boot_means <- rep(NA, 1000)
1614977636830:for(i in 1:1000){
1614977636853:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977636873:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977636893:}
1614977639989:View(df)
1614977720042:df <- data %>% select(AutoTheft_AVG, st_geometry = NULL)
1614977720087:set.seed(899)
1614977720152:observed_data <- df %>%
1614977720176:sample_n(size=25, replace = TRUE)
1614977720231:obs_mean <- observed_data %>%
1614977720260:summarize(mean(AutoTheft_AVG))
1614977720350:as.numeric(obs_mean)
1614977720440:boot_means <- rep(NA, 1000)
1614977720484:for(i in 1:1000){
1614977720505:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977720535:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977720562:}
1614977726031:View(df)
1614977728501:View(df)
1614977751037:df <- data %>% select(AutoTheft_AVG, -geometry)
1614977751085:set.seed(899)
1614977751145:observed_data <- df %>%
1614977751172:sample_n(size=25, replace = TRUE)
1614977751240:obs_mean <- observed_data %>%
1614977751261:summarize(mean(AutoTheft_AVG))
1614977751355:as.numeric(obs_mean)
1614977751434:boot_means <- rep(NA, 1000)
1614977751483:for(i in 1:1000){
1614977751505:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977751535:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977751556:}
1614977754432:View(df)
1614977798293:df <- data %>% select(AutoTheft_AVG)
1614977798324:df <- st_drop_geometry(df)
1614977846515:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614977846538:library(openintro)
1614977846559:library(opendatatoronto)
1614977846582:library(dplyr)
1614977846603:library(patchwork)
1614977846622:library(tidyverse)
1614977846643:library(sf)
1614977853538:df <- data %>% select(AutoTheft_AVG)
1614977853575:df <- st_drop_geometry(df)
1614977853628:set.seed(899)
1614977853688:observed_data <- df %>%
1614977853710:sample_n(size=25, replace = TRUE)
1614977853756:obs_mean <- observed_data %>%
1614977853778:summarize(mean(AutoTheft_AVG))
1614977853806:as.numeric(obs_mean)
1614977853868:boot_means <- rep(NA, 1000)
1614977853910:for(i in 1:1000){
1614977853932:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977853954:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977853989:}
1614977858350:View(df)
1614977865978:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614977865999:library(openintro)
1614977866021:library(opendatatoronto)
1614977866043:library(dplyr)
1614977866064:library(patchwork)
1614977866085:library(tidyverse)
1614977866109:library(sf)
1614977866176:## Here you can code your simulation and create the 3 plots.
1614977866224:## Here is some starter code for the simulation:
1614977866270:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614977866294:n1 = 10
1614977866321:n2 = 50 #pre-specify your sample size
1614977866402:## Create your plots below. (I recommend using ggplot)
1614977866468:## Remember the patchwork package might be helpful.
1614977866572:library(tidyverse)
1614977866620:prior <- function(lambda) dexp(lambda, rate = 5)
1614977866643:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614977866691:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614977866715:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614977866754:data_frame(x = c(0.01,0.99)) %>%
1614977866779:ggplot(aes(x = x)) +
1614977866801:theme_classic() +
1614977866824:stat_function(fun = prior,
1614977866846:colour = "blue") +
1614977866872:stat_function(fun = posterior,
1614977866894:args = list(sumx = 5,n = 10),
1614977866917:colour = "purple") +
1614977866942:stat_function(fun = posterior,
1614977866966:args = list(sumx = 10,n = 10),
1614977866991:colour = "red") +
1614977867015:stat_function(fun = posterior,
1614977867037:args = list(sumx = 15,n = 10),
1614977867061:colour = "orange") +
1614977867085:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614977867109:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977867133:x = "Lambda",
1614977867159:y = "Density") +
1614977867184:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977867382:data_frame(x = c(0.01,0.99)) %>%
1614977867404:ggplot(aes(x = x)) +
1614977867427:theme_classic() +
1614977867449:stat_function(fun = prior,
1614977867471:colour = "blue") +
1614977867491:stat_function(fun = posterior,
1614977867514:args = list(sumx = 5,n = 100),
1614977867533:colour = "purple") +
1614977867552:stat_function(fun = posterior,
1614977867574:args = list(sumx = 10,n = 100),
1614977867602:colour = "red") +
1614977867624:stat_function(fun = posterior,
1614977867645:args = list(sumx = 15,n = 100),
1614977867668:colour = "orange") +
1614977867691:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614977867716:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614977867738:x = "Lambda",
1614977867761:y = "Density") +
1614977867782:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614977868231:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614977868277:# You may need additional chunks, in case you want to include some of the cleaning output.
1614977868297:# get package
1614977868319:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977868480:package
1614977868586:# get all resources for this package
1614977868609:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614977868683:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614977868705:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614977868749:# load the first datastore resource as a sample
1614977868771:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614977870089:data
1614977870274:data <-data %>% filter(data$Hood_ID != "001")
1614977870304:data
1614977870526:# Use this to calculate some summary measures.
1614977870555:summary(data$AutoTheft_AVG)
1614977870715:# Use this to create some plots.
1614977870744:data %>%
1614977870766:ggplot(aes(x = AutoTheft_AVG))+
1614977870787:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614977870810:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614977870830:xlab("Average Auto Thefts")+
1614977870852:ylab("Number of Neighbourhoods")
1614977870985:theme(plot.title = element_text(size=12))
1614977871852:df <- data %>% select(AutoTheft_AVG)
1614977871886:df <- st_drop_geometry(df)
1614977871927:set.seed(899)
1614977871978:observed_data <- df %>%
1614977871997:sample_n(size=25, replace = TRUE)
1614977872040:obs_mean <- observed_data %>%
1614977872066:summarize(mean(AutoTheft_AVG))
1614977872095:as.numeric(obs_mean)
1614977872154:boot_means <- rep(NA, 1000)
1614977872193:for(i in 1:1000){
1614977872214:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614977872235:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614977872256:}
1614977876565:boot_means <- tibble(mean_theft = boot_means)
1614977876592:boot_means
1614977876691:ggplot(boot_means, aes(x=mean_theft)) +
1614977876722:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614977876753:labs(x="Means from bootstrap samples",
1614977876780:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614977876803:geom_vline(xintercept = 17.9224, col ="blue")+
1614977876825:geom_vline(xintercept = 34.0517, col = "blue")
1614977877043:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614977877232:# Here you can include some relevant visualizations.
1614977899760:ggplot(boot_means, aes(x=mean_theft)) +
1614977899786:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614977899811:labs(x="Means from bootstrap samples",
1614977899835:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614977899859:geom_vline(xintercept = 17.9224, col ="blue")+
1614977899884:geom_vline(xintercept = 34.0517, col = "blue")
1614977900109:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614978020139:df <- data %>% select(AutoTheft_AVG)
1614978020165:df <- st_drop_geometry(df)
1614978020210:set.seed(899)
1614978020272:observed_data <- df %>%
1614978020295:sample_n(size=25, replace = TRUE)
1614978020342:obs_mean <- observed_data %>%
1614978020364:summarize(mean(AutoTheft_AVG))
1614978020398:as.numeric(obs_mean)
1614978020466:boot_means <- rep(NA, 1000)
1614978020511:for(i in 1:1000){
1614978020535:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978020564:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978020588:}
1614978024727:boot_means <- tibble(mean_theft = boot_means)
1614978024755:boot_means
1614978037470:df <- data %>% select(AutoTheft_AVG)
1614978037499:df <- st_drop_geometry(df)
1614978037541:set.seed(899)
1614978037596:observed_data <- df %>%
1614978037618:sample_n(size=25, replace = TRUE)
1614978037666:obs_mean <- observed_data %>%
1614978037689:summarize(mean(AutoTheft_AVG))
1614978037718:as.numeric(obs_mean)
1614978037777:boot_means <- rep(NA, 10000)
1614978037823:for(i in 1:10000){
1614978037844:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978037871:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978037897:}
1614978079897:boot_means <- tibble(mean_theft = boot_means)
1614978079921:boot_means
1614978091413:df <- data %>% select(AutoTheft_AVG)
1614978091440:df <- st_drop_geometry(df)
1614978091479:set.seed(899)
1614978091531:observed_data <- df %>%
1614978091553:sample_n(size=25, replace = TRUE)
1614978091598:obs_mean <- observed_data %>%
1614978091623:summarize(mean(AutoTheft_AVG))
1614978091655:as.numeric(obs_mean)
1614978091726:boot_means <- rep(NA, 5)
1614978091774:for(i in 1:5){
1614978091797:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978091819:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978091846:}
1614978091921:boot_means <- tibble(mean_theft = boot_means)
1614978091946:boot_means
1614978123290:df <- data %>% select(AutoTheft_AVG)
1614978123317:df <- st_drop_geometry(df)
1614978123359:set.seed(899)
1614978123419:observed_data <- df %>%
1614978123444:sample_n(size=25, replace = TRUE)
1614978123499:obs_mean <- observed_data %>%
1614978123522:summarize(mean(AutoTheft_AVG))
1614978123550:#as.numeric(obs_mean)
1614978123606:boot_means <- rep(NA, 5)
1614978123649:for(i in 1:5){
1614978123677:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978123700:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978123722:}
1614978123797:boot_means <- tibble(mean_theft = boot_means)
1614978123823:mean(boot_means)
1614978134455:df <- data %>% select(AutoTheft_AVG)
1614978134482:df <- st_drop_geometry(df)
1614978134528:set.seed(899)
1614978134584:observed_data <- df %>%
1614978134610:sample_n(size=25, replace = TRUE)
1614978134660:obs_mean <- observed_data %>%
1614978134685:summarize(mean(AutoTheft_AVG))
1614978134715:as.numeric(obs_mean)
1614978134774:boot_means <- rep(NA, 5)
1614978134822:for(i in 1:5){
1614978134846:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978134872:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978134900:}
1614978134982:boot_means <- tibble(mean_theft = boot_means)
1614978135009:mean(boot_means)
1614978157059:df <- data %>% select(AutoTheft_AVG)
1614978157085:df <- st_drop_geometry(df)
1614978157136:set.seed(899)
1614978157191:observed_data <- df %>%
1614978157213:sample_n(size=25, replace = TRUE)
1614978157275:obs_mean <- observed_data %>%
1614978157298:summarize(mean(AutoTheft_AVG))
1614978157330:as.numeric(obs_mean)
1614978157393:boot_means <- rep(NA, 5)
1614978157434:for(i in 1:5){
1614978157457:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978157477:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978157499:}
1614978157573:boot_means <- data_frame(mean_theft = boot_means)
1614978157603:mean(boot_means)
1614978176755:df <- data %>% select(AutoTheft_AVG)
1614978176781:df <- st_drop_geometry(df)
1614978176821:set.seed(899)
1614978176877:observed_data <- df %>%
1614978176908:sample_n(size=25, replace = TRUE)
1614978176966:obs_mean <- observed_data %>%
1614978176988:summarize(mean(AutoTheft_AVG))
1614978177017:as.numeric(obs_mean)
1614978177080:boot_means <- rep(NA, 5)
1614978177130:for(i in 1:5){
1614978177152:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978177176:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978177198:}
1614978177276:boot_means <- data_frame(mean_theft = boot_means)
1614978177307:#mean(boot_means)
1614978225988:df <- data %>% select(AutoTheft_AVG)
1614978226016:df <- st_drop_geometry(df)
1614978226059:set.seed(899)
1614978226118:observed_data <- df %>%
1614978226142:sample_n(size=25, replace = TRUE)
1614978226196:obs_mean <- observed_data %>%
1614978226219:summarize(mean(AutoTheft_AVG))
1614978226251:as.numeric(obs_mean)
1614978226322:boot_means <- rep(NA, 5)
1614978226366:for(i in 1:5){
1614978226396:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978226418:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978226440:}
1614978226512:boot_means <- data_frame(mean_theft = boot_means)
1614978226543:boot_means
1614978245504:df <- data %>% select(AutoTheft_AVG)
1614978245533:df <- st_drop_geometry(df)
1614978245589:set.seed(899)
1614978245646:observed_data <- df %>%
1614978245667:sample_n(size=25, replace = TRUE)
1614978245721:obs_mean <- observed_data %>%
1614978245772:summarize(mean(AutoTheft_AVG))
1614978245802:as.numeric(obs_mean)
1614978245867:boot_means <- rep(NA, 5)
1614978245917:for(i in 1:5){
1614978245940:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978245965:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978245986:}
1614978246057:boot_means <- data_frame(mean_theft = boot_means)
1614978246083:mean(mean_theft)
1614978293764:df <- data %>% select(AutoTheft_AVG)
1614978293790:df <- st_drop_geometry(df)
1614978293835:set.seed(899)
1614978293901:observed_data <- df %>%
1614978293922:sample_n(size=25, replace = TRUE)
1614978293972:obs_mean <- observed_data %>%
1614978293992:summarize(mean(AutoTheft_AVG))
1614978294020:as.numeric(obs_mean)
1614978294074:boot_means <- rep(NA, 5)
1614978294110:for(i in 1:5){
1614978294128:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978294153:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978294175:}
1614978294245:boot_means <- data_frame(mean_theft = boot_means)
1614978294270:boot_means
1614978308309:df <- data %>% select(AutoTheft_AVG)
1614978308335:df <- st_drop_geometry(df)
1614978308376:set.seed(899)
1614978308434:observed_data <- df %>%
1614978308457:sample_n(size=25, replace = TRUE)
1614978308505:obs_mean <- observed_data %>%
1614978308524:summarize(mean(AutoTheft_AVG))
1614978308553:as.numeric(obs_mean)
1614978308617:boot_means <- rep(NA, 1000)
1614978308658:for(i in 1:1000){
1614978308681:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978308709:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978308730:}
1614978312830:boot_means <- data_frame(mean_theft = boot_means)
1614978312858:boot_means
1614978428177:df <- data %>% select(AutoTheft_AVG)
1614978428205:df <- st_drop_geometry(df)
1614978428254:set.seed(899)
1614978428316:observed_data <- df %>%
1614978428336:sample_n(size=25, replace = TRUE)
1614978428384:obs_mean <- observed_data %>%
1614978428409:summarize(mean(AutoTheft_AVG))
1614978428440:as.numeric(obs_mean)
1614978428507:boot_means <- rep(NA, 1000)
1614978428560:for(i in 1:1000){
1614978428584:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614978428605:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614978428625:}
1614978432710:boot_means <- data_frame(mean_theft = boot_means)
1614978432738:mean(boot_means$mean_theft)
1614979810536:set.seed(899)
1614979810594:observed_data <- df %>%
1614979810615:sample_n(size=25, replace = TRUE)
1614979810659:obs_mean <- observed_data %>%
1614979810682:summarize(mean(AutoTheft_AVG))
1614979810742:as.numeric(obs_mean)
1614979810806:boot_means <- rep(NA, 1000)
1614979810847:for(i in 1:1000){
1614979810868:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614979810902:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(data$AutoTheft_AVG > 50) %>% summarize(n()))/25
1614979810925:}
1614979958745:set.seed(899)
1614979958802:observed_data <- df %>%
1614979958826:sample_n(size=25, replace = TRUE)
1614979958875:obs_mean <- observed_data %>%
1614979958895:summarize(mean(AutoTheft_AVG))
1614979958925:as.numeric(obs_mean)
1614979958985:boot_means_2 <- rep(NA, 1000)
1614979959023:for(i in 1:1000){
1614979959042:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614979959060:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(data$AutoTheft_AVG > 50) %>% summarize(n()))/25
1614979959079:}
1614979996829:set.seed(899)
1614979996886:observed_data <- df %>%
1614979996910:sample_n(size=25, replace = TRUE)
1614979996953:obs_mean <- observed_data %>%
1614979996974:summarize(mean(AutoTheft_AVG))
1614979997003:as.numeric(obs_mean)
1614979997066:boot_means_2 <- rep(NA, 1000)
1614979997111:for(i in 1:1000){
1614979997134:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614979997155:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(df$AutoTheft_AVG > 50) %>% summarize(n()))/25
1614979997180:}
1614980036693:set.seed(899)
1614980036761:observed_data <- df %>%
1614980036783:sample_n(size=25, replace = TRUE)
1614980036826:obs_mean <- observed_data %>%
1614980036849:summarize(mean(AutoTheft_AVG))
1614980036882:as.numeric(obs_mean)
1614980036946:boot_means_2 <- rep(NA, 1000)
1614980036987:for(i in 1:1000){
1614980037006:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980037027:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n()))/25
1614980037049:}
1614980042845:boot_means_2 <- data_frame(mean_theft = boot_means)
1614980042881:mean(boot_means_2$mean_theft)
1614980042960:set.seed(333) # change to the last three digits of your student number
1614980042995:boot_p <- rep(NA, 2000)  # where we'll store the bootstrap proportions
1614980043036:for (i in 1:2000)
1614980043056:{
1614980043077:boot_samp <- road_sample %>% sample_n(size = 100, replace=TRUE)
1614980043106:boot_p[i] <- as.numeric(boot_samp %>%
1614980043127:filter(road_side == "left") %>%
1614980043147:summarize(n()))/100
1614980043169:}
1614980054755:set.seed(899)
1614980054811:observed_data <- df %>%
1614980054834:sample_n(size=25, replace = TRUE)
1614980054882:obs_mean <- observed_data %>%
1614980054904:summarize(mean(AutoTheft_AVG))
1614980054932:as.numeric(obs_mean)
1614980054991:boot_means_2 <- rep(NA, 1000)
1614980055030:for(i in 1:1000){
1614980055054:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980055076:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n()))/25
1614980055098:}
1614980060780:boot_means_2 <- data_frame(mean_theft = boot_means)
1614980060810:mean(boot_means_2$mean_theft)
1614980073452:set.seed(899)
1614980073515:observed_data <- df %>%
1614980073537:sample_n(size=25, replace = TRUE)
1614980073587:obs_mean <- observed_data %>%
1614980073612:summarize(mean(AutoTheft_AVG))
1614980073642:as.numeric(obs_mean)
1614980073704:boot_means_2 <- rep(NA, 1000)
1614980073746:for(i in 1:1000){
1614980073765:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980073785:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n()))/25
1614980073807:}
1614980079712:boot_means_2 <- data_frame(mean_theft = boot_means)
1614980079749:boot_means_2
1614980079803:mean(boot_means_2$mean_theft)
1614980122199:set.seed(899)
1614980122259:observed_data <- df %>%
1614980122285:sample_n(size=25, replace = TRUE)
1614980122333:obs_mean <- observed_data %>%
1614980122353:summarize(mean(AutoTheft_AVG))
1614980122383:as.numeric(obs_mean)
1614980122447:boot_means_2 <- rep(NA, 1000)
1614980122489:for(i in 1:1000){
1614980122510:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980122533:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG < 50) %>% summarize(n()))/25
1614980122557:}
1614980128063:boot_means_2 <- data_frame(mean_theft = boot_means)
1614980128093:boot_means_2
1614980128144:mean(boot_means_2$mean_theft)
1614980182501:set.seed(899)
1614980182560:observed_data <- df %>%
1614980182581:sample_n(size=25, replace = TRUE)
1614980182623:obs_mean <- observed_data %>%
1614980182643:summarize(mean(AutoTheft_AVG))
1614980182672:as.numeric(obs_mean)
1614980182733:boot_prop <- rep(NA, 1000)
1614980182773:for(i in 1:1000){
1614980182792:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980182809:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG < 50) %>% summarize(n()))/25
1614980182829:}
1614980189106:boot_prop <- data_frame(prop_theft = boot_means)
1614980189134:boot_prop
1614980189185:mean(boot_prop$prop_theft)
1614980296310:set.seed(899)
1614980296372:observed_data <- df %>%
1614980296393:sample_n(size=25, replace = TRUE)
1614980296438:obs_mean <- observed_data %>%
1614980296464:summarize(mean(AutoTheft_AVG))
1614980296493:as.numeric(obs_mean)
1614980296558:boot_prop <- rep(NA, 1000)
1614980296596:for(i in 1:1000){
1614980296623:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980296652:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n = n()))/25
1614980296673:}
1614980302311:boot_prop <- data_frame(prop_theft = boot_means)
1614980302340:boot_prop
1614980302390:mean(boot_prop$prop_theft)
1614980363888:set.seed(899)
1614980363946:observed_data <- df %>%
1614980363977:sample_n(size=25, replace = TRUE)
1614980364031:obs_mean <- observed_data %>%
1614980364055:summarize(mean(AutoTheft_AVG))
1614980364089:as.numeric(obs_mean)
1614980364162:boot_prop <- rep(NA, 1000)
1614980364205:for(i in 1:1000){
1614980364227:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980364245:boot_means_2[i] <- as.numeric(boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n()))
1614980364267:}
1614980370389:boot_prop <- data_frame(prop_theft = boot_means)
1614980370422:boot_prop
1614980370484:mean(boot_prop$prop_theft)
1614980380179:set.seed(899)
1614980380252:observed_data <- df %>%
1614980380275:sample_n(size=25, replace = TRUE)
1614980380327:obs_mean <- observed_data %>%
1614980380349:summarize(mean(AutoTheft_AVG))
1614980380384:as.numeric(obs_mean)
1614980380458:boot_prop <- rep(NA, 1000)
1614980380503:for(i in 1:1000){
1614980380532:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980380554:boot_means_2[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG > 50) %>% summarize(n()))
1614980380577:}
1614980386970:boot_prop <- data_frame(prop_theft = boot_means)
1614980386997:boot_prop
1614980387050:mean(boot_prop$prop_theft)
1614980398509:set.seed(899)
1614980398569:observed_data <- df %>%
1614980398599:sample_n(size=25, replace = TRUE)
1614980398643:obs_mean <- observed_data %>%
1614980398665:summarize(mean(AutoTheft_AVG))
1614980398695:as.numeric(obs_mean)
1614980398760:boot_prop <- rep(NA, 1000)
1614980398808:for(i in 1:1000){
1614980398831:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980398855:boot_means_2[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG > 50)
1614980398877:}
1614980402773:set.seed(899)
1614980402834:observed_data <- df %>%
1614980402854:sample_n(size=25, replace = TRUE)
1614980402900:obs_mean <- observed_data %>%
1614980402925:summarize(mean(AutoTheft_AVG))
1614980402956:as.numeric(obs_mean)
1614980403022:boot_prop <- rep(NA, 1000)
1614980403067:for(i in 1:1000){
1614980403088:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980403111:boot_means_2[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG > 50))
1614980403132:}
1614980417984:set.seed(899)
1614980418053:observed_data <- df %>%
1614980418075:sample_n(size=25, replace = TRUE)
1614980418124:obs_mean <- observed_data %>%
1614980418147:summarize(mean(AutoTheft_AVG))
1614980418178:as.numeric(obs_mean)
1614980418241:boot_prop <- rep(NA, 1000)
1614980418292:for(i in 1:1000){
1614980418310:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980418330:boot_means_2[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG >= 50))
1614980418357:}
1614980427971:set.seed(899)
1614980428028:observed_data <- df %>%
1614980428051:sample_n(size=25, replace = TRUE)
1614980428103:obs_mean <- observed_data %>%
1614980428127:summarize(mean(AutoTheft_AVG))
1614980428155:as.numeric(obs_mean)
1614980428223:boot_prop <- rep(NA, 1000)
1614980428267:for(i in 1:1000){
1614980428291:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980428313:boot_means_2[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG > 50))
1614980428332:}
1614980466806:set.seed(899)
1614980466865:observed_data <- df %>%
1614980466885:sample_n(size=25, replace = TRUE)
1614980466927:obs_mean <- observed_data %>%
1614980466955:summarize(mean(AutoTheft_AVG))
1614980466983:as.numeric(obs_mean)
1614980467047:boot_prop <- rep(NA, 1000)
1614980467088:for(i in 1:1000){
1614980467108:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980467132:boot_prop[i] <- (boot_samp_2 %>% filter(AutoTheft_AVG > 50))
1614980467159:}
1614980470330:boot_prop <- data_frame(prop_theft = boot_means)
1614980470358:boot_prop
1614980470418:mean(boot_prop$prop_theft)
1614980517702:set.seed(899)
1614980517771:observed_data <- df %>%
1614980517791:sample_n(size=25, replace = TRUE)
1614980517834:obs_mean <- observed_data %>%
1614980517856:summarize(mean(AutoTheft_AVG))
1614980517884:as.numeric(obs_mean)
1614980517943:boot_prop <- rep(NA, 1000)
1614980517980:for(i in 1:1000){
1614980518004:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980518026:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 50)) %>% summarise(n()))/25
1614980518049:}
1614980523911:boot_prop <- data_frame(prop_theft = boot_means)
1614980523941:boot_prop
1614980523994:mean(boot_prop$prop_theft)
1614980563107:set.seed(899)
1614980563166:observed_data <- df %>%
1614980563189:sample_n(size=25, replace = TRUE)
1614980563235:obs_mean <- observed_data %>%
1614980563256:summarize(mean(AutoTheft_AVG))
1614980563284:as.numeric(obs_mean)
1614980563349:boot_prop <- rep(NA, 1000)
1614980563391:for(i in 1:1000){
1614980563413:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980563436:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 50)) %>% summarise(n()))/25
1614980563461:}
1614980569074:boot_prop <- data_frame(prop_theft = boot_prop)
1614980569103:boot_prop
1614980569157:mean(boot_prop$prop_theft)
1614980593583:set.seed(899)
1614980593645:observed_data <- df %>%
1614980593668:sample_n(size=25, replace = TRUE)
1614980593714:obs_mean <- observed_data %>%
1614980593735:summarize(mean(AutoTheft_AVG))
1614980593765:as.numeric(obs_mean)
1614980593830:boot_prop <- rep(NA, 1000)
1614980593872:for(i in 1:1000){
1614980593898:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980593927:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG < 50)) %>% summarise(n()))/25
1614980593950:}
1614980599564:boot_prop <- data_frame(prop_theft = boot_prop)
1614980599593:boot_prop
1614980599643:mean(boot_prop$prop_theft)
1614980616361:set.seed(899)
1614980616416:observed_data <- df %>%
1614980616439:sample_n(size=25, replace = TRUE)
1614980616485:obs_mean <- observed_data %>%
1614980616507:summarize(mean(AutoTheft_AVG))
1614980616534:as.numeric(obs_mean)
1614980616605:boot_prop <- rep(NA, 1000)
1614980616646:for(i in 1:1000){
1614980616673:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980616696:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG < 25)) %>% summarise(n()))/25
1614980616719:}
1614980622314:boot_prop <- data_frame(prop_theft = boot_prop)
1614980622346:boot_prop
1614980622396:mean(boot_prop$prop_theft)
1614980633619:set.seed(899)
1614980633666:observed_data <- df %>%
1614980633690:sample_n(size=25, replace = TRUE)
1614980633734:obs_mean <- observed_data %>%
1614980633754:summarize(mean(AutoTheft_AVG))
1614980633785:as.numeric(obs_mean)
1614980633855:boot_prop <- rep(NA, 1000)
1614980633895:for(i in 1:1000){
1614980633916:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980633948:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614980633971:}
1614980639710:boot_prop <- data_frame(prop_theft = boot_prop)
1614980639740:boot_prop
1614980639792:mean(boot_prop$prop_theft)
1614980648511:set.seed(899)
1614980648566:observed_data <- df %>%
1614980648595:sample_n(size=25, replace = TRUE)
1614980648636:obs_mean <- observed_data %>%
1614980648657:summarize(mean(AutoTheft_AVG))
1614980648685:as.numeric(obs_mean)
1614980648747:boot_prop <- rep(NA, 1000)
1614980648790:for(i in 1:1000){
1614980648813:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980648837:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 45)) %>% summarise(n()))/25
1614980648860:}
1614980654389:boot_prop <- data_frame(prop_theft = boot_prop)
1614980654417:boot_prop
1614980654479:mean(boot_prop$prop_theft)
1614980767695:# Use this to create some plots.
1614980767722:data %>%
1614980767742:ggplot(aes(x = AutoTheft_AVG))+
1614980767763:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614980767786:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614980767808:xlab("Average Auto Thefts")+
1614980767830:ylab("Number of Neighbourhoods")
1614980767978:theme(plot.title = element_text(size=12))+
1614980768002:scale_x_continuous(breaks = seq(0,200,by=15))
1614980798177:# Use this to create some plots.
1614980798199:data %>%
1614980798225:ggplot(aes(x = AutoTheft_AVG))+
1614980798248:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614980798272:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614980798296:xlab("Average Auto Thefts")+
1614980798319:ylab("Number of Neighbourhoods")+
1614980798340:scale_x_continuous(breaks = seq(0,200,by=15))
1614980798486:theme(plot.title = element_text(size=12))
1614980956085:set.seed(899)
1614980956137:observed_data <- df %>%
1614980956161:sample_n(size=25, replace = TRUE)
1614980956203:obs_mean <- observed_data %>%
1614980956229:summarize(mean(AutoTheft_AVG))
1614980956257:as.numeric(obs_mean)
1614980956322:boot_prop <- rep(NA, 1000)
1614980956364:for(i in 1:1000){
1614980956393:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614980956415:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 45)) %>% summarise(n()))/25
1614980956439:}
1614980962518:boot_prop <- data_frame(prop_theft = boot_prop)
1614980962548:boot_prop
1614980962601:mean(boot_prop$prop_theft)
1614980962651:ggplot(boot_prop, aes(x=prop_theft)) +
1614980962671:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614980962695:labs(x="Means from bootstrap samples",
1614980962724:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614980962747:geom_vline(xintercept = 17.9224, col ="blue")+
1614980962768:geom_vline(xintercept = 34.0517, col = "blue")
1614980963012:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981003812:set.seed(899)
1614981003867:observed_data <- df %>%
1614981003889:sample_n(size=25, replace = TRUE)
1614981003936:obs_mean <- observed_data %>%
1614981003965:summarize(mean(AutoTheft_AVG))
1614981003999:as.numeric(obs_mean)
1614981004068:boot_prop <- rep(NA, 1000)
1614981004116:for(i in 1:1000){
1614981004138:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981004160:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 45)) %>% summarise(n()))/25
1614981004185:}
1614981010094:boot_prop <- data_frame(prop_theft = boot_prop)
1614981010124:boot_prop
1614981010175:mean(boot_prop$prop_theft)
1614981011254:ggplot(boot_prop, aes(x=prop_theft)) +
1614981011274:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614981011295:labs(x="Means from bootstrap samples",
1614981011314:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981011334:geom_vline(xintercept = 0.1, col ="blue")+
1614981011354:geom_vline(xintercept = 0.3, col = "blue")
1614981011539:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981077173:ggplot(boot_prop, aes(x=prop_theft)) +
1614981077196:geom_histogram(binwidth=1, fill="tan2", color="black") +
1614981077225:labs(x="Means from bootstrap samples",
1614981077252:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981077274:geom_vline(xintercept = 0.1, col ="blue")+
1614981077298:geom_vline(xintercept = 0.3, col = "blue")
1614981077485:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981089242:ggplot(boot_prop, aes(x=prop_theft)) +
1614981089271:geom_histogram(binwidth=0.05, fill="tan2", color="black") +
1614981089291:labs(x="Means from bootstrap samples",
1614981089312:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981089334:geom_vline(xintercept = 0.1, col ="blue")+
1614981089357:geom_vline(xintercept = 0.3, col = "blue")
1614981089558:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981098446:ggplot(boot_prop, aes(x=prop_theft)) +
1614981098475:geom_histogram(binwidth=0.0005, fill="tan2", color="black") +
1614981098501:labs(x="Means from bootstrap samples",
1614981098523:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981098545:geom_vline(xintercept = 0.1, col ="blue")+
1614981098576:geom_vline(xintercept = 0.3, col = "blue")
1614981099166:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981103614:ggplot(boot_prop, aes(x=prop_theft)) +
1614981103636:geom_histogram(binwidth=0.005, fill="tan2", color="black") +
1614981103659:labs(x="Means from bootstrap samples",
1614981103680:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981103699:geom_vline(xintercept = 0.1, col ="blue")+
1614981103722:geom_vline(xintercept = 0.3, col = "blue")
1614981103950:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981117755:ggplot(boot_prop, aes(x=prop_theft)) +
1614981117776:geom_histogram(bins=100, fill="tan2", color="black") +
1614981117799:labs(x="Means from bootstrap samples",
1614981117826:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981117846:geom_vline(xintercept = 0.1, col ="blue")+
1614981117868:geom_vline(xintercept = 0.3, col = "blue")
1614981118121:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981122960:ggplot(boot_prop, aes(x=prop_theft)) +
1614981122983:geom_histogram(bins=10, fill="tan2", color="black") +
1614981123003:labs(x="Means from bootstrap samples",
1614981123023:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981123049:geom_vline(xintercept = 0.1, col ="blue")+
1614981123071:geom_vline(xintercept = 0.3, col = "blue")
1614981123261:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981157744:set.seed(899)
1614981157799:observed_data <- df %>%
1614981157824:sample_n(size=25, replace = TRUE)
1614981157875:obs_mean <- observed_data %>%
1614981157896:summarize(mean(AutoTheft_AVG))
1614981157925:as.numeric(obs_mean)
1614981157996:boot_prop <- rep(NA, 1000)
1614981158039:for(i in 1:1000){
1614981158070:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981158091:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614981158115:}
1614981163695:boot_prop <- data_frame(prop_theft = boot_prop)
1614981163725:boot_prop
1614981163776:mean(boot_prop$prop_theft)
1614981171167:ggplot(boot_prop, aes(x=prop_theft)) +
1614981171200:geom_histogram(bins=10, fill="tan2", color="black") +
1614981171227:labs(x="Means from bootstrap samples",
1614981171251:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981171276:geom_vline(xintercept = 0.1, col ="blue")+
1614981171304:geom_vline(xintercept = 0.3, col = "blue")
1614981171533:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981193153:ggplot(boot_prop, aes(x=prop_theft)) +
1614981193179:geom_histogram(bins=10, fill="tan2", color="black") +
1614981193205:labs(x="Means from bootstrap samples",
1614981193229:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981193255:geom_vline(xintercept = 0.080, col ="blue")+
1614981193278:geom_vline(xintercept = 0.401, col = "blue")
1614981193472:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981203417:ggplot(boot_prop, aes(x=prop_theft)) +
1614981203443:geom_histogram(bins=20, fill="tan2", color="black") +
1614981203469:labs(x="Means from bootstrap samples",
1614981203491:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981203515:geom_vline(xintercept = 0.080, col ="blue")+
1614981203540:geom_vline(xintercept = 0.401, col = "blue")
1614981203754:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981212895:ggplot(boot_prop, aes(x=prop_theft)) +
1614981212916:geom_histogram(bins=15, fill="tan2", color="black") +
1614981212942:labs(x="Means from bootstrap samples",
1614981212962:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981212986:geom_vline(xintercept = 0.080, col ="blue")+
1614981213011:geom_vline(xintercept = 0.401, col = "blue")
1614981213209:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981218379:ggplot(boot_prop, aes(x=prop_theft)) +
1614981218406:geom_histogram(bins=12, fill="tan2", color="black") +
1614981218429:labs(x="Means from bootstrap samples",
1614981218452:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981218473:geom_vline(xintercept = 0.080, col ="blue")+
1614981218492:geom_vline(xintercept = 0.401, col = "blue")
1614981218700:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981465491:ggplot(boot_means, aes(x=mean_theft)) +
1614981465526:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981465550:labs(x="Means from bootstrap samples",
1614981465571:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981465595:geom_vline(xintercept = 17.9224, col ="blue")+
1614981465615:geom_vline(xintercept = 34.0517, col = "blue")
1614981468867:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614981468889:library(openintro)
1614981468914:library(opendatatoronto)
1614981468937:library(dplyr)
1614981468959:library(patchwork)
1614981468981:library(tidyverse)
1614981469008:library(sf)
1614981469074:## Here you can code your simulation and create the 3 plots.
1614981469120:## Here is some starter code for the simulation:
1614981469165:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614981469194:n1 = 10
1614981469219:n2 = 50 #pre-specify your sample size
1614981469303:## Create your plots below. (I recommend using ggplot)
1614981469364:## Remember the patchwork package might be helpful.
1614981469450:library(tidyverse)
1614981469500:prior <- function(lambda) dexp(lambda, rate = 5)
1614981469529:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614981469569:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614981469594:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614981469635:data_frame(x = c(0.01,0.99)) %>%
1614981469662:ggplot(aes(x = x)) +
1614981469685:theme_classic() +
1614981469709:stat_function(fun = prior,
1614981469731:colour = "blue") +
1614981469753:stat_function(fun = posterior,
1614981469776:args = list(sumx = 5,n = 10),
1614981469797:colour = "purple") +
1614981469819:stat_function(fun = posterior,
1614981469844:args = list(sumx = 10,n = 10),
1614981469870:colour = "red") +
1614981469898:stat_function(fun = posterior,
1614981469947:args = list(sumx = 15,n = 10),
1614981469968:colour = "orange") +
1614981469988:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614981470013:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981470033:x = "Lambda",
1614981470054:y = "Density") +
1614981470076:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981470273:data_frame(x = c(0.01,0.99)) %>%
1614981470304:ggplot(aes(x = x)) +
1614981470331:theme_classic() +
1614981470352:stat_function(fun = prior,
1614981470375:colour = "blue") +
1614981470398:stat_function(fun = posterior,
1614981470422:args = list(sumx = 5,n = 100),
1614981470449:colour = "purple") +
1614981470470:stat_function(fun = posterior,
1614981470493:args = list(sumx = 10,n = 100),
1614981470521:colour = "red") +
1614981470544:stat_function(fun = posterior,
1614981470573:args = list(sumx = 15,n = 100),
1614981470595:colour = "orange") +
1614981470618:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614981470639:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981470660:x = "Lambda",
1614981470681:y = "Density") +
1614981470702:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981471164:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614981471211:# You may need additional chunks, in case you want to include some of the cleaning output.
1614981471236:# get package
1614981471259:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981471371:package
1614981471438:# get all resources for this package
1614981471465:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981471540:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614981471561:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614981471611:# load the first datastore resource as a sample
1614981471632:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614981472891:data
1614981473063:data <-data %>% filter(data$Hood_ID != "001")
1614981473092:data
1614981473288:# Use this to calculate some summary measures.
1614981473318:summary(data$AutoTheft_AVG)
1614981473463:# Use this to create some plots.
1614981473492:data %>%
1614981473513:ggplot(aes(x = AutoTheft_AVG))+
1614981473533:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614981473552:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614981473573:xlab("Average Auto Thefts")+
1614981473592:ylab("Number of Neighbourhoods")+
1614981473611:scale_x_continuous(breaks = seq(0,200,by=15))
1614981473761:theme(plot.title = element_text(size=12))
1614981474652:df <- data %>% select(AutoTheft_AVG)
1614981474683:df <- st_drop_geometry(df)
1614981474732:set.seed(899)
1614981474791:observed_data <- df %>%
1614981474816:sample_n(size=25, replace = TRUE)
1614981474867:obs_mean <- observed_data %>%
1614981474888:summarize(mean(AutoTheft_AVG))
1614981474915:as.numeric(obs_mean)
1614981474972:boot_means <- rep(NA, 1000)
1614981475014:for(i in 1:1000){
1614981475037:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981475057:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614981475078:}
1614981479297:boot_means <- data_frame(mean_theft = boot_means)
1614981479328:mean(boot_means$mean_theft)
1614981479411:ggplot(boot_means, aes(x=mean_theft)) +
1614981479439:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981479466:labs(x="Means from bootstrap samples",
1614981479492:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981479515:geom_vline(xintercept = 17.9224, col ="blue")+
1614981479540:geom_vline(xintercept = 34.0517, col = "blue")
1614981479738:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981479945:set.seed(899)
1614981480005:observed_data <- df %>%
1614981480027:sample_n(size=25, replace = TRUE)
1614981480070:obs_mean <- observed_data %>%
1614981480090:summarize(mean(AutoTheft_AVG))
1614981480116:as.numeric(obs_mean)
1614981480182:boot_prop <- rep(NA, 1000)
1614981480225:for(i in 1:1000){
1614981480247:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981480274:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614981480301:}
1614981486036:boot_prop <- data_frame(prop_theft = boot_prop)
1614981486067:mean(boot_prop$prop_theft)
1614981486131:ggplot(boot_prop, aes(x=prop_theft)) +
1614981486158:geom_histogram(bins=12, fill="tan2", color="black") +
1614981486181:labs(x="Means from bootstrap samples",
1614981486203:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981486224:geom_vline(xintercept = 0.080, col ="blue")+
1614981486247:geom_vline(xintercept = 0.401, col = "blue")
1614981486409:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981486610:# Here you can include some relevant visualizations.
1614981503479:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614981503504:library(openintro)
1614981503527:library(opendatatoronto)
1614981503558:library(dplyr)
1614981503579:library(patchwork)
1614981503603:library(tidyverse)
1614981503629:library(sf)
1614981503711:## Here you can code your simulation and create the 3 plots.
1614981503764:## Here is some starter code for the simulation:
1614981503806:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614981503827:n1 = 10
1614981503853:n2 = 50 #pre-specify your sample size
1614981503932:## Create your plots below. (I recommend using ggplot)
1614981503999:## Remember the patchwork package might be helpful.
1614981504107:library(tidyverse)
1614981504157:prior <- function(lambda) dexp(lambda, rate = 5)
1614981504185:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614981504223:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614981504247:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614981504290:data_frame(x = c(0.01,0.99)) %>%
1614981504311:ggplot(aes(x = x)) +
1614981504331:theme_classic() +
1614981504356:stat_function(fun = prior,
1614981504380:colour = "blue") +
1614981504404:stat_function(fun = posterior,
1614981504429:args = list(sumx = 5,n = 10),
1614981504456:colour = "purple") +
1614981504480:stat_function(fun = posterior,
1614981504504:args = list(sumx = 10,n = 10),
1614981504527:colour = "red") +
1614981504553:stat_function(fun = posterior,
1614981504575:args = list(sumx = 15,n = 10),
1614981504598:colour = "orange") +
1614981504620:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614981504640:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981504662:x = "Lambda",
1614981504692:y = "Density") +
1614981504713:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981504882:data_frame(x = c(0.01,0.99)) %>%
1614981504906:ggplot(aes(x = x)) +
1614981504930:theme_classic() +
1614981504965:stat_function(fun = prior,
1614981504986:colour = "blue") +
1614981505011:stat_function(fun = posterior,
1614981505036:args = list(sumx = 5,n = 100),
1614981505057:colour = "purple") +
1614981505078:stat_function(fun = posterior,
1614981505098:args = list(sumx = 10,n = 100),
1614981505126:colour = "red") +
1614981505148:stat_function(fun = posterior,
1614981505171:args = list(sumx = 15,n = 100),
1614981505195:colour = "orange") +
1614981505215:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614981505235:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981505254:x = "Lambda",
1614981505273:y = "Density") +
1614981505299:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981505750:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614981505790:# You may need additional chunks, in case you want to include some of the cleaning output.
1614981505812:# get package
1614981505834:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981505935:package
1614981505994:# get all resources for this package
1614981506015:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981506106:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614981506126:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614981506170:# load the first datastore resource as a sample
1614981506191:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614981507536:data
1614981507714:data <-data %>% filter(data$Hood_ID != "001")
1614981507745:data
1614981507954:# Use this to calculate some summary measures.
1614981507991:summary(data$AutoTheft_AVG)
1614981508154:# Use this to create some plots.
1614981508187:data %>%
1614981508216:ggplot(aes(x = AutoTheft_AVG))+
1614981508242:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614981508265:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614981508297:xlab("Average Auto Thefts")+
1614981508321:ylab("Number of Neighbourhoods")+
1614981508344:scale_x_continuous(breaks = seq(0,200,by=15))
1614981508476:theme(plot.title = element_text(size=12))
1614981509462:df <- data %>% select(AutoTheft_AVG)
1614981509500:df <- st_drop_geometry(df)
1614981509543:set.seed(899)
1614981509600:observed_data <- df %>%
1614981509624:sample_n(size=25, replace = TRUE)
1614981509672:obs_mean <- observed_data %>%
1614981509698:summarize(mean(AutoTheft_AVG))
1614981509734:as.numeric(obs_mean)
1614981509789:boot_means <- rep(NA, 1000)
1614981509841:for(i in 1:1000){
1614981509864:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981509884:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614981509906:}
1614981514085:boot_means <- data_frame(mean_theft = boot_means)
1614981514112:mean(boot_means$mean_theft)
1614981514203:ggplot(boot_means, aes(x=mean_theft)) +
1614981514232:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981514255:labs(x="Means from bootstrap samples",
1614981514279:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981514308:geom_vline(xintercept = 17.9224, col ="red")+
1614981514330:geom_vline(xintercept = 34.0517, col = "red")
1614981514558:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981514742:set.seed(899)
1614981514808:observed_data <- df %>%
1614981514830:sample_n(size=25, replace = TRUE)
1614981514877:obs_mean <- observed_data %>%
1614981514899:summarize(mean(AutoTheft_AVG))
1614981514926:as.numeric(obs_mean)
1614981514989:boot_prop <- rep(NA, 1000)
1614981515035:for(i in 1:1000){
1614981515056:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981515091:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614981515114:}
1614981521050:boot_prop <- data_frame(prop_theft = boot_prop)
1614981521081:mean(boot_prop$prop_theft)
1614981521146:ggplot(boot_prop, aes(x=prop_theft)) +
1614981521175:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981521201:labs(x="Means from bootstrap samples",
1614981521221:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981521242:geom_vline(xintercept = 0.080, col ="red")+
1614981521263:geom_vline(xintercept = 0.401, col = "red")
1614981521416:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981521619:# Here you can include some relevant visualizations.
1614981629957:ggplot(boot_prop, aes(x=prop_theft)) +
1614981629979:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981630001:labs(x="Proportions from bootstrap samples",
1614981630025:title="Bootstrap sampling distribution for the proportion of more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614981630057:geom_vline(xintercept = 0.080, col ="red")+
1614981630081:geom_vline(xintercept = 0.401, col = "red")
1614981630263:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981638819:ggplot(boot_prop, aes(x=prop_theft)) +
1614981638839:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981638863:labs(x="Proportions from bootstrap samples",
1614981638890:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614981638918:geom_vline(xintercept = 0.080, col ="red")+
1614981638938:geom_vline(xintercept = 0.401, col = "red")
1614981639112:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981656016:ggplot(boot_prop, aes(x=prop_theft)) +
1614981656037:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981656063:labs(x="Proportions from bootstrap samples", y ="Count"
1614981656088:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614981669895:ggplot(boot_prop, aes(x=prop_theft)) +
1614981669917:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981669939:labs(x="Proportions from bootstrap samples", y ="Count",
1614981669964:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614981669987:geom_vline(xintercept = 0.080, col ="red")+
1614981670009:geom_vline(xintercept = 0.401, col = "red")
1614981670191:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981684136:ggplot(boot_means, aes(x=mean_theft)) +
1614981684160:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981684183:labs(x="Means from bootstrap samples", y = "Count",
1614981684204:title="Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981684225:geom_vline(xintercept = 17.9224, col ="red")+
1614981684248:geom_vline(xintercept = 34.0517, col = "red")
1614981684449:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981692070:ggplot(boot_means, aes(x=mean_theft)) +
1614981692092:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981692111:labs(x="Means from bootstrap samples", y = "Count",
1614981692134:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average from \n 2014 to 2019 in Toronto")+
1614981692159:geom_vline(xintercept = 17.9224, col ="red")+
1614981692182:geom_vline(xintercept = 34.0517, col = "red")
1614981692383:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981704395:ggplot(boot_means, aes(x=mean_theft)) +
1614981704419:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981704440:labs(x="Means from bootstrap samples", y = "Count",
1614981704464:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614981704488:geom_vline(xintercept = 17.9224, col ="red")+
1614981704512:geom_vline(xintercept = 34.0517, col = "red")
1614981704764:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981717951:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1614981717975:library(openintro)
1614981717996:library(opendatatoronto)
1614981718018:library(dplyr)
1614981718044:library(patchwork)
1614981718073:library(tidyverse)
1614981718099:library(sf)
1614981718162:## Here you can code your simulation and create the 3 plots.
1614981718202:## Here is some starter code for the simulation:
1614981718239:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1614981718260:n1 = 10
1614981718284:n2 = 50 #pre-specify your sample size
1614981718364:## Create your plots below. (I recommend using ggplot)
1614981718429:## Remember the patchwork package might be helpful.
1614981718538:library(tidyverse)
1614981718594:prior <- function(lambda) dexp(lambda, rate = 5)
1614981718616:#prior <- function(theta) dbeta(theta,shape1 = 12,shape2 = 12)
1614981718655:posterior <- function(lambda, sumx, n) dgamma(lambda, shape = 1 + sumx, scale = 1/(n + 5))
1614981718677:#posterior <- function(theta,sumx,n) dbeta(theta,shape1 = 12 + sumx,shape2 = 12 + n - sumx)
1614981718720:data_frame(x = c(0.01,0.99)) %>%
1614981718747:ggplot(aes(x = x)) +
1614981718770:theme_classic() +
1614981718800:stat_function(fun = prior,
1614981718825:colour = "blue") +
1614981718846:stat_function(fun = posterior,
1614981718865:args = list(sumx = 5,n = 10),
1614981718884:colour = "purple") +
1614981718903:stat_function(fun = posterior,
1614981718923:args = list(sumx = 10,n = 10),
1614981718944:colour = "red") +
1614981718962:stat_function(fun = posterior,
1614981718981:args = list(sumx = 15,n = 10),
1614981719002:colour = "orange") +
1614981719022:labs(title = "Exponential Prior vs Posterior for Lambda, n = 10 hours",
1614981719041:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981719060:x = "Lambda",
1614981719080:y = "Density") +
1614981719099:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981719274:data_frame(x = c(0.01,0.99)) %>%
1614981719296:ggplot(aes(x = x)) +
1614981719317:theme_classic() +
1614981719337:stat_function(fun = prior,
1614981719357:colour = "blue") +
1614981719377:stat_function(fun = posterior,
1614981719396:args = list(sumx = 5,n = 100),
1614981719413:colour = "purple") +
1614981719432:stat_function(fun = posterior,
1614981719454:args = list(sumx = 10,n = 100),
1614981719473:colour = "red") +
1614981719495:stat_function(fun = posterior,
1614981719516:args = list(sumx = 15,n = 100),
1614981719537:colour = "orange") +
1614981719561:labs(title = "Exponential Prior vs Posterior for Lambda,n = 100 hours",
1614981719581:subtitle = "Blue: Prior. Purple: 5 users/hour.  Red: 10 users/hour. Orange: 15 users/hour",
1614981719607:x = "Lambda",
1614981719628:y = "Density") +
1614981719650:scale_x_continuous(breaks = seq(0,1,by=0.1))
1614981720120:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1614981720159:# You may need additional chunks, in case you want to include some of the cleaning output.
1614981720182:# get package
1614981720204:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981720603:package
1614981720672:# get all resources for this package
1614981720694:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1614981720759:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1614981720782:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1614981720828:# load the first datastore resource as a sample
1614981720848:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1614981722414:data
1614981722589:data <-data %>% filter(data$Hood_ID != "001")
1614981722619:data
1614981722817:# Use this to calculate some summary measures.
1614981722843:summary(data$AutoTheft_AVG)
1614981722995:# Use this to create some plots.
1614981723024:data %>%
1614981723046:ggplot(aes(x = AutoTheft_AVG))+
1614981723065:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614981723087:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614981723109:xlab("Average Auto Thefts")+
1614981723129:ylab("Number of Neighbourhoods")+
1614981723153:scale_x_continuous(breaks = seq(0,200,by=15))
1614981723309:theme(plot.title = element_text(size=12))
1614981724206:df <- data %>% select(AutoTheft_AVG)
1614981724239:df <- st_drop_geometry(df)
1614981724281:set.seed(899)
1614981724342:observed_data <- df %>%
1614981724363:sample_n(size=25, replace = TRUE)
1614981724414:obs_mean <- observed_data %>%
1614981724443:summarize(mean(AutoTheft_AVG))
1614981724473:as.numeric(obs_mean)
1614981724536:boot_means <- rep(NA, 1000)
1614981724578:for(i in 1:1000){
1614981724600:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981724621:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614981724645:}
1614981728667:boot_means <- data_frame(mean_theft = boot_means)
1614981728694:mean(boot_means$mean_theft)
1614981728773:ggplot(boot_means, aes(x=mean_theft)) +
1614981728803:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614981728823:labs(x="Means from bootstrap samples", y = "Count",
1614981728853:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614981728876:geom_vline(xintercept = 17.9224, col ="red")+
1614981728904:geom_vline(xintercept = 34.0517, col = "red")
1614981729134:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614981729317:set.seed(899)
1614981729392:observed_data <- df %>%
1614981729419:sample_n(size=25, replace = TRUE)
1614981729474:obs_mean <- observed_data %>%
1614981729493:summarize(mean(AutoTheft_AVG))
1614981729521:as.numeric(obs_mean)
1614981729579:boot_prop <- rep(NA, 1000)
1614981729623:for(i in 1:1000){
1614981729644:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614981729668:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614981729690:}
1614981735682:boot_prop <- data_frame(prop_theft = boot_prop)
1614981735711:mean(boot_prop$prop_theft)
1614981735786:ggplot(boot_prop, aes(x=prop_theft)) +
1614981735815:geom_histogram(bins=12, fill="light blue", color="blue") +
1614981735842:labs(x="Proportions from bootstrap samples", y ="Count",
1614981735865:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614981735889:geom_vline(xintercept = 0.080, col ="red")+
1614981735909:geom_vline(xintercept = 0.401, col = "red")
1614981736067:quantile(boot_prop$prop_theft, c(0.025, 0.975))
1614981736270:# Here you can include some relevant visualizations.
1614982887961:ggplot(boot_means, aes(x=mean_theft)) +
1614982887988:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614982888014:labs(x="Means from bootstrap samples", y = "Count",
1614982888037:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614982888063:geom_vline(xintercept = 17.9224, col ="red")+
1614982888094:geom_vline(xintercept = 34.0517, col = "red")
1614982888262:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614983326017:# Use this to create some plots.
1614983326040:data %>%
1614983326066:ggplot(aes(x = AutoTheft_AVG))+
1614983326087:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614983326110:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614983326136:xlab("Average Auto Thefts")+
1614983326160:ylab("Number of Neighbourhoods")+
1614983326183:scale_x_continuous(breaks = seq(0,200,by=20))
1614983326390:theme(plot.title = element_text(size=12))
1614983433421:# Use this to calculate some summary measures.
1614983433444:summary(data$AutoTheft_AVG)
1614983433592:as.numeric((df %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/138
1614983440949:# Use this to calculate some summary measures.
1614983440973:summary(data$AutoTheft_AVG)
1614983441069:as.numeric((df %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/138
1614983458509:# Use this to calculate some summary measures.
1614983458530:summary(data$AutoTheft_AVG)
1614983458641:as.numeric((df %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/138
1614988628075:# Use this to create some plots.
1614988628100:data %>%
1614988628126:ggplot(aes(x = AutoTheft_AVG))+
1614988628148:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614988628173:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614988628194:xlab("Average Auto Thefts")+
1614988628225:ylab("Number of Neighbourhoods")+
1614988628250:scale_x_continuous(breaks = seq(0,200,by=20))
1614988647998:# Use this to create some plots.
1614988648021:data %>%
1614988648043:ggplot(aes(x = AutoTheft_AVG))+
1614988648067:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614988648090:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614988648113:xlab("Average Auto Thefts")+
1614988648137:ylab("Number of Neighbourhoods")+
1614988648161:scale_x_continuous(breaks = seq(0,200,by=20))
1614989110868:df <- data %>% select(AutoTheft_AVG)
1614989110898:df <- st_drop_geometry(df)
1614989110943:set.seed(899)
1614989111005:observed_data <- df %>%
1614989111029:sample_n(size=25, replace = TRUE)
1614989111079:obs_mean <- observed_data %>%
1614989111107:summarize(mean(AutoTheft_AVG))
1614989111139:as.numeric(obs_mean)
1614989111202:boot_means <- rep(NA, 1000)
1614989111247:for(i in 1:1000){
1614989111276:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614989111300:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614989111328:}
1614989115595:boot_means <- data_frame(mean_theft = boot_means)
1614989115627:mean(boot_means$mean_theft)
1614989145998:df <- data %>% select(AutoTheft_AVG)
1614989146022:df <- st_drop_geometry(df)
1614989146058:set.seed(899)
1614989146110:observed_data <- df %>%
1614989146129:sample_n(size=25, replace = TRUE)
1614989146173:obs_mean <- observed_data %>%
1614989146194:summarize(mean(AutoTheft_AVG))
1614989146224:as.numeric(obs_mean)
1614989146289:boot_means <- rep(NA, 1000)
1614989146331:for(i in 1:1000){
1614989146350:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614989146384:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614989146406:}
1614989150927:boot_means <- data_frame(mean_theft = boot_means)
1614989150953:mean(boot_means$mean_theft)
1614989163540:df <- data %>% select(AutoTheft_AVG)
1614989163569:df <- st_drop_geometry(df)
1614989163612:set.seed(899)
1614989163671:observed_data <- df %>%
1614989163697:sample_n(size=25, replace = TRUE)
1614989163746:obs_mean <- observed_data %>%
1614989163769:summarize(mean(AutoTheft_AVG))
1614989163797:as.numeric(obs_mean)
1614989163874:boot_means <- rep(NA, 1000)
1614989163924:for(i in 1:1000){
1614989163947:boot_samp <- observed_data %>% sample_n(size=25, replace=TRUE)
1614989163969:boot_means[i] <- as.numeric(boot_samp %>%summarize(mean_theft = mean(AutoTheft_AVG)))
1614989163994:}
1614989168271:boot_means <- data_frame(mean_theft = boot_means)
1614989168300:mean(boot_means$mean_theft)
1614989168380:ggplot(boot_means, aes(x=mean_theft)) +
1614989168412:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614989168436:labs(x="Means from bootstrap samples", y = "Count",
1614989168461:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614989168486:geom_vline(xintercept = 17.9224, col ="red")+
1614989168509:geom_vline(xintercept = 34.0517, col = "red")
1614989168669:quantile(boot_means$mean_theft, c(0.025, 0.975))
1614989310155:ggplot(boot_means, aes(x=mean_theft)) +
1614989310182:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614989310215:labs(x="Means from bootstrap samples", y = "Count",
1614989310239:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614989310264:geom_vline(xintercept = 17.9224, col ="red")+
1614989310290:geom_vline(xintercept = 34.0517, col = "red")
1614989315301:set.seed(899)
1614989315372:observed_data <- df %>%
1614989315396:sample_n(size=25, replace = TRUE)
1614989315448:obs_mean <- observed_data %>%
1614989315473:summarize(mean(AutoTheft_AVG))
1614989315502:as.numeric(obs_mean)
1614989315572:boot_prop <- rep(NA, 1000)
1614989315619:for(i in 1:1000){
1614989315641:boot_samp_2 <- observed_data %>% sample_n(size=25, replace=TRUE)
1614989315664:boot_prop[i] <- as.numeric((boot_samp_2 %>% filter(AutoTheft_AVG > 40)) %>% summarise(n()))/25
1614989315687:}
1614989321535:boot_prop <- data_frame(prop_theft = boot_prop)
1614989321568:mean(boot_prop$prop_theft)
1614989321628:ggplot(boot_prop, aes(x=prop_theft)) +
1614989321663:geom_histogram(bins=12, fill="light blue", color="blue") +
1614989321685:labs(x="Proportions from bootstrap samples", y ="Count",
1614989321707:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614989321729:geom_vline(xintercept = 0.080, col ="red")+
1614989321753:geom_vline(xintercept = 0.401, col = "red")
1614990665791:ggplot(boot_prop, aes(x=prop_theft)) +
1614990665816:geom_histogram(bins=12, fill="light blue", color="blue") +
1614990665849:labs(x="Proportions from bootstrap samples", y ="Count",
1614990665887:title="Bootstrap sampling distribution for the proportion of\n more than 40 auto thefts average per neighbourhood from \n 2014 to 2019 in Toronto")+
1614990665909:geom_vline(xintercept = 0.080, col ="red")+
1614990665933:geom_vline(xintercept = 0.401, col = "red")+
1614990665956:theme_classic()
1614990691534:# Use this to create some plots.
1614990691556:data %>%
1614990691577:ggplot(aes(x = AutoTheft_AVG))+
1614990691597:geom_histogram(fill = "light blue", col = "blue", binwidth = 6)+
1614990691616:ggtitle("Histogram of average auto thefts per neighbourhood in Toronto")+
1614990691637:xlab("Average Auto Thefts")+
1614990691658:ylab("Number of Neighbourhoods")+
1614990691677:scale_x_continuous(breaks = seq(0,200,by=20))+
1614990691696:theme_classic()
1614990704766:ggplot(boot_means, aes(x=mean_theft)) +
1614990704789:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614990704813:labs(x="Means from bootstrap samples", y = "Count",
1614990704835:title=" Histogram of Bootstrap sampling distribution for the mean auto thefts average\n from 2014 to 2019 in Toronto")+
1614990704862:geom_vline(xintercept = 17.9224, col ="red")+
1614990704886:geom_vline(xintercept = 34.0517, col = "red")+
1614990704907:theme_classic()
1614991448057:ggplot(boot_means, aes(x=mean_theft)) +
1614991448084:geom_histogram(binwidth=1, fill="light blue", color="blue") +
1614991448108:labs(x="Means from bootstrap samples", y = "Count",
1614991448136:title=" Histogram of Bootstrap sampling distribution for the \nmean auto thefts average from 2014 to 2019 in Toronto")+
1614991448162:geom_vline(xintercept = 17.9224, col ="red")+
1614991448185:geom_vline(xintercept = 34.0517, col = "red")+
1614991448211:theme_classic()
1615485491465:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1615485491495:library(openintro)
1615485492222:## Here you can code your simulation and create the 3 plots.
1615485492263:## Here is some starter code for the simulation:
1615485492299:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1615485492321:n = 50 #pre-specify your sample size
1615485492343:sigma_sq = 1
1615485492386:## Simulating from Normal
1615485492406:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615485492730:## Create your plots below. (I recommend using ggplot)
1615485492780:## Remember the patchwork package might be helpful.
1615485492895:library(tidyverse)
1615485494159:#options(scipen=999)
1615485494198:set.seed(452)
1615485494234:likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615485494270:n <- seq(10,80, 10)
1615485494294:theta = 4
1615485494332:likelihood_ratio <- rep(NA, length(n))
1615485494372:for(i in 1:length(n)){
1615485494391:exp_data <- rexp(n, 1/theta)
1615485494410:xbar_data <- mean(exp_data)
1615485494429:median_data <- median(exp_data)
1615485494450:L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615485494472:L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615485494492:likelihood_ratio[i] <- L_xbar/L_median
1615485494512:}
1615485494593:tibble(n, likelihood_ratio) %>%
1615485494614:ggplot(aes(x = n)) +
1615485494636:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615485494659:labs(x = "n", y = "likelihood ratio",
1615485494680:title = "Likelihood  Ratio for different n",
1615485494702:subtitle = "Mean over Median",
1615485494724:color = "" ) + ylim(0,20)
1615485495018:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1615485495061:# You may need additional chunks, in case you want to include some of the cleaning output.
1615485495133:# Use this to calculate some summary measures.
1615485495218:# Use this to create some plots.
1615485495297:# Here you can calculate your CIS
1615485495344:# run a bootstrap.
1615485495376:# Here you can derive the CIs from the bootsrtap.
1615485495486:# Here you can include some relevant visualizations.
1615495889149:qnorm(0.975, 19.7, 2.3)
1615495904521:qnorm(0.975, 19.7, sqrt(2.3)
1615495912213:qnorm(0.975, 19.7, sqrt(2.3))
1615496078167:knitr::opts_chunk$set(echo = TRUE)
1615496078187:library(tidyverse)
1615496081883:starbucks<-read_csv("starbucks.csv")
1615496082269:starbucks %>%
1615496082298:summarise(
1615496082320:mean_cal = mean(calories),
1615496082392:sd_cal = sd(calories),
1615496082413:n_cal = n())
1615496082613:xbar_cal <- mean(starbucks$calories)
1615496082713:s_cal <- sd(starbucks$calories)
1615496082755:n_cal <- length(starbucks$calories)
1615496082835:## Use some type of filtering to get only type=="petite"
1615496082941:## Now calculate the mean, sd and sample size of the petite pastry calories.
1615496206532:starbucks %>%
1615496206558:summarise(
1615496206581:mean_cal = mean(calories),
1615496206605:sd_cal = sd(calories),
1615496206626:n_cal = n())
1615496208341:xbar_cal <- mean(starbucks$calories)
1615496208382:s_cal <- sd(starbucks$calories)
1615496208405:n_cal <- length(starbucks$calories)
1615496567219:338.8312+ qnorm(0.975)*(105.3687/sqrt(77))
1615496588263:338.8312+ qnorm(0.975)*(105.3687/sqrt(77))
1615496588305:338.8312- qnorm(0.975)*(105.3687/sqrt(77))
1615941113455:## Here you can code your simulation and create the 3 plots.
1615941113523:## Here is some starter code for the simulation:
1615941113566:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1615941113590:n = 50 #pre-specify your sample size
1615941113614:sigma_sq = 1
1615941113667:## Simulating from Normal
1615941113690:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615941114039:## Create your plots below. (I recommend using ggplot)
1615941114101:## Remember the patchwork package might be helpful.
1615941119631:library(tidyverse)
1615941121875:#options(scipen=999)
1615941121915:set.seed(452)
1615941121957:likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615941122002:n <- seq(10,80, 10)
1615941122028:theta = 4
1615941122074:likelihood_ratio <- rep(NA, length(n))
1615941122121:for(i in 1:length(n)){
1615941122145:exp_data <- rexp(n, 1/theta)
1615941122170:xbar_data <- mean(exp_data)
1615941122198:median_data <- median(exp_data)
1615941122219:L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615941122241:L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615941122264:likelihood_ratio[i] <- L_xbar/L_median
1615941122288:}
1615941122374:tibble(n, likelihood_ratio) %>%
1615941122397:ggplot(aes(x = n)) +
1615941122422:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615941122445:labs(x = "n", y = "likelihood ratio",
1615941122473:title = "Likelihood  Ratio for different n",
1615941122497:subtitle = "Mean over Median",
1615941122518:color = "" ) + ylim(0,20)
1615996521369:library(tidyverse)
1615996521410:#options(scipen=999)
1615996521450:set.seed(452)
1615996521482:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996521518:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996521540:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996521576:#n <- seq(10,80, 10)
1615996521597:n <- seq(10,100, 10)
1615996521622:sigma_sq = 1
1615996521661:likelihood_ratio <- rep(NA, length(n))
1615996521706:for(i in 1:length(n)){
1615996521726:#exp_data <- rexp(n, 1/theta)
1615996521748:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996521786:#xbar_data <- mean(exp_data)
1615996521808:#median_data <- median(exp_data)
1615996521860:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996521880:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996521917:L_T1 <- T1(n =n[i], norm_data)
1615996521937:L_T2 <- T2(n =n[i], norm_data)
1615996521971:likelihood_ratio[i] <- L_T1/L_T2
1615996521991:}
1615996522068:tibble(n, likelihood_ratio) %>%
1615996522087:ggplot(aes(x = n)) +
1615996522106:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996522125:labs(x = "n", y = "likelihood ratio",
1615996522145:title = "Likelihood  Ratio for different n",
1615996522171:subtitle = "Mean over Median",
1615996522190:color = "" ) + ylim(0,20)
1615996540113:library(tidyverse)
1615996540164:#options(scipen=999)
1615996540202:set.seed(452)
1615996540242:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996540281:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996540302:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996540342:#n <- seq(10,80, 10)
1615996540364:n <- seq(10,100, 10)
1615996540390:sigma_sq = 1
1615996540431:likelihood_ratio <- rep(NA, length(n))
1615996540468:for(i in 1:length(n)){
1615996540491:#exp_data <- rexp(n, 1/theta)
1615996540513:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996540556:#xbar_data <- mean(exp_data)
1615996540576:#median_data <- median(exp_data)
1615996540635:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996540655:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996540692:L_T1 <- T1(n =n[i], norm_data)
1615996540714:L_T2 <- T2(n =n[i], norm_data)
1615996540752:likelihood_ratio[i] <- L_T1/L_T2
1615996540775:}
1615996540862:tibble(n, likelihood_ratio) %>%
1615996540882:ggplot(aes(x = n)) +
1615996540902:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996540927:labs(x = "n", y = "likelihood ratio",
1615996540948:title = "Likelihood  Ratio for different n",
1615996540971:subtitle = "Mean over Median",
1615996540991:color = "" )
1615996559834:library(tidyverse)
1615996559876:#options(scipen=999)
1615996559914:set.seed(452)
1615996559951:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996559992:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996560018:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996560052:#n <- seq(10,80, 10)
1615996560071:n <- seq(10,100, 10)
1615996560091:sigma_sq = 1
1615996560127:likelihood_ratio <- rep(NA, length(n))
1615996560166:for(i in 1:length(n)){
1615996560187:#exp_data <- rexp(n, 1/theta)
1615996560207:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996560245:#xbar_data <- mean(exp_data)
1615996560265:#median_data <- median(exp_data)
1615996560332:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996560359:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996560403:L_T1 <- T1(n =n[i], norm_data[i])
1615996560424:L_T2 <- T2(n =n[i], norm_data[i])
1615996560460:likelihood_ratio[i] <- L_T1/L_T2
1615996560483:}
1615996560558:tibble(n, likelihood_ratio) %>%
1615996560578:ggplot(aes(x = n)) +
1615996560600:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996560626:labs(x = "n", y = "likelihood ratio",
1615996560647:title = "Likelihood  Ratio for different n",
1615996560671:subtitle = "Mean over Median",
1615996560693:color = "" )
1615996571376:library(tidyverse)
1615996571415:#options(scipen=999)
1615996571454:set.seed(452)
1615996571497:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996571537:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996571565:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996571614:#n <- seq(10,80, 10)
1615996571637:n <- seq(10,100, 10)
1615996571662:sigma_sq = 1
1615996571705:likelihood_ratio <- rep(NA, length(n))
1615996571746:for(i in 1:length(n)){
1615996571772:#exp_data <- rexp(n, 1/theta)
1615996571795:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996571840:#xbar_data <- mean(exp_data)
1615996571861:#median_data <- median(exp_data)
1615996571922:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996571946:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996571989:L_T1 <- T1(n =n[i], norm_data)
1615996572012:L_T2 <- T2(n =n[i], norm_data)
1615996572055:likelihood_ratio[i] <- L_T1/L_T2
1615996572078:}
1615996572167:tibble(n, likelihood_ratio) %>%
1615996572190:ggplot(aes(x = n)) +
1615996572211:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996572239:labs(x = "n", y = "likelihood ratio",
1615996572264:title = "Likelihood  Ratio for different n",
1615996572286:subtitle = "Mean over Median",
1615996572311:color = "" )
1615996586449:library(tidyverse)
1615996586486:#options(scipen=999)
1615996586523:set.seed(452)
1615996586560:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996586598:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996586624:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996586663:#n <- seq(10,80, 10)
1615996586684:n <- seq(10,100, 10)
1615996586709:sigma_sq = 1
1615996586756:likelihood_ratio <- rep(NA, length(n))
1615996586813:for(i in 1:length(n)){
1615996586838:#exp_data <- rexp(n, 1/theta)
1615996586859:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996586905:#xbar_data <- mean(exp_data)
1615996586931:#median_data <- median(exp_data)
1615996586999:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996587024:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996587061:L_T1 <- T1(n =n[i], norm_data[i])
1615996587086:L_T2 <- T2(n =n[i], norm_data[i])
1615996587125:likelihood_ratio[i] <- L_T1/L_T2
1615996587146:}
1615996587228:tibble(n, likelihood_ratio) %>%
1615996587247:ggplot(aes(x = n)) +
1615996587268:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996587291:labs(x = "n", y = "likelihood ratio",
1615996587314:title = "Likelihood  Ratio for different n",
1615996587337:subtitle = "Mean over Median",
1615996587358:color = "" )
1615996595566:library(tidyverse)
1615996595604:#options(scipen=999)
1615996595642:set.seed(452)
1615996595682:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996595719:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996595744:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996595786:#n <- seq(10,80, 10)
1615996595810:n <- seq(10,100, 10)
1615996595835:sigma_sq = 1
1615996595877:likelihood_ratio <- rep(NA, length(n))
1615996595922:for(i in 1:length(n)){
1615996595943:#exp_data <- rexp(n, 1/theta)
1615996595972:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996596061:#xbar_data <- mean(exp_data)
1615996596084:#median_data <- median(exp_data)
1615996596141:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996596166:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996596208:L_T1 <- T1(n =n[i], norm_data)
1615996596231:L_T2 <- T2(n =n[i], norm_data)
1615996596272:likelihood_ratio[i] <- L_T1/L_T2
1615996596297:}
1615996596375:tibble(n, likelihood_ratio) %>%
1615996596398:ggplot(aes(x = n)) +
1615996596421:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996596439:labs(x = "n", y = "likelihood ratio",
1615996596460:title = "Likelihood  Ratio for different n",
1615996596479:subtitle = "Mean over Median",
1615996596503:color = "" )
1615996600910:library(tidyverse)
1615996600950:#options(scipen=999)
1615996600991:set.seed(899)
1615996601030:#likelihood <- function(theta_hat,xbar,n) theta_hat^(-n)*exp(-n*xbar/theta_hat)
1615996601066:T1 <- function(n, x) ((1/(n-1)) * sum(x^2)) ## DO THIS PROPERLY
1615996601094:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996601135:#n <- seq(10,80, 10)
1615996601156:n <- seq(10,100, 10)
1615996601181:sigma_sq = 1
1615996601226:likelihood_ratio <- rep(NA, length(n))
1615996601271:for(i in 1:length(n)){
1615996601297:#exp_data <- rexp(n, 1/theta)
1615996601317:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996601361:#xbar_data <- mean(exp_data)
1615996601386:#median_data <- median(exp_data)
1615996601445:#L_xbar <- likelihood(theta_hat = xbar_data, xbar = xbar_data, n=n[i])
1615996601463:#L_median <- likelihood(theta_hat = median_data, xbar = xbar_data, n=n[i])
1615996601504:L_T1 <- T1(n =n[i], norm_data)
1615996601525:L_T2 <- T2(n =n[i], norm_data)
1615996601564:likelihood_ratio[i] <- L_T1/L_T2
1615996601629:}
1615996601721:tibble(n, likelihood_ratio) %>%
1615996601745:ggplot(aes(x = n)) +
1615996601770:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996601792:labs(x = "n", y = "likelihood ratio",
1615996601814:title = "Likelihood  Ratio for different n",
1615996601838:subtitle = "Mean over Median",
1615996601862:color = "" )
1615996714051:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1615996714073:library(openintro)
1615996714156:library(tidyverse)
1615996714221:## Here you can code your simulation and create the 3 plots.
1615996714265:## Here is some starter code for the simulation:
1615996714303:set.seed(123) # Set this seed to be the last 3 digits of your student number.
1615996714324:n = 50 #pre-specify your sample size
1615996714347:sigma_sq = 1
1615996714388:## Simulating from Normal
1615996714410:rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996714731:## Create your plots below. (I recommend using ggplot)
1615996714786:## Remember the patchwork package might be helpful.
1615996714903:set.seed(899)
1615996714956:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996714977:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996715018:n <- seq(10,100, 10)
1615996715042:sigma_sq = 1
1615996715080:likelihood_ratio <- rep(NA, length(n))
1615996715119:for(i in 1:length(n)){
1615996715174:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996715194:L_T1 <- T1(n =n[i], norm_data)
1615996715220:L_T2 <- T2(n =n[i], norm_data)
1615996715241:likelihood_ratio[i] <- L_T1/L_T2
1615996715260:}
1615996715371:tibble(n, likelihood_ratio) %>%
1615996715393:ggplot(aes(x = n)) +
1615996715417:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996715436:labs(x = "n", y = "likelihood ratio",
1615996715456:title = "Likelihood  Ratio for different n",
1615996715476:subtitle = "T1 over T2",
1615996715497:color = "" )
1615996715674:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996715704:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996715741:n <- seq(10,100, 10)
1615996715763:sigma_sq = 1
1615996715805:likelihood_ratio <- rep(NA, length(n))
1615996715846:for(i in 1:length(n)){
1615996715868:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996715888:L_T1 <- T1(n =n[i], norm_data)
1615996715909:L_T2 <- T2(n =n[i], norm_data)
1615996715927:likelihood_ratio[i] <- L_T1/L_T2
1615996715950:}
1615996716024:tibble(n, likelihood_ratio) %>%
1615996716050:ggplot(aes(x = n)) +
1615996716071:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996716094:labs(x = "n", y = "likelihood ratio",
1615996716116:title = "Likelihood  Ratio for different n",
1615996716137:subtitle = "T1 over T2",
1615996716160:color = "" )
1615996716420:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1615996716455:# You may need additional chunks, in case you want to include some of the cleaning output.
1615996716527:# Use this to calculate some summary measures.
1615996716606:# Use this to create some plots.
1615996716683:# Here you can calculate your CIS
1615996716728:# run a bootstrap.
1615996716764:# Here you can derive the CIs from the bootsrtap.
1615996716877:# Here you can include some relevant visualizations.
1615996781952:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996781976:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996782013:n <- seq(10,100, 10)
1615996782034:sigma_sq = 100
1615996782071:likelihood_ratio <- rep(NA, length(n))
1615996782111:for(i in 1:length(n)){
1615996782131:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996782151:L_T1 <- T1(n =n[i], norm_data)
1615996782171:L_T2 <- T2(n =n[i], norm_data)
1615996782192:likelihood_ratio[i] <- L_T1/L_T2
1615996782213:}
1615996782294:tibble(n, likelihood_ratio) %>%
1615996782314:ggplot(aes(x = n)) +
1615996782334:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996782353:labs(x = "n", y = "likelihood ratio",
1615996782374:title = "Likelihood  Ratio for different n",
1615996782395:subtitle = "T1 over T2",
1615996782419:color = "" )
1615996809956:set.seed(899)
1615996809993:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996810017:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996810059:n <- seq(10,100, 10)
1615996810081:sigma_sq = 1
1615996810123:likelihood_ratio <- rep(NA, length(n))
1615996810168:for(i in 1:length(n)){
1615996810188:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996810211:L_T1 <- T1(n =n[i], norm_data)
1615996810234:L_T2 <- T2(n =n[i], norm_data)
1615996810255:likelihood_ratio[i] <- L_T1/L_T2
1615996810277:}
1615996810372:tibble(n, likelihood_ratio) %>%
1615996810396:ggplot(aes(x = n)) +
1615996810416:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996810438:labs(x = "n", y = "likelihood ratio",
1615996810461:title = "Likelihood  Ratio for different n",
1615996810482:subtitle = "T1 over T2",
1615996810503:color = "" )
1615996860812:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996860833:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996860872:n <- seq(10,100, 10)
1615996860893:sigma_sq = 100000
1615996860927:likelihood_ratio <- rep(NA, length(n))
1615996860981:for(i in 1:length(n)){
1615996861001:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996861020:L_T1 <- T1(n =n[i], norm_data)
1615996861042:L_T2 <- T2(n =n[i], norm_data)
1615996861061:likelihood_ratio[i] <- L_T1/L_T2
1615996861082:}
1615996861162:tibble(n, likelihood_ratio) %>%
1615996861186:ggplot(aes(x = n)) +
1615996861206:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996861228:labs(x = "n", y = "likelihood ratio",
1615996861248:title = "Likelihood  Ratio for different n",
1615996861268:subtitle = "T1 over T2",
1615996861289:color = "" )
1615996880737:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996880760:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996880804:n <- seq(10,100, 10)
1615996880827:sigma_sq = 100000
1615996880860:likelihood_ratio <- rep(NA, length(n))
1615996880895:for(i in 1:length(n)){
1615996880917:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996880938:L_T1 <- T1(n =n[i], norm_data1)
1615996880956:L_T2 <- T2(n =n[i], norm_data1)
1615996880973:likelihood_ratio[i] <- L_T1/L_T2
1615996880992:}
1615996881064:tibble(n, likelihood_ratio) %>%
1615996881083:ggplot(aes(x = n)) +
1615996881109:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996881130:labs(x = "n", y = "likelihood ratio",
1615996881149:title = "Likelihood  Ratio for different n",
1615996881168:subtitle = "T1 over T2",
1615996881188:color = "" )
1615996891208:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996891231:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996891267:n <- seq(10,1000, 10)
1615996891298:sigma_sq = 100000
1615996891336:likelihood_ratio <- rep(NA, length(n))
1615996891375:for(i in 1:length(n)){
1615996891398:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996891418:L_T1 <- T1(n =n[i], norm_data1)
1615996891440:L_T2 <- T2(n =n[i], norm_data1)
1615996891459:likelihood_ratio[i] <- L_T1/L_T2
1615996891477:}
1615996891555:tibble(n, likelihood_ratio) %>%
1615996891573:ggplot(aes(x = n)) +
1615996891596:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996891614:labs(x = "n", y = "likelihood ratio",
1615996891648:title = "Likelihood  Ratio for different n",
1615996891669:subtitle = "T1 over T2",
1615996891689:color = "" )
1615996952032:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996952053:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996952092:n <- seq(10,100, 10)
1615996952114:sigma_sq = 100000
1615996952153:likelihood_ratio <- rep(NA, length(n))
1615996952191:for(i in 1:length(n)){
1615996952216:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996952240:L_T1 <- T1(n =n[i], norm_data1)
1615996952258:L_T2 <- T2(n =n[i], norm_data1)
1615996952277:likelihood_ratio[i] <- L_T1/L_T2
1615996952297:}
1615996952369:tibble(n, likelihood_ratio) %>%
1615996952389:ggplot(aes(x = n)) +
1615996952411:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996952434:labs(x = "n", y = "likelihood ratio",
1615996952453:title = "Likelihood  Ratio for different n",
1615996952473:subtitle = "T1 over T2",
1615996952494:color = "" )
1615996968541:set.seed(899)
1615996968578:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996968602:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996968637:n <- seq(10,100, 10)
1615996968659:sigma_sq = 1
1615996968706:likelihood_ratio <- rep(NA, length(n))
1615996968745:for(i in 1:length(n)){
1615996968767:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996968787:L_T1 <- T1(n =n[i], norm_data)
1615996968806:L_T2 <- T2(n =n[i], norm_data)
1615996968827:likelihood_ratio[i] <- L_T1/L_T2
1615996968845:}
1615996968934:tibble(n, likelihood_ratio) %>%
1615996968953:ggplot(aes(x = n)) +
1615996968976:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996968996:labs(x = "n", y = "likelihood ratio",
1615996969014:title = "Likelihood  Ratio for different n",
1615996969035:subtitle = "T1 over T2",
1615996969055:color = "" )
1615996997654:set.seed(899)
1615996997699:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615996997719:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615996997755:n <- seq(10,100, 10)
1615996997778:sigma_sq = 1
1615996997814:likelihood_ratio <- rep(NA, length(n))
1615996997851:for(i in 1:length(n)){
1615996997871:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615996997893:L_T1 <- T1(n =n[i], norm_data)
1615996997912:L_T2 <- T2(n =n[i], norm_data)
1615996997933:likelihood_ratio[i] <- L_T1/L_T2
1615996997954:}
1615996998061:tibble(n, likelihood_ratio) %>%
1615996998081:ggplot(aes(x = n)) +
1615996998101:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615996998122:labs(x = "n", y = "likelihood ratio",
1615996998142:title = "Likelihood  Ratio for different n",
1615996998162:subtitle = "T1 over T2",
1615996998182:color = "" )
1615997012333:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997012357:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997012398:n <- seq(10,100, 10)
1615997012423:sigma_sq1 = 100000
1615997012466:likelihood_ratio <- rep(NA, length(n))
1615997012507:for(i in 1:length(n)){
1615997012528:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1615997012549:L_T1 <- T1(n =n[i], norm_data1)
1615997012570:L_T2 <- T2(n =n[i], norm_data1)
1615997012591:likelihood_ratio[i] <- L_T1/L_T2
1615997012614:}
1615997012692:tibble(n, likelihood_ratio) %>%
1615997012712:ggplot(aes(x = n)) +
1615997012739:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997012764:labs(x = "n", y = "likelihood ratio",
1615997012789:title = "Likelihood  Ratio for different n",
1615997012810:subtitle = "T1 over T2",
1615997012834:color = "" )
1615997097739:set.seed(899)
1615997097787:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997097811:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997097851:n <- seq(10,10, 10)
1615997097876:sigma_sq = 1
1615997097916:likelihood_ratio <- rep(NA, length(n))
1615997097953:for(i in 1:length(n)){
1615997097974:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615997097994:L_T1 <- T1(n =n[i], norm_data)
1615997098026:L_T2 <- T2(n =n[i], norm_data)
1615997098049:likelihood_ratio[i] <- L_T1/L_T2
1615997098072:}
1615997098148:tibble(n, likelihood_ratio) %>%
1615997098166:ggplot(aes(x = n)) +
1615997098189:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997098210:labs(x = "n", y = "likelihood ratio",
1615997098234:title = "Likelihood  Ratio for different n",
1615997098258:subtitle = "T1 over T2",
1615997098280:color = "" )
1615997107469:set.seed(899)
1615997107509:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997107534:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997107568:n <- seq(1,10, 10)
1615997107592:sigma_sq = 1
1615997107627:likelihood_ratio <- rep(NA, length(n))
1615997107662:for(i in 1:length(n)){
1615997107681:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615997107702:L_T1 <- T1(n =n[i], norm_data)
1615997107722:L_T2 <- T2(n =n[i], norm_data)
1615997107743:likelihood_ratio[i] <- L_T1/L_T2
1615997107763:}
1615997107822:tibble(n, likelihood_ratio) %>%
1615997107843:ggplot(aes(x = n)) +
1615997107864:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997107888:labs(x = "n", y = "likelihood ratio",
1615997107908:title = "Likelihood  Ratio for different n",
1615997107930:subtitle = "T1 over T2",
1615997107950:color = "" )
1615997114427:set.seed(899)
1615997114461:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997114482:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997114523:n <- seq(1,10, 1)
1615997114548:sigma_sq = 1
1615997114585:likelihood_ratio <- rep(NA, length(n))
1615997114628:for(i in 1:length(n)){
1615997114648:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615997114671:L_T1 <- T1(n =n[i], norm_data)
1615997114692:L_T2 <- T2(n =n[i], norm_data)
1615997114712:likelihood_ratio[i] <- L_T1/L_T2
1615997114734:}
1615997114809:tibble(n, likelihood_ratio) %>%
1615997114831:ggplot(aes(x = n)) +
1615997114851:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997114870:labs(x = "n", y = "likelihood ratio",
1615997114891:title = "Likelihood  Ratio for different n",
1615997114909:subtitle = "T1 over T2",
1615997114930:color = "" )
1615997137095:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997137117:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997137157:n <- seq(1,10, 11)
1615997137177:sigma_sq1 = 100000
1615997137219:likelihood_ratio <- rep(NA, length(n))
1615997137258:for(i in 1:length(n)){
1615997137278:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1615997137298:L_T1 <- T1(n =n[i], norm_data1)
1615997137323:L_T2 <- T2(n =n[i], norm_data1)
1615997137343:likelihood_ratio[i] <- L_T1/L_T2
1615997137366:}
1615997137430:tibble(n, likelihood_ratio) %>%
1615997137448:ggplot(aes(x = n)) +
1615997137468:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997137488:labs(x = "n", y = "likelihood ratio",
1615997137507:title = "Likelihood  Ratio for different n",
1615997137526:subtitle = "T1 over T2",
1615997137548:color = "" )
1615997145276:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997145303:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997145342:n <- seq(1,10, 1)
1615997145364:sigma_sq1 = 100000
1615997145403:likelihood_ratio <- rep(NA, length(n))
1615997145442:for(i in 1:length(n)){
1615997145462:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1615997145486:L_T1 <- T1(n =n[i], norm_data1)
1615997145505:L_T2 <- T2(n =n[i], norm_data1)
1615997145528:likelihood_ratio[i] <- L_T1/L_T2
1615997145549:}
1615997145618:tibble(n, likelihood_ratio) %>%
1615997145639:ggplot(aes(x = n)) +
1615997145658:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997145682:labs(x = "n", y = "likelihood ratio",
1615997145704:title = "Likelihood  Ratio for different n",
1615997145724:subtitle = "T1 over T2",
1615997145745:color = "" )
1615997182761:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997182782:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997182833:n <- seq(10,100, 10)
1615997182858:sigma_sq1 = 100000
1615997182894:likelihood_ratio <- rep(NA, length(n))
1615997182931:for(i in 1:length(n)){
1615997182949:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1615997182968:L_T1 <- T1(n =n[i], norm_data1)
1615997182989:L_T2 <- T2(n =n[i], norm_data1)
1615997183010:likelihood_ratio[i] <- L_T1/L_T2
1615997183032:}
1615997183105:tibble(n, likelihood_ratio) %>%
1615997183125:ggplot(aes(x = n)) +
1615997183146:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997183168:labs(x = "n", y = "likelihood ratio",
1615997183190:title = "Likelihood  Ratio for different n",
1615997183209:subtitle = "T1 over T2",
1615997183229:color = "" )
1615997188460:set.seed(899)
1615997188496:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1615997188517:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1615997188554:n <- seq(10,100, 10)
1615997188575:sigma_sq = 1
1615997188621:likelihood_ratio <- rep(NA, length(n))
1615997188660:for(i in 1:length(n)){
1615997188679:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1615997188699:L_T1 <- T1(n =n[i], norm_data)
1615997188719:L_T2 <- T2(n =n[i], norm_data)
1615997188740:likelihood_ratio[i] <- L_T1/L_T2
1615997188764:}
1615997188863:tibble(n, likelihood_ratio) %>%
1615997188885:ggplot(aes(x = n)) +
1615997188905:geom_line(aes(y = likelihood_ratio), color = "blue") +
1615997188924:labs(x = "n", y = "likelihood ratio",
1615997188944:title = "Likelihood  Ratio for different n",
1615997188965:subtitle = "T1 over T2",
1615997188989:color = "" )
1616005953084:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616005953108:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616005953153:n <- seq(10,100, 10)
1616005953176:sigma_sq1 = 100000
1616005953214:likelihood_ratio <- rep(NA, length(n))
1616005953256:for(i in 1:length(n)){
1616005953277:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616005953300:L_T1 <- T1(n =n[i], norm_data1)
1616005953322:L_T2 <- T2(n =n[i], norm_data1)
1616005953346:likelihood_ratio[i] <- L_T1/L_T2
1616005953367:}
1616005953460:tibble(n, likelihood_ratio) %>%
1616005953481:ggplot(aes(x = n)) +
1616005953506:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616005953526:labs(x = "n", y = "likelihood ratio",
1616005953548:title = "LikelihoodRatio for different n values for \sigma^2 = 100000",
1616005963655:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616005963679:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616005963720:n <- seq(10,100, 10)
1616005963744:sigma_sq1 = 100000
1616005963788:likelihood_ratio <- rep(NA, length(n))
1616005963829:for(i in 1:length(n)){
1616005963884:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616005963906:L_T1 <- T1(n =n[i], norm_data1)
1616005963934:L_T2 <- T2(n =n[i], norm_data1)
1616005963956:likelihood_ratio[i] <- L_T1/L_T2
1616005963980:}
1616005964075:tibble(n, likelihood_ratio) %>%
1616005964097:ggplot(aes(x = n)) +
1616005964119:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616005964138:labs(x = "n", y = "likelihood ratio",
1616005964162:title = "LikelihoodRatio for different n values for $\sigma^2$ = 100000",
1616005977438:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616005977462:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616005977502:n <- seq(10,100, 10)
1616005977528:sigma_sq1 = 100000
1616005977569:likelihood_ratio <- rep(NA, length(n))
1616005977613:for(i in 1:length(n)){
1616005977637:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616005977658:L_T1 <- T1(n =n[i], norm_data1)
1616005977677:L_T2 <- T2(n =n[i], norm_data1)
1616005977696:likelihood_ratio[i] <- L_T1/L_T2
1616005977715:}
1616005977803:tibble(n, likelihood_ratio) %>%
1616005977822:ggplot(aes(x = n)) +
1616005977842:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616005977863:labs(x = "n", y = "likelihood ratio",
1616005977885:title = "LikelihoodRatio for different n values for $sigma^2$ = 100000",
1616005977905:subtitle = "T1 over T2",
1616005977924:color = "" )
1616005992291:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616005992314:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616005992356:n <- seq(10,100, 10)
1616005992381:sigma_sq1 = 100000
1616005992428:likelihood_ratio <- rep(NA, length(n))
1616005992467:for(i in 1:length(n)){
1616005992492:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616005992513:L_T1 <- T1(n =n[i], norm_data1)
1616005992533:L_T2 <- T2(n =n[i], norm_data1)
1616005992555:likelihood_ratio[i] <- L_T1/L_T2
1616005992577:}
1616005992663:tibble(n, likelihood_ratio) %>%
1616005992684:ggplot(aes(x = n)) +
1616005992709:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616005992733:labs(x = "n", y = "likelihood ratio",
1616005992758:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616005992778:subtitle = "T1 over T2",
1616005992799:color = "" )
1616006016157:set.seed(899)
1616006016195:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006016216:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006016261:n <- seq(10,100, 10)
1616006016287:sigma_sq = 1
1616006016326:likelihood_ratio <- rep(NA, length(n))
1616006016373:for(i in 1:length(n)){
1616006016397:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006016419:L_T1 <- T1(n =n[i], norm_data)
1616006016441:L_T2 <- T2(n =n[i], norm_data)
1616006016462:likelihood_ratio[i] <- L_T1/L_T2
1616006016484:}
1616006016567:tibble(n, likelihood_ratio) %>%
1616006016591:ggplot(aes(x = n)) +
1616006016612:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006016634:labs(x = "n", y = "likelihood ratio",
1616006016658:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006016679:subtitle = "T1 over T2",
1616006016702:color = "" )
1616006030697:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006030720:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006030762:n <- seq(10,100, 10)
1616006030787:sigma_sq1 = 100000
1616006030837:likelihood_ratio <- rep(NA, length(n))
1616006030884:for(i in 1:length(n)){
1616006030907:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006030928:L_T1 <- T1(n =n[i], norm_data1)
1616006030951:L_T2 <- T2(n =n[i], norm_data1)
1616006030973:likelihood_ratio[i] <- L_T1/L_T2
1616006030997:}
1616006031118:tibble(n, likelihood_ratio) %>%
1616006031141:ggplot(aes(x = n)) +
1616006031165:geom_line(aes(y = likelihood_ratio), color = "red") +
1616006031187:labs(x = "n", y = "likelihood ratio",
1616006031210:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616006031231:subtitle = "T1 over T2",
1616006031254:color = "" )
1616006072513:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006072536:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006072580:n <- seq(10,100, 10)
1616006072603:sigma_sq1 = 100000
1616006072646:likelihood_ratio1 <- rep(NA, length(n))
1616006072691:for(i in 1:length(n)){
1616006072712:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006072733:L_T1_1 <- T1(n =n[i], norm_data1)
1616006072753:L_T2_1 <- T2(n =n[i], norm_data1)
1616006072776:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006072799:}
1616006072877:tibble(n, likelihood_ratio) %>%
1616006072906:ggplot(aes(x = n)) +
1616006072926:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006072952:labs(x = "n", y = "likelihood ratio",
1616006072975:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616006073002:subtitle = "T1 over T2",
1616006073023:color = "" )
1616006141590:set.seed(899)
1616006141630:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006141654:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006141696:n <- seq(10,100, 10)
1616006141719:sigma_sq = 1
1616006141756:likelihood_ratio <- rep(NA, length(n))
1616006141796:for(i in 1:length(n)){
1616006141818:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006141841:L_T1 <- T1(n =n[i], norm_data)
1616006141864:L_T2 <- T2(n =n[i], norm_data)
1616006141884:likelihood_ratio[i] <- L_T1/L_T2
1616006141907:}
1616006141997:tibble(n, likelihood_ratio) %>%
1616006142020:ggplot(aes(x = n)) +
1616006142042:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006142064:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006142085:labs(x = "n", y = "likelihood ratio",
1616006142106:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006142135:subtitle = "T1 over T2",
1616006142161:color = "" )
1616006142339:n <- seq(10,100, 10)
1616006142365:sigma_sq1 = 100000
1616006142416:likelihood_ratio1 <- rep(NA, length(n))
1616006142458:for(i in 1:length(n)){
1616006142481:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006142509:L_T1_1 <- T1(n =n[i], norm_data1)
1616006142532:L_T2_1 <- T2(n =n[i], norm_data1)
1616006142559:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006142580:}
1616006142662:tibble(n, likelihood_ratio) %>%
1616006142688:ggplot(aes(x = n)) +
1616006142727:labs(x = "n", y = "likelihood ratio",
1616006142756:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616006142778:subtitle = "T1 over T2",
1616006142802:color = "" )
1616006161042:set.seed(899)
1616006161081:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006161104:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006161143:n <- seq(10,100, 10)
1616006161169:sigma_sq = 1
1616006161208:likelihood_ratio <- rep(NA, length(n))
1616006161247:for(i in 1:length(n)){
1616006161271:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006161289:L_T1 <- T1(n =n[i], norm_data)
1616006161318:L_T2 <- T2(n =n[i], norm_data)
1616006161342:likelihood_ratio[i] <- L_T1/L_T2
1616006161364:}
1616006161439:n <- seq(10,100, 10)
1616006161468:sigma_sq1 = 100000
1616006161509:likelihood_ratio1 <- rep(NA, length(n))
1616006161550:for(i in 1:length(n)){
1616006161572:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006161603:L_T1_1 <- T1(n =n[i], norm_data1)
1616006161622:L_T2_1 <- T2(n =n[i], norm_data1)
1616006161646:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006161666:}
1616006161740:tibble(n, likelihood_ratio) %>%
1616006161761:ggplot(aes(x = n)) +
1616006161782:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006161805:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006161828:labs(x = "n", y = "likelihood ratio",
1616006161849:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006161870:subtitle = "T1 over T2",
1616006161893:color = "" )
1616006162141:tibble(n, likelihood_ratio) %>%
1616006162166:ggplot(aes(x = n)) +
1616006162206:labs(x = "n", y = "likelihood ratio",
1616006162227:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616006162253:subtitle = "T1 over T2",
1616006162276:color = "" )
1616006179664:set.seed(899)
1616006179702:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006179724:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006179765:n <- seq(10,100, 10)
1616006179793:sigma_sq = 1
1616006179835:likelihood_ratio <- rep(NA, length(n))
1616006179875:for(i in 1:length(n)){
1616006179897:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006179922:L_T1 <- T1(n =n[i], norm_data)
1616006179944:L_T2 <- T2(n =n[i], norm_data)
1616006179968:likelihood_ratio[i] <- L_T1/L_T2
1616006179989:}
1616006180058:n <- seq(10,100, 10)
1616006180088:sigma_sq1 = 100000
1616006180128:likelihood_ratio1 <- rep(NA, length(n))
1616006180168:for(i in 1:length(n)){
1616006180189:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006180211:L_T1_1 <- T1(n =n[i], norm_data1)
1616006180230:L_T2_1 <- T2(n =n[i], norm_data1)
1616006180253:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006180274:}
1616006180358:tibble(n, likelihood_ratio) %>%
1616006180379:ggplot(aes(x = n)) +
1616006180399:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006180419:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006180440:labs(x = "n", y = "likelihood ratio",
1616006180461:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006180483:subtitle = "T1 over T2",
1616006180512:color = "" )
1616006209546:set.seed(899)
1616006209580:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006209606:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006209642:n <- seq(10,100, 10)
1616006209665:sigma_sq = 1
1616006209701:likelihood_ratio <- rep(NA, length(n))
1616006209743:for(i in 1:length(n)){
1616006209762:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006209783:L_T1 <- T1(n =n[i], norm_data)
1616006209805:L_T2 <- T2(n =n[i], norm_data)
1616006209827:likelihood_ratio[i] <- L_T1/L_T2
1616006209848:}
1616006209914:m <- seq(10,100, 10)
1616006209938:sigma_sq1 = 100000
1616006209975:likelihood_ratio1 <- rep(NA, length(m))
1616006210018:for(i in 1:length(m)){
1616006210040:norm_data1 <- rnorm(m, mean=0, sd=sqrt(sigma_sq1))
1616006210069:L_T1_1 <- T1(m =m[i], norm_data1)
1616006210093:L_T2_1 <- T2(m =m[i], norm_data1)
1616006210116:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006210135:}
1616006214950:set.seed(899)
1616006214996:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006215019:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006215059:n <- seq(10,100, 10)
1616006215083:sigma_sq = 1
1616006215124:likelihood_ratio <- rep(NA, length(n))
1616006215169:for(i in 1:length(n)){
1616006215192:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006215214:L_T1 <- T1(n =n[i], norm_data)
1616006215234:L_T2 <- T2(n =n[i], norm_data)
1616006215259:likelihood_ratio[i] <- L_T1/L_T2
1616006215281:}
1616006215354:m <- seq(10,100, 10)
1616006215380:sigma_sq1 = 100000
1616006215423:likelihood_ratio1 <- rep(NA, length(m))
1616006215465:for(i in 1:length(m)){
1616006215485:norm_data1 <- rnorm(m, mean=0, sd=sqrt(sigma_sq1))
1616006215508:L_T1_1 <- T1(m =m[i], norm_data1)
1616006215531:L_T2_1 <- T2(m =m[i], norm_data1)
1616006215554:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006215576:}
1616006256175:set.seed(899)
1616006256216:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006256239:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006256283:n <- seq(10,100, 10)
1616006256314:sigma_sq = 1
1616006256338:sigma_sq1 = 100000
1616006256381:likelihood_ratio <- rep(NA, length(n))
1616006256404:likelihood_ratio1 <- rep(NA, length(m))
1616006256446:for(i in 1:length(n)){
1616006256468:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006256490:L_T1 <- T1(n =n[i], norm_data)
1616006256510:L_T2 <- T2(n =n[i], norm_data)
1616006256531:likelihood_ratio[i] <- L_T1/L_T2
1616006256553:L_T1_1 <- T1(m =m[i], norm_data1)
1616006256572:L_T2_1 <- T2(m =m[i], norm_data1)
1616006256592:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006256614:}
1616006268943:set.seed(899)
1616006268980:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006269004:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006269043:n <- seq(10,100, 10)
1616006269068:sigma_sq = 1
1616006269095:sigma_sq1 = 100000
1616006269139:likelihood_ratio <- rep(NA, length(n))
1616006269163:likelihood_ratio1 <- rep(NA, length(m))
1616006269204:for(i in 1:length(n)){
1616006269230:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006269253:L_T1 <- T1(n =n[i], norm_data)
1616006269274:L_T2 <- T2(n =n[i], norm_data)
1616006269295:likelihood_ratio[i] <- L_T1/L_T2
1616006269316:L_T1_1 <- T1(n =n[i], norm_data1)
1616006269341:L_T2_1 <- T2(n =n[i], norm_data1)
1616006269368:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006269389:}
1616006269468:tibble(n, likelihood_ratio) %>%
1616006269490:ggplot(aes(x = n)) +
1616006269511:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006269534:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006269556:labs(x = "n", y = "likelihood ratio",
1616006269578:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006269599:subtitle = "T1 over T2",
1616006269620:color = "" )
1616006288963:set.seed(899)
1616006289023:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006289054:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006289096:n <- seq(10,100, 10)
1616006289130:sigma_sq = 1
1616006289153:sigma_sq1 = 100000
1616006289189:likelihood_ratio <- rep(NA, length(n))
1616006289215:likelihood_ratio1 <- rep(NA, length(m))
1616006289262:for(i in 1:length(n)){
1616006289283:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006289304:L_T1 <- T1(n =n[i], norm_data)
1616006289331:L_T2 <- T2(n =n[i], norm_data)
1616006289359:likelihood_ratio[i] <- L_T1/L_T2
1616006289382:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006289403:L_T1_1 <- T1(n =n[i], norm_data1)
1616006289425:L_T2_1 <- T2(n =n[i], norm_data1)
1616006289450:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006289473:}
1616006289550:tibble(n, likelihood_ratio) %>%
1616006289579:ggplot(aes(x = n)) +
1616006289604:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006289625:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006289647:labs(x = "n", y = "likelihood ratio",
1616006289672:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006289693:subtitle = "T1 over T2",
1616006289715:color = "" )
1616006333543:set.seed(899)
1616006333586:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006333611:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006333649:n <- seq(10,100, 10)
1616006333687:sigma_sq = 1
1616006333709:sigma_sq1 = 100000
1616006333745:likelihood_ratio <- rep(NA, length(n))
1616006333769:likelihood_ratio1 <- rep(NA, length(m))
1616006333816:for(i in 1:length(n)){
1616006333843:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006333865:L_T1 <- T1(n =n[i], norm_data)
1616006333889:L_T2 <- T2(n =n[i], norm_data)
1616006333910:likelihood_ratio[i] <- L_T1/L_T2
1616006333932:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006333953:L_T1_1 <- T1(n =n[i], norm_data1)
1616006333977:L_T2_1 <- T2(n =n[i], norm_data1)
1616006333998:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006334020:}
1616006334099:tibble(n, likelihood_ratio1) %>%
1616006334121:ggplot(aes(x = n)) +
1616006334142:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006334166:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006334191:labs(x = "n", y = "likelihood ratio",
1616006334212:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006334233:subtitle = "T1 over T2",
1616006334257:color = "" )
1616006360245:set.seed(899)
1616006360282:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006360306:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006360346:n <- seq(10,100, 10)
1616006360373:sigma_sq = 1
1616006360413:likelihood_ratio <- rep(NA, length(n))
1616006360455:for(i in 1:length(n)){
1616006360477:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616006360497:L_T1 <- T1(n =n[i], norm_data)
1616006360515:L_T2 <- T2(n =n[i], norm_data)
1616006360535:likelihood_ratio[i] <- L_T1/L_T2
1616006360558:}
1616006360637:tibble(n, likelihood_ratio) %>%
1616006360659:ggplot(aes(x = n)) +
1616006360681:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616006360701:labs(x = "n", y = "likelihood ratio",
1616006360723:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616006360746:subtitle = "T1 over T2",
1616006360767:color = "" )
1616006369763:set.seed(899)
1616006369788:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616006369811:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616006369855:n <- seq(10,100, 10)
1616006369885:sigma_sq1 = 100000
1616006369930:likelihood_ratio1 <- rep(NA, length(n))
1616006369976:for(i in 1:length(n)){
1616006369997:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616006370016:L_T1_1 <- T1(n =n[i], norm_data1)
1616006370035:L_T2_1 <- T2(n =n[i], norm_data1)
1616006370060:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616006370079:}
1616006370166:tibble(n, likelihood_ratio) %>%
1616006370187:ggplot(aes(x = n)) +
1616006370213:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616006370236:labs(x = "n", y = "likelihood ratio",
1616006370257:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616006370284:subtitle = "T1 over T2",
1616006370306:color = "" )
1616008982767:set.seed(899)
1616008982806:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616008982832:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616008982878:n <- seq(10,100, 10)
1616008982902:sigma_sq = 1
1616008982940:likelihood_ratio <- rep(NA, length(n))
1616008982986:for(i in 1:length(n)){
1616008983010:norm_data <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1616008983030:L_T1 <- T1(n =n[i], norm_data)
1616008983053:L_T2 <- T2(n =n[i], norm_data)
1616008983086:likelihood_ratio[i] <- L_T1/L_T2
1616008983110:}
1616008983199:tibble(n, likelihood_ratio) %>%
1616008983219:ggplot(aes(x = n)) +
1616008983241:geom_line(aes(y = likelihood_ratio), color = "blue") +
1616008983262:labs(x = "n", y = "likelihood ratio",
1616008983284:title = "LikelihoodRatio for different n values for sigma squared = 1",
1616008983311:subtitle = "T1 over T2",
1616008983334:color = "" )
1616008987222:set.seed(899)
1616008987248:T1 <- function(n, x) ((1/(n-1)) * sum(x^2))
1616008987270:T2 <- function(n, x) ((1/(n)) * sum(x^2))
1616008987309:n <- seq(10,100, 10)
1616008987335:sigma_sq1 = 100000
1616008987379:likelihood_ratio1 <- rep(NA, length(n))
1616008987422:for(i in 1:length(n)){
1616008987445:norm_data1 <- rnorm(n, mean=0, sd=sqrt(sigma_sq1))
1616008987476:L_T1_1 <- T1(n =n[i], norm_data1)
1616008987497:L_T2_1 <- T2(n =n[i], norm_data1)
1616008987517:likelihood_ratio1[i] <- L_T1_1/L_T2_1
1616008987539:}
1616008987635:tibble(n, likelihood_ratio) %>%
1616008987654:ggplot(aes(x = n)) +
1616008987678:geom_line(aes(y = likelihood_ratio1), color = "red") +
1616008987700:labs(x = "n", y = "likelihood ratio",
1616008987731:title = "LikelihoodRatio for different n values for sigma squared = 100000",
1616008987752:subtitle = "T1 over T2",
1616008987775:color = "" )
1616190173834:knitr::opts_chunk$set(echo = TRUE)
1616190173901:library(tidyverse)
1616190174123:xbar_cal <- mean(starbucks$calories)
1616190347025:knitr::opts_chunk$set(echo = TRUE)
1616190347047:library(tidyverse)
1616190347108:starbucks<-read_csv("starbucks.csv")
1616190347376:starbucks %>%
1616190347404:summarise(
1616190347426:mean_cal = mean(calories),
1616190347446:sd_cal = sd(calories),
1616190347471:n_cal = n())
1616190347588:xbar_cal <- mean(starbucks$calories)
1616190347616:s_cal <- sd(starbucks$calories)
1616190347639:n_cal <- length(starbucks$calories)
1616190347696:338.8312+ qnorm(0.975)*(105.3687/sqrt(77))
1616190347738:338.8312- qnorm(0.975)*(105.3687/sqrt(77))
1616190347797:## Use some type of filtering to get only type=="petite"
1616190347878:## Now calculate the mean, sd and sample size of the petite pastry calories.
1616533826314:2.8-3
1616533835116:1/3
1616533850839:(1/3)/(sqrt(50))
1616533873664:-0.2/0.04714045
1616533910682:pexp(-4.242641)
1616534231475:pnorm(-4.242641)
1616534247895:1-1.104523e-05
1616534496596:sqrt(log(exp(4*5^2)))
1616534507896:height <- sum(c("1", "2", "3"))
1616534518955:avg <- (8+3^2+2*4)/4
1616534531107:t<-c(1,3,4,7,3) ; sum(t)
1616703508796:ln(1/54.7)
1616703532920:log(1/54.7)
1616784176423:qnorm(0.9)
1616787951346:pnorm(-4.24)
1616787969073:pexp(-4.24)
1616788030113:pnorm(-0.417)
1616788042004:pnorm(-0.471)
1616788555009:1-pnorm(10.6)
1616793618720:-2(log(2.22*10^36)-log(2.22)*10^32)
1616793627949:log(2.22*10^36)
1616793653496:-2(log(2.22*10^36)-log(2.22*10^32))
1616793668396:log(2.22*10^36)
1616793674474:log(2.22*10^32)
1616793716479:-2(83.69057-74.48023)
1616793734474:-2*(log(2.22*10^36)-log(2.22*10^32))
1616793824180:pchisq(-18.42, lower.tail = FALSE, df=2)
1616793840569:pnorm(-18.42)
1616793859026:pnorm(-18.42, lower.tail = FALSE)
1616795007620:pnorm(2.85239)
1616795032788:pnorm(2.85239)-pnorm(-0.385641)
1616797442058:6.44+qnorm(0.975)*(sqrt(1.47)/sqrt(16))
1616797477091:6.44+qt(0.975, df= 15)*(sqrt(1.47)/sqrt(16))
1616797506791:6.44-qt(0.975, df= 15)*(sqrt(1.47)/sqrt(16))
1616797518596:6.44-qnorm(0.975)*(sqrt(1.47)/sqrt(16))
1616797804945:pchisq(6.629, lower.tail = FALSE, df = 1)
1616800098845:pnorm(-5)
1616800123763:pnorm(2.85)
1616800173732:pnorm(-4.257)
1617650833365:for (i in 1:20){
1617650833396:sample <- rnorm(i, mean = 10, sd = 4)
1617650833416:}
1617650846328:sample
1617651188009:L_theta0 <- function(sample[i]) (2*pi*16)*^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651195346:L_theta0 <- function(samplei) (2*pi*16)*^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651204160:L_theta0 <- function(samplei) (2*pi*16)^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651217843:L_theta0
1617651227196:L_theta0()
1617651384852:L_theta0 <- function(sample) (2*pi*16)^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651521355:mean(sample)
1617651529919:L_theta0 <- function() (2*pi*16)^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651537264:L_theta0
1617651541741:L_theta0()
1617651552437:L_theta0 <- function() (2*pi*16)^{-10} * exp(-1/32)*sum((-10)^2)
1617651554722:L_theta0()
1617651650745:-2*(log(L_theta0) - log(L_theta1))
1617651658251:-2*(log(L_theta0()) - log(L_theta1()))
1617651663294:for (i in 1:20){
1617651663313:sample <- rnorm(i, mean = 10, sd = 4)
1617651663327:L_theta0 <- function() (2*pi*16)^{-10} * exp(-1/32)*sum((sample[i]-10)^2)
1617651663343:L_theta1 <- function() (2*pi*16)^{-10} * exp(-1/32)*sum((sample[i]-mean(sample))^2)
1617651663361:}
1617651663439:-2*(log(L_theta0()) - log(L_theta1()))
1617651722353:plot(sample)
1617651759596:hist(sample)
1617651781399:hist(sample, freq = FALSE, breaks = 100)
1617651890714:sample_chi
1617651895125:for(j in 1:100000){
1617651895138:sample_chi <- rchisq(i, df=1)
1617651895151:}
1617651895877:sample_chi
1617651915464:for(j in 1:100000){
1617651915481:sample_chi <- rchisq(j, df=1)
1617651915498:}
1617652019032:sample_chi
1617652041332:density(sample_chi)
1617652060071:lines(sample_chi)
1617652067539:lines(sample_chi)
1617652069105:replicate()
1618177540843:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618177540885:library(openintro)
1618177541009:library(tidyverse)
1618177541032:library(dplyr)
1618177541055:fertility <- read_csv("fertility.csv")
1618177541357:femalepop <- read_csv("femalepop.csv")
1618177541555:glimpse(fertility)
1618177541632:glimpse(femalepop)
1618177565667:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618177565690:library(openintro)
1618177565716:library(tidyverse)
1618177565738:library(dplyr)
1618177568819:fertility <- read_csv("fertility.csv")
1618177568980:femalepop <- read_csv("femalepop.csv")
1618177569120:glimpse(fertility)
1618177569176:glimpse(femalepop)
1618177618037:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618177618060:library(openintro)
1618177618082:library(tidyverse)
1618177618105:library(dplyr)
1618177618154:fertility <- read_csv("fertility.csv")
1618177618279:femalepop <- read_csv("femalepop.csv")
1618177618401:glimpse(fertility)
1618177618504:glimpse(femalepop)
1618177618608:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618177618647:# You may need additional chunks, in case you want to include some of the cleaning output.
1618177618719:# Use this to calculate some summary measures.
1618177618807:# Use this to create some plots.
1618177618899:# Here you can run your lm...
1618177618949:# I feel like the linear model should go at the end in terms of ordering. I mean, one variable stuff seems like it should preceed the two variable stuff. This is just a random thought and a bit of a recommendation if you aren't really sure about how to improve on the flow. Again, order things how you want, just be consistent between this section and the Methods (makes it easier for the reader).
1618177619108:## Maybe create a nice scatterplot with a regression line laid on top.
1618177619222:# Here you can calculate your CIs, run a bootstrap, etc.
1618177619283:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618177619361:# Here you can calculate your MLE based on the data. (Again, if you're using the MLE in your CI, you should probably put this subsection before the CI subsection)..
1618177619442:# Here you can calculate your test stats, critical values, etc.
1618177619484:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618177619564:# Here you can calculate your test stats, critical values, etc.
1618177619641:# I feel like this section is exploring the distribution of the data. It may be helpful in describing the data. If that's the case, you should probably put this subsection first.
1618177619665:# Alternatively, you could use this to help you find a prior, perhaps?? If that's the case, then put this subsection directly before the Bayesian CI subsection
1618177619737:# Here you can calculate your Credible Interval
1618177619821:# Here you can include some relevant visualizations.
1618177620367:View(femalepop)
1618177629932:View(femalepop)
1618177644999:View(fertility)
1618177959223:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618177959246:library(openintro)
1618177959269:library(tidyverse)
1618177959292:library(dplyr)
1618177960556:#fertility <- read_csv("fertility.csv")
1618177960581:femalepop <- read_csv("FemalePopulation.csv")
1618177960796:#glimpse(fertility)
1618177960821:glimpse(femalepop)
1618177967742:View(femalepop)
1618178016881:View(femalepop)
1618178214073:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618178214101:library(openintro)
1618178214121:library(tidyverse)
1618178214142:library(dplyr)
1618178215860:fertility <- read_csv("Fertility.csv")
1618178216113:femalepop <- read_csv("FemalePopulation.csv")
1618178216336:glimpse(fertility)
1618178216431:glimpse(femalepop)
1618178228360:fertility <- read_csv("Fertility.csv")
1618178228853:femalepop <- read_csv("FemalePopulation.csv")
1618178229073:view(fertility)
1618178229154:view(femalepop)
1618182121961:fertility <- read_csv("Fertility.csv")
1618182122215:femalepop <- read_csv("FemalePopulation.csv")
1618182122434:view(fertility)
1618182122515:view(femalepop)
1618182135092:fertility <- read_csv("Fertility.csv")
1618182135318:femalepop <- read_csv("FemalePopulation.csv")
1618182139379:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618182139400:library(openintro)
1618182139424:library(tidyverse)
1618182139448:library(dplyr)
1618182139493:fertility <- read_csv("Fertility.csv")
1618182139699:femalepop <- read_csv("FemalePopulation.csv")
1618182139976:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618182140018:# You may need additional chunks, in case you want to include some of the cleaning output.
1618182140099:# Use this to calculate some summary measures.
1618182140186:# Use this to create some plots.
1618182140286:# Here you can run your lm...
1618182140337:# I feel like the linear model should go at the end in terms of ordering. I mean, one variable stuff seems like it should preceed the two variable stuff. This is just a random thought and a bit of a recommendation if you aren't really sure about how to improve on the flow. Again, order things how you want, just be consistent between this section and the Methods (makes it easier for the reader).
1618182140499:## Maybe create a nice scatterplot with a regression line laid on top.
1618182140620:# Here you can calculate your CIs, run a bootstrap, etc.
1618182140681:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618182140762:# Here you can calculate your MLE based on the data. (Again, if you're using the MLE in your CI, you should probably put this subsection before the CI subsection)..
1618182140867:# Here you can calculate your test stats, critical values, etc.
1618182140920:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618182141020:# Here you can calculate your test stats, critical values, etc.
1618182141070:# I feel like this section is exploring the distribution of the data. It may be helpful in describing the data. If that's the case, you should probably put this subsection first.
1618182141093:# Alternatively, you could use this to help you find a prior, perhaps?? If that's the case, then put this subsection directly before the Bayesian CI subsection
1618182141178:# Here you can calculate your Credible Interval
1618182141273:# Here you can include some relevant visualizations.
1618183528322:View(fertility)
1618183783570:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618183783610:library(openintro)
1618183783633:library(opendatatoronto)
1618183787011:install.packages(c("opendatatoronto", "patchwork"))
1618183795896:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618183795946:library(openintro)
1618183795969:library(opendatatoronto)
1618183796278:library(dplyr)
1618183796302:library(patchwork)
1618183796370:library(tidyverse)
1618183796419:set.seed(899)
1618183796455:mse1 = numeric(10)
1618183796481:mse2 = numeric(10)
1618183796526:for(i in 1:100){
1618183796555:sigma_sq = i
1618183796581:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1618183796604:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1618183796649:n <- 100
1618183796675:M <- 1000
1618183796740:sim <- list(
1618183796762:T1 = numeric(M),
1618183796787:T2 = numeric(M)
1618183796808:)
1618183796830:for (j in 1:M) {
1618183796852:# Sample from Normal
1618183796874:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1618183796894:# Record the values of the two estimators:
1618183796916:sim$T1[j] <- T1(thesample)
1618183796944:sim$T2[j] <- T2(thesample)
1618183796971:}
1618183797017:#MSE
1618183797042:MSE_T1 <- var(sim$T1) + (mean(sim$T1) - sigma_sq)^2
1618183797073:MSE_T2 <- var(sim$T2) + (mean(sim$T2) - sigma_sq)^2
1618183797119:mse1[i] = MSE_T1
1618183797151:mse2[i] = MSE_T2
1618183797181:}
1618183800192:## Create your plots below. (I recommend using ggplot)
1618183800240:leftplot <- tibble(T1 = mse1) %>%
1618183800265:ggplot(aes(x = T1)) +
1618183800287:theme_classic() +
1618183800310:ggtitle("Histogram of MSE for multiple sigma squared values")+
1618183800331:theme(plot.title = element_text(size=8))+
1618183800352:xlab("MSE of estimator T1")+
1618183800374:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183800764:rightplot <- tibble(T2 = mse2) %>%
1618183800793:ggplot(aes(x = T2)) +
1618183800816:theme_classic() +
1618183800842:ggtitle("Histogram of MSE for multiple sigma squared values")+
1618183800875:theme(plot.title = element_text(size=8))+
1618183800898:xlab("MSE of estimator T2")+
1618183800924:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183801292:leftplot | rightplot
1618183801988:set.seed(899)
1618183802019:bias1 = numeric(10)
1618183802048:bias2 = numeric(10)
1618183802095:for(a in 1:100){
1618183802127:sigma_sq = a
1618183802155:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1618183802180:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1618183802225:n <- 100
1618183802248:M <- 1000
1618183802314:sim <- list(
1618183802342:T1 = numeric(M),
1618183802370:T2 = numeric(M)
1618183802398:)
1618183802430:for (b in 1:M) {
1618183802454:# Sample from Normal
1618183802483:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1618183802508:# Record the values of the two estimators:
1618183802534:sim$T1[b] <- T1(thesample)
1618183802559:sim$T2[b] <- T2(thesample)
1618183802583:}
1618183802621:#Bias
1618183802666:Bias_T1 <- mean(sim$T1) - sigma_sq
1618183802692:Bias_T2 <- mean(sim$T2) - sigma_sq
1618183802738:bias1[a] = Bias_T1
1618183802765:bias2[a] = Bias_T2
1618183802794:}
1618183805686:leftplotbias <- tibble(T1 = bias1) %>%
1618183805716:ggplot(aes(x = bias1)) +
1618183805746:theme_classic() +
1618183805773:ggtitle("Histogram of bias for multiple sigma squared values")+
1618183805804:theme(plot.title = element_text(size=8))+
1618183805831:xlab("Bias of estimator T1")+
1618183805856:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183806215:rightplotbias <- tibble(T2 = bias2) %>%
1618183806238:ggplot(aes(x = bias2)) +
1618183806261:theme_classic() +
1618183806287:ggtitle("Histogram of bias for multiple sigma squared values")+
1618183806309:theme(plot.title = element_text(size=8))+
1618183806332:xlab("Bias of estimator T2")+
1618183806354:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183806711:leftplotbias | rightplotbias
1618183807190:set.seed(899)
1618183807224:var1 = numeric(10)
1618183807251:var2 = numeric(10)
1618183807297:for(c in 1:100){
1618183807325:sigma_sq = c
1618183807350:T1 <- function(x) (1/(n-1)) * ((sum(x-mean(x)^2)))
1618183807381:T2 <- function(x) (1/n) * (sum(x-mean(x)^2))
1618183807431:n <- 100
1618183807454:M <- 1000
1618183807526:sim <- list(
1618183807550:T1 = numeric(M),
1618183807577:T2 = numeric(M)
1618183807602:)
1618183807625:for (d in 1:M) {
1618183807648:# Sample from Normal
1618183807671:thesample <- rnorm(n, mean=0, sd=sqrt(sigma_sq))
1618183807696:# Record the values of the two estimators:
1618183807720:sim$T1[d] <- T1(thesample)
1618183807751:sim$T2[d] <- T2(thesample)
1618183807776:}
1618183807821:#Bias
1618183807866:Var_T1 <- var(sim$T1)
1618183807893:Var_T2 <- var(sim$T2)
1618183807937:var1[c] = Var_T1
1618183807963:var2[c] = Var_T2
1618183807990:}
1618183810880:leftplotvar <- tibble(T1 = var1) %>%
1618183810913:ggplot(aes(x = var1)) +
1618183810937:theme_classic() +
1618183810965:xlab("Variance of estimator T1")+
1618183810990:ggtitle("Histogram of variance for multiple sigma squared values")+
1618183811012:theme(plot.title = element_text(size=7))+
1618183811036:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183811404:rightplotvar <- tibble(T2 = var2) %>%
1618183811425:ggplot(aes(x = var2)) +
1618183811448:theme_classic() +
1618183811476:ggtitle("Histogram of variance for multiple sigma squared values")+
1618183811497:theme(plot.title = element_text(size=7))+
1618183811520:xlab("Variance of estimator T2")+
1618183811543:geom_histogram(aes(y = ..count..),bins = 15,colour = "black",fill = "light blue")
1618183811901:leftplotvar | rightplotvar
1618183812742:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618183812796:# You may need additional chunks.
1618183812841:# I would recommend not including any of the Cleaning process output here.
1618183812887:# get package
1618183812907:package <- show_package("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1618183813481:package
1618183813541:# get all resources for this package
1618183813562:resources <- list_package_resources("fc4d95a6-591f-411f-af17-327e6c5d03c7")
1618183813672:# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
1618183813699:datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
1618183813758:# load the first datastore resource as a sample
1618183813786:data <- filter(datastore_resources, row_number()==1) %>% get_resource()
1618183816143:data
1618183816376:data %>%
1618183816408:ggplot(aes(x = Population, y=AutoTheft_AVG))+
1618183816434:ggtitle("Scatterplot of average auto thefts per neighbourhood to population in Toronto")+
1618183816459:theme(plot.title = element_text(size=12))+
1618183816485:geom_point(col = "blue")
1618244189939:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618244189979:library(openintro)
1618244190105:library(tidyverse)
1618244190124:library(dplyr)
1618244190308:fertility <- read_csv("Fertility.csv")
1618244190584:femalepop <- read_csv("FemalePopulation.csv")
1618244191132:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618244191173:# You may need additional chunks, in case you want to include some of the cleaning output.
1618244191258:# Use this to calculate some summary measures.
1618244191350:# Use this to create some plots.
1618244191443:# Here you can run your lm...
1618244191521:# I feel like the linear model should go at the end in terms of ordering. I mean, one variable stuff seems like it should preceed the two variable stuff. This is just a random thought and a bit of a recommendation if you aren't really sure about how to improve on the flow. Again, order things how you want, just be consistent between this section and the Methods (makes it easier for the reader).
1618244191668:## Maybe create a nice scatterplot with a regression line laid on top.
1618244191801:# Here you can calculate your CIs, run a bootstrap, etc.
1618244191863:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618244191948:# Here you can calculate your MLE based on the data. (Again, if you're using the MLE in your CI, you should probably put this subsection before the CI subsection)..
1618244192046:# Here you can calculate your test stats, critical values, etc.
1618244192115:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618244192213:# Here you can calculate your test stats, critical values, etc.
1618244192261:# I feel like this section is exploring the distribution of the data. It may be helpful in describing the data. If that's the case, you should probably put this subsection first.
1618244192291:# Alternatively, you could use this to help you find a prior, perhaps?? If that's the case, then put this subsection directly before the Bayesian CI subsection
1618244192370:# Here you can calculate your Credible Interval
1618244192465:# Here you can include some relevant visualizations.
1618244193147:View(femalepop)
1618244196642:View(fertility)
1618254224620:View(fertility)
1618254341066:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254341103:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254341139:fertility %>%
1618254341162:select(`Data Source` ,X63)
1618254341229:fertility
1618254341432:femalepop
1618254351974:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254352015:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254352050:fertility %>%
1618254352086:select(`Data Source` ,X63)
1618254352146:fertility
1618254352395:femalepop
1618254375591:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254375628:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254375666:fertility <- fertility %>%
1618254375687:select(`Data Source` ,X63)
1618254375718:fertility
1618254375797:femalepop
1618254448281:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254448318:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254448350:fertility <- fertility %>%
1618254448380:select(`Data Source` ,X63) %>%
1618254448401:filter(!is.na(X63))
1618254448438:fertility
1618254448506:femalepop
1618254464812:View(fertility)
1618254572347:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254572379:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254572410:fertility <- fertility %>%
1618254572431:select(`Data Source` ,X63) %>%
1618254572450:filter(!is.na(X63)) %>%
1618254572471:rename(`Data Source` = Country)
1618254601005:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254601044:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254601080:fertility <- fertility %>%
1618254601098:select(`Data Source` ,X63) %>%
1618254601118:filter(!is.na(X63)) %>%
1618254601136:rename(Country = `Data Source`)
1618254601170:fertility
1618254601248:femalepop
1618254641323:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254641358:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254641395:fertility <- fertility %>%
1618254641418:select(`Data Source` ,X63) %>%
1618254641441:filter(!is.na(X63)) %>%
1618254641463:rename(Country = `Data Source`)%>%
1618254641483:rename(Fertiltiy Rate = X63)
1618254647997:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254648033:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254648069:fertility <- fertility %>%
1618254648087:select(`Data Source` ,X63) %>%
1618254648108:filter(!is.na(X63)) %>%
1618254648135:rename(Country = `Data Source`)%>%
1618254648165:rename(Fertiltiy_Rate = X63)
1618254659614:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254659652:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254659684:fertility <- fertility %>%
1618254659702:select(`Data Source` ,X63) %>%
1618254659718:filter(!is.na(X63)) %>%
1618254659739:rename(Country = `Data Source`)%>%
1618254659756:rename(poo = X63)
1618254665158:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618254665177:library(openintro)
1618254665204:library(tidyverse)
1618254665224:library(dplyr)
1618254665272:fertility <- read_csv("Fertility.csv")
1618254665480:femalepop <- read_csv("FemalePopulation.csv")
1618254665742:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254665791:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254665828:fertility <- fertility %>%
1618254665848:select(`Data Source` ,X63) %>%
1618254665872:filter(!is.na(X63)) %>%
1618254665894:rename(Country = `Data Source`)%>%
1618254665919:rename(poo = X63)
1618254665956:fertility
1618254666034:femalepop
1618254666277:# Use this to calculate some summary measures.
1618254666357:# Use this to create some plots.
1618254666444:# Here you can run your lm...
1618254666490:# I feel like the linear model should go at the end in terms of ordering. I mean, one variable stuff seems like it should preceed the two variable stuff. This is just a random thought and a bit of a recommendation if you aren't really sure about how to improve on the flow. Again, order things how you want, just be consistent between this section and the Methods (makes it easier for the reader).
1618254666623:## Maybe create a nice scatterplot with a regression line laid on top.
1618254666728:# Here you can calculate your CIs, run a bootstrap, etc.
1618254666787:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618254666884:# Here you can calculate your MLE based on the data. (Again, if you're using the MLE in your CI, you should probably put this subsection before the CI subsection)..
1618254666954:# Here you can calculate your test stats, critical values, etc.
1618254666997:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618254667101:# Here you can calculate your test stats, critical values, etc.
1618254667145:# I feel like this section is exploring the distribution of the data. It may be helpful in describing the data. If that's the case, you should probably put this subsection first.
1618254667166:# Alternatively, you could use this to help you find a prior, perhaps?? If that's the case, then put this subsection directly before the Bayesian CI subsection
1618254667253:# Here you can calculate your Credible Interval
1618254667341:# Here you can include some relevant visualizations.
1618254675858:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254675892:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254675941:fertility <- fertility %>%
1618254675965:select(`Data Source` ,X63) %>%
1618254675990:filter(!is.na(X63)) %>%
1618254676017:rename(Country = `Data Source`)%>%
1618254676038:rename(Fertility_Rate = X63)
1618254680384:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618254680404:library(openintro)
1618254680422:library(tidyverse)
1618254680440:library(dplyr)
1618254680487:fertility <- read_csv("Fertility.csv")
1618254680683:femalepop <- read_csv("FemalePopulation.csv")
1618254680919:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254680971:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254681014:fertility <- fertility %>%
1618254681035:select(`Data Source` ,X63) %>%
1618254681058:filter(!is.na(X63)) %>%
1618254681076:rename(Country = `Data Source`)%>%
1618254681096:rename(Fertility_Rate = X63)
1618254681132:fertility
1618254681199:femalepop
1618254681478:# Use this to calculate some summary measures.
1618254681554:# Use this to create some plots.
1618254681639:# Here you can run your lm...
1618254681680:# I feel like the linear model should go at the end in terms of ordering. I mean, one variable stuff seems like it should preceed the two variable stuff. This is just a random thought and a bit of a recommendation if you aren't really sure about how to improve on the flow. Again, order things how you want, just be consistent between this section and the Methods (makes it easier for the reader).
1618254681809:## Maybe create a nice scatterplot with a regression line laid on top.
1618254681915:# Here you can calculate your CIs, run a bootstrap, etc.
1618254681975:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618254682059:# Here you can calculate your MLE based on the data. (Again, if you're using the MLE in your CI, you should probably put this subsection before the CI subsection)..
1618254682136:# Here you can calculate your test stats, critical values, etc.
1618254682178:# (maybe you want to use the MLE to find the CI or your test stat. That sounds like a good way to order the analysis... I don't know, just spit balling here.)
1618254682249:# Here you can calculate your test stats, critical values, etc.
1618254682291:# I feel like this section is exploring the distribution of the data. It may be helpful in describing the data. If that's the case, you should probably put this subsection first.
1618254682309:# Alternatively, you could use this to help you find a prior, perhaps?? If that's the case, then put this subsection directly before the Bayesian CI subsection
1618254682403:# Here you can calculate your Credible Interval
1618254682484:# Here you can include some relevant visualizations.
1618254746352:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254746393:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254746432:fertility <- fertility %>%
1618254746453:select(`Data Source` ,X63) %>%
1618254746474:filter(!is.na(X63)) %>%
1618254746495:rename(Country = `Data Source`)%>%
1618254746515:rename(Fertility_Rate = X63)
1618254750354:knitr::opts_chunk$set(warning = FALSE, message = FALSE)
1618254750374:library(openintro)
1618254750392:library(tidyverse)
1618254750412:library(dplyr)
1618254750459:fertility <- read_csv("Fertility.csv")
1618254750694:femalepop <- read_csv("FemalePopulation.csv")
1618254750947:# Here you can load in and clean the data (you may need to do the cleaning in a separate R script).
1618254750990:# You may need additional chunks, in case you want to include some of the cleaning output.
1618254751029:fertility <- fertility %>%
1618254751053:select(`Data Source` ,X63) %>%
